
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗаполнитьРеквизитыПоУмолчаниюНаСервере(); 
	
	Если Параметры.Ключ.Пустая() Тогда
    	ЗаполнитьНаСервере();  
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	ПроверкаАктуальностиДанных(ЭтотОбъект);
	
КонецПроцедуры                                          

&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчаниюНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Объект.МесяцНачисления = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	МесяцНачисленияСтрокой  = инкЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	
	инкОбщийСервер.ЗадатьЗначениеПоУмолчанию("ВидРасчетаДниЧасы",Перечисления.инкВидРасчетаДниЧасы.ВДнях,Объект);
	
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Объект.ВКалендарныхДнях = Ложь;
	//КонецЕсли;                           

	мПереключательОклад = Истина;
	мПереключательНачисленияУдержания = "Начисления"; 

	Если Не ЗначениеЗаполнено(Объект.ИсточникФинансирования) Тогда
		Объект.ИсточникФинансирования = Справочники.инкИсточникиФинансирования.ОсновнойБаланс;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.инкОрганизации.ПолучитьЕдинственнуюОрганизацию();	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.УчитыватьКакСальдоСуммуЗаПредыдущийМесяц = Истина;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		мПодразделение = Объект.Подразделение;
	Иначе
		мПодразделение = "Все предприятие";	
	КонецЕсли;
	
	УстановитьВидимостьКолонокВедомости();   
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьПоляНачислений()
	
	ПоляТаблицы = Новый Массив;  
	ПоляТаблицы.Добавить("Оклад");
	ПоляТаблицы.Добавить("СотрудникОклад");
	ПоляТаблицы.Добавить("Дни");
	ПоляТаблицы.Добавить("ДниФакт");
	ПоляТаблицы.Добавить("Часы");
	ПоляТаблицы.Добавить("ЧасыФакт");
	ПоляТаблицы.Добавить("НормаДни");
	ПоляТаблицы.Добавить("НормаДниФакт");
	ПоляТаблицы.Добавить("НормаЧасы");
	ПоляТаблицы.Добавить("НормаЧасыФакт");
	ПоляТаблицы.Добавить("РайонныйКоэффициент");
	ПоляТаблицы.Добавить("СевернаяНадбавка");
	ПоляТаблицы.Добавить("Отпуск");
	ПоляТаблицы.Добавить("БольничныйЛист");
	ПоляТаблицы.Добавить("ПрочиеНачисления");
	ПоляТаблицы.Добавить("ВсегоНачислено");
	
	Возврат ПоляТаблицы;
	
КонецФункции

&НаСервере
Функция ПолучитьПоляУдержаний()

	ПоляТаблицы = Новый Массив;
	ПоляТаблицы.Добавить("СальдоВходящее");
	ПоляТаблицы.Добавить("НДФЛ");
	ПоляТаблицы.Добавить("ЗарплатаПредыдущегоМесяца");  
	ПоляТаблицы.Добавить("ОтпускИБольничныйЛист");  
	ПоляТаблицы.Добавить("ПрочиеУдержания");
	//ПоляТаблицы.Добавить("ЗарплатаТекущегоМесяца");  
	//ПоляТаблицы.Добавить("ЗарплатаТекущегоМесяцаДо22");  
	//ПоляТаблицы.Добавить("ЗарплатаТекущегоМесяцаПосле22");  
	ПоляТаблицы.Добавить("Аванс");  
	//ПоляТаблицы.Добавить("Алименты");  
	ПоляТаблицы.Добавить("ИсполнительныйЛист");  
	ПоляТаблицы.Добавить("ВсегоУдержано");
	ПоляТаблицы.Добавить("КВыплате");
	
	Возврат ПоляТаблицы;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьКолонокВедомости()

	ОтображениеНачислений = (мПереключательНачисленияУдержания = "Начисления");

	// Начисления:
	ПоляНачисленийМассив = ПолучитьПоляНачислений();
	Для каждого ПолеНачисления Из ПоляНачисленийМассив Цикл
		Элементы["Ведомость"+ПолеНачисления].Видимость = ОтображениеНачислений;	
	КонецЦикла;
	
	// Удержания:
	ПоляУдержанийМассив = ПолучитьПоляУдержаний();
	Для каждого ПолеУдержания Из ПоляУдержанийМассив Цикл
		Элементы["Ведомость"+ПолеУдержания].Видимость = НЕ ОтображениеНачислений;	
	КонецЦикла;
	
	Если ОтображениеНачислений Тогда
		УстановитьВидимостьДниЧасы();
		УстановитьВидимостьОклада();
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОклада()
	
	Элементы.ВедомостьОклад.Видимость = НЕ мПереключательОклад;
	Элементы.ВедомостьСотрудникОклад.Видимость = мПереключательОклад;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДниЧасы()
	
	Перем ВидимостьДниБулево;
	ВидимостьДниБулево = Истина;
	Если Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВЧасах Тогда
		ВидимостьДниБулево = Ложь;	
	КонецЕсли;
	
	Элементы.ВедомостьДни.Видимость 			= (ВидимостьДниБулево И мКалендарныеДни);
	Элементы.ВедомостьДниФакт.Видимость 		= (ВидимостьДниБулево И мКалендарныеДни);
	Элементы.ВедомостьНормаДни.Видимость 		= (ВидимостьДниБулево И НЕ мКалендарныеДни);
	Элементы.ВедомостьНормаДниФакт.Видимость 	= (ВидимостьДниБулево И НЕ мКалендарныеДни);
	
	Элементы.ВедомостьЧасы.Видимость 			= (НЕ ВидимостьДниБулево И мКалендарныеДни);
	Элементы.ВедомостьЧасыФакт.Видимость 		= (НЕ ВидимостьДниБулево И мКалендарныеДни);
	Элементы.ВедомостьНормаЧасы.Видимость 		= (НЕ ВидимостьДниБулево И НЕ мКалендарныеДни);
	Элементы.ВедомостьНормаЧасыФакт.Видимость 	= (НЕ ВидимостьДниБулево И НЕ мКалендарныеДни);

КонецПроцедуры

&НаКлиенте
Процедура мПереключательОкладПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокВедомости();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РассчитыватьДокументыПриРедактировании Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Отказ 
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КлючеваяОперация = "Документ.инкНачислениеЗарплаты.Проведение";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Дата <> ДатаПредыдущая
		И НачалоМесяца(Объект.Дата) <> НачалоМесяца(Объект.МесяцНачисления) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Укажите дату в интервале с %1 по %2'"),
			Формат(НачалоМесяца(Объект.МесяцНачисления), "ДЛФ=D"),
			Формат(КонецМесяца(Объект.МесяцНачисления), "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Дата", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	
	ТекстВопроса = "При изменении реквизита перезапишется табличная часть ведомости. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораПродолжение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
    
    Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
        ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
    	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
    	ОткрытьФорму("ОбщаяФорма.инкВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Объект.МесяцНачисления, , , , ОписаниеОповещения);
    КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	Объект.МесяцНачисления = РезультатВыбора.НачалоПериода;
    инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", 0, Модифицированность);
    ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);

КонецПроцедуры
    
&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	ДопПараметры.Вставить("Направление",Направление);
	
	ТекстВопроса = "При изменении реквизита перезапишется табличная часть ведомости. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойРегулированиеЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулированиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Параметры.Направление, Модифицированность);
		ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокумент()
	
	ЕстьДанные = Объект.ПрочиеНачисления.Количество() > 0
		ИЛИ Объект.ПрочиеУдержания.Количество() > 0
		ИЛИ Объект.НДФЛ.Количество() > 0
		;
		
	Если ЕстьДанные Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличные части будут очищены. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаполнениеДокументаНачислениеЗарплаты");
		ОчиститьСообщения();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументЗавершение(Результат, ИмяТабЧасти) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗаполнениеДокументаНачислениеЗарплаты");
		ОчиститьСообщения();
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ПодготовитьДокументКЗаполнениюНаСервере(ДокОбъект);
	
	МенеджерРасчета = Обработки.инкРасчетЗарабатнойПлаты.Создать();
	МенеджерРасчета.Инициализация(ДокОбъект);
	МенеджерРасчета.ВыполнитьРасчетЗаработнойПлаты();
	
	ДокОбъект = МенеджерРасчета.ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты; 
    ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура ПодготовитьДокументКЗаполнениюНаСервере(ДокОбъект)

	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	Для каждого ТабличнаяЧастьДокумента из СписокТабличныхЧастей Цикл
		ДокОбъект[ТабличнаяЧастьДокумента].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ОбработатьИзменениеМесяцНачисленияНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	Объект.Дата = НачалоДня(КонецМесяца(Объект.МесяцНачисления));
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОчиститьТабличныеЧасти();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура мПереключательНачисленияУдержанияПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокВедомости();

КонецПроцедуры

&НаКлиенте
Процедура ВедомостьОкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные.ОкладРазмер = ТекущиеДанные.Оклад;
	
КонецПроцедуры

&НаКлиенте
Процедура мКалендарныеДниПриИзменении(Элемент)
	УстановитьВидимостьКолонокВедомости();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Функция СписокТабличныхЧастейДокумента()
	
	СписокТабличныхЧастей = Новый Массив;
	
	СписокТабличныхЧастей.Добавить("Ведомость");
	СписокТабличныхЧастей.Добавить("ПрочиеНачисления");
	СписокТабличныхЧастей.Добавить("ПрочиеУдержания");
	СписокТабличныхЧастей.Добавить("ВычетыНДФЛ");
	СписокТабличныхЧастей.Добавить("НДФЛ");
	
	Возврат СписокТабличныхЧастей;
	
КонецФункции

&НаСервере
Процедура ОчиститьТабличныеЧасти()
	
	СписокТабличныхЧастей = СписокТабличныхЧастейДокумента();
	
	Для каждого ИмяТабличнойЧасти Из СписокТабличныхЧастей Цикл
		Объект[ИмяТабличнойЧасти].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокОбновляемыхРаботников(Знач ИдентификаторыСтрок)
	
	ЭтотОбъект.ОбновляемыеСотрудники = Неопределено;
	СписокОбновляемыхРаботников(ИдентификаторыСтрок,"ОбновляемыеСотрудники","Сотрудник");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВыбранныхСотрудников(Сотрудники)
	
	СписокТабличныхЧастейДокумента = СписокТабличныхЧастейДокумента();
	
	Для каждого СотрудникСтрока из Сотрудники Цикл 
		
		Для каждого ТабличнаяЧасть из СписокТабличныхЧастейДокумента Цикл
			
			УдалитьДанныеИзТабличнойЧасти(ТабличнаяЧасть,СотрудникСтрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеИзТабличнойЧасти(ТабличнаяЧасть,СотрудникСтрока)
	
	ТабличнаяЧастьОбъекта = Объект[ТабличнаяЧасть];
	
	ПоискСотрудника = Новый Структура("Сотрудник",СотрудникСтрока);
	МассивСтрок = ТабличнаяЧастьОбъекта.НайтиСтроки(ПоискСотрудника);
	
	Для каждого СтрокаЭлемент из МассивСтрок Цикл
		ТабличнаяЧастьОбъекта.Удалить(СтрокаЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокОбновляемыхРаботников(Знач ИдентификаторыСтрок, ИмяПриемника, ИмяРеквизита)
	
	РаботникиКОбновлению = Новый Соответствие;
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		СписокИдентификаторовСтрок = ИдентификаторыСтрок;
	Иначе
		СписокИдентификаторовСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из СписокИдентификаторовСтрок Цикл
		
		СтрокаРаботника = Объект.Ведомость.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаРаботника <> Неопределено И ЗначениеЗаполнено(СтрокаРаботника[ИмяРеквизита]) Тогда
			РаботникиКОбновлению.Вставить(СтрокаРаботника[ИмяРеквизита], Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтотОбъект[ИмяПриемника] <> Неопределено Тогда
		
		СписокОбновляемых = Новый Массив(ЭтотОбъект[ИмяПриемника]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокОбновляемых, ОбщегоНазначения.ВыгрузитьКолонку(РаботникиКОбновлению, "Ключ"), Истина);
		
	Иначе
		СписокОбновляемых = ОбщегоНазначения.ВыгрузитьКолонку(РаботникиКОбновлению, "Ключ");
	КонецЕсли;
	
	ЭтотОбъект[ИмяПриемника] = Новый ФиксированныйМассив(СписокОбновляемых);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элемент, ВыбранноеЗначение, ПерезаполнятьВедомость = Истина)

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	ДопПараметры.Вставить("ВыбранноеЗначение",ВыбранноеЗначение);
	ДопПараметры.Вставить("ПерезаполнятьВедомость",ПерезаполнятьВедомость);
	                                             	
	ТекстВопроса = "При изменении реквизита "
	             + Элемент.Имя
				 + " перезапишется табличная часть ведомости. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("ИзменениеКлючевыхРеквизитовРасчетаЗарплатыЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКлючевыхРеквизитовРасчетаЗарплатыЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Параметры.Элемент.Имя = "МесяцНачисленияСтрокой" Тогда
			
			Значение = Параметры.ВыбранноеЗначение.НачалоПериода; 
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "Объект.МесяцНачисления", Значение);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(ЭтотОбъект, "МесяцНачисленияСтрокой", инкЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));

		Иначе
			Объект[Параметры.Элемент.Имя] = Параметры.ВыбранноеЗначение;	
		КонецЕсли;
		
		ОчиститьТабличныеЧасти();
		Если Параметры.ПерезаполнятьВедомость Тогда
			Заполнить(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудниковНаКлиенте()

	ПараметрыОтбораСтруктура = ПолучитьСтруктуруПараметровОткрытияДляДобавленияСотрудниковНаСервере();
	ПараметрыОткрытия = Новый Структура("ПараметрыОтбора", ПараметрыОтбораСтруктура);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьСотрудниковЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Справочник.инкСотрудники.ФормаВыбора", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровОткрытияДляДобавленияСотрудниковНаСервере()
	
	ПараметрыОтбора = Новый Структура;

	Если ЗначениеЗаполнено(Объект.Организация) Тогда

		НастройкаОтбора = Новый Структура;
		НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Организация"));
		НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		НастройкаОтбора.Вставить("ПравоеЗначение", Объект.Организация);
	    НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ПараметрыОтбора.Вставить("Организация", НастройкаОтбора);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		НастройкаОтбора = Новый Структура;
		НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Подразделение"));
		НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		НастройкаОтбора.Вставить("ПравоеЗначение", Объект.Подразделение);
	    НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ПараметрыОтбора.Вставить("Подразделение", НастройкаОтбора);
		
	КонецЕсли;
	
	НастройкаОтбора = Новый Структура;
	НастройкаОтбора.Вставить("ЛевоеЗначение", Новый ПолеКомпоновкиДанных("Ссылка"));
	НастройкаОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.НеВСписке);
	НастройкаОтбора.Вставить("ПравоеЗначение", Объект.Ведомость.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
    НастройкаОтбора.Вставить("РежимОтображения", РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ПараметрыОтбора.Вставить("Ссылка", НастройкаОтбора);
		
	Возврат ПараметрыОтбора; 

КонецФункции
	
&НаКлиенте
Процедура ДобавитьСотрудниковЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		ДобавитьСотрудниковНаСервере(РезультатРедактирования);
	КонецЕсли;
	    	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАнкетныхДанныхНаКлиенте(Сотрудник)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Сотрудник);
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеАнкетныхДанныхЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Справочник.инкСотрудники.Форма.ФормаЭлемента", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАнкетныхДанныхЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		Если РезультатРедактирования.Модифицированность Тогда 
			ПересчитатьСотрудниковНаСервере(РезультатРедактирования.СотрудникСсылка,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСотрудниковНаСервере(РезультатРедактирования)
	
	Сотрудники = Новый Массив; 
	Если ТипЗнч(РезультатРедактирования) = Тип("СправочникСсылка.инкСотрудники") Тогда
		Сотрудники.Добавить(РезультатРедактирования);
	ИначеЕсли ТипЗнч(РезультатРедактирования) = Тип("Массив") Тогда 
		Сотрудники = РезультатРедактирования;	
	КонецЕсли;
	
	Если Сотрудники.Количество() > 0 Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ДобавитьСотрудниковВВедомость(Сотрудники);
	    ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудниковНаСервере(СписокСотрудников = Неопределено,ПерерасчетСотрудника = Истина, ВыводитьСообщения = Ложь, ДопПараметры = Неопределено)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПересчетСотрудниковВОбъекте(СписокСотрудников,ПерерасчетСотрудника,ВыводитьСообщения,ДопПараметры);
    ЗначениеВРеквизитФормы(ДокОбъект, "Объект");

	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ВопросПередУдалениемСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередУдалениемСотрудников()
	
	ТекстВопроса = НСтр("ru = 'Удалить расчет по выбранным сотрудникам?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПередУдалениемСотрудниковЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередУдалениемСотрудниковЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьСписокОбновляемыхРаботников(Элементы.Ведомость.ВыделенныеСтроки);
		УдалитьВыбранныхСотрудников(ЭтотОбъект.ОбновляемыеСотрудники);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПересчитатьСотрудниковНаСервере(ТекущиеДанные.Сотрудник);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьСотрудниковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не инкЗарплатаКадрыКлиент.ОрганизацияЗаполнена(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ВопросЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	
	СортироватьСтроки("Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	
	СортироватьСтроки("Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыРасчета(Команда)
	
	ВедомостьВыделенныеСтроки = Элементы.Ведомость.ТекущиеДанные;
	Если ВедомостьВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	Сотрудники.Добавить(ВедомостьВыделенныеСтроки.Сотрудник);	
	ПересчитатьСотрудниковНаСервере(Сотрудники,Истина);
	
	ВывестиРезультатРасчета(Сотрудники);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРасчета(Команда)
	
	ВедомостьВыделенныеСтроки = Элементы.Ведомость.ТекущиеДанные;
	Если ВедомостьВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	Сотрудники.Добавить(ВедомостьВыделенныеСтроки.Сотрудник);	
	ДопПараметры = Новый Структура("Сотрудники",Сотрудники);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДопПараметры);
		   
	ПараметрыОткрытия = Новый Структура;
		   
	ОткрытьФорму("ОбщаяФорма.инкВыборПериода", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ПолучитьРасчетныеЛисткиНаСервере(Период,Сотрудники)
	
	МенеджерПечати = Обработки.инкРасчетныеЛисты.Создать();
	МенеджерПечати.Сотрудники = Сотрудники;
	МенеджерПечати.Дата1 = Период.ДатаНачала;
	МенеджерПечати.Дата2 = Период.ДатаОкончания;
	ТабличныйДокумент = МенеджерПечати.ПолучитьРасчетныеЛистки();

	Возврат ТабличныйДокумент; 
	
КонецФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ТабличныйДокумент = ПолучитьРасчетныеЛисткиНаСервере(РезультатРедактирования.Период,ДополнительныеПараметры.Сотрудники);
		инкОтчетыКлиент.ПечатьТабличногоДокумента(ТабличныйДокумент,"Расчетные листки",ЭтаФорма);
			
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура АнкетныеДанные(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Сотрудник      = Элементы.Ведомость.ТекущиеДанные.Сотрудник;
	
	ОткрытьФормуАнкетныхДанныхНаКлиенте(Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСтроки(Направление)
	
	Объект.Ведомость.Сортировать("Сотрудник " + Направление);
	
КонецПроцедуры

&НаСервере
Функция ОбъектРасчетаЗарплатыИСотрудникВХранилище(ДанныеСотрудника)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОбъектРасчетаЗарплаты",РеквизитФормыВЗначение("Объект"));
	ПараметрыРасчета.Вставить("ДанныеСотрудника",ДанныеСотрудника);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СотрудникВХранилище(СотрудникСсылка)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сотрудник",СотрудникСсылка);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ВыборСпискаСотрудниковВХранилище(ВопросПриВыборе)
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сотрудники",Объект.Ведомость.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	ПараметрыРасчета.Вставить("ВопросПриВыборе",ВопросПриВыборе);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ОбъектРасчетаЗарплатыВХранилище()
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ОбъектРасчетаЗарплаты",РеквизитФормыВЗначение("Объект"));
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции                            

&НаСервере
Процедура ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования,ДанныеСотрудника)

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ссСотрудник			= ПараметрыРасчета.Сотрудник;
	тзПрочиеНачисления	= ПараметрыРасчета.тзПрочиеНачисления;
	ДокументСсылка		= Неопределено;
	Если ПараметрыРасчета.Свойство("ДокументСсылка") Тогда
		ДокументСсылка	= ПараметрыРасчета.ДокументСсылка;
	КонецЕсли;
			
	инкРасчетЗаработнойПлатыСервер.ДобавитьПрочиеНачисленияВОбъект(Объект, ссСотрудник, тзПрочиеНачисления, ДокументСсылка, ДанныеСотрудника);
	
	ПересчитатьСотрудниковНаСервере(ссСотрудник);	
		
КонецПроцедуры	

&НаСервере
Процедура ЗагрузитьПрочиеУдержанияНаСервере(РезультатРедактирования, ДанныеСотрудника)

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ссСотрудник			= ПараметрыРасчета.Сотрудник;
	тзПрочиеУдержания	= ПараметрыРасчета.тзПрочиеУдержания;
	
	Если ЗначениеЗаполнено(ссСотрудник) Тогда
		
		стрПоиск = Новый Структура("Сотрудник",ссСотрудник);
		массСтрокиПрочихУдержаний = Объект.ПрочиеУдержания.НайтиСтроки(стрПоиск);
		Для Каждого ЭлементМассив Из массСтрокиПрочихУдержаний Цикл
			Объект.ПрочиеУдержания.Удалить(ЭлементМассив); //удаляем строки
		КонецЦикла;
			
		Для каждого стртзПрочиеУдержания из тзПрочиеУдержания Цикл

			Если ((стртзПрочиеУдержания.СуммаУдержания = 0) И (стртзПрочиеУдержания.ПроцентОтБазы = 0)) ИЛИ  
				 НЕ ЗначениеЗаполнено(стртзПрочиеУдержания.Удержание)	
			Тогда
				Продолжить;
			КонецЕсли;  
			
			стрПрочиеУдержания = Объект.ПрочиеУдержания.Добавить(); 
			ЗаполнитьЗначенияСвойств(стрПрочиеУдержания,стртзПрочиеУдержания);
			стрПрочиеУдержания.Сотрудник = ссСотрудник;   
			Если ЗначениеЗаполнено(ДанныеСотрудника) Тогда
				стрПрочиеУдержания.Подразделение = ДанныеСотрудника.Подразделение; 	
			КонецЕсли;
			
		КонецЦикла;
	
		ПересчитатьСотрудниковНаСервере(ссСотрудник);	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РедактированиеНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("Подразделение",ДополнительныеПараметры.Подразделение);
		ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования,ДанныеСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеУдержанийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("Подразделение",ДополнительныеПараметры.Подразделение);
		ЗагрузитьПрочиеУдержанияНаСервере(РезультатРедактирования, ДанныеСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПрочиеУдержания(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Оповещение = Новый ОписаниеОповещения("РедактированиеУдержанийЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ДанныеСотрудника = ПолучитьДанныеСотрудника(Элементы.Ведомость.ТекущиеДанные);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ОбъектРасчетаЗарплатыИСотрудникВХранилище(ДанныеСотрудника));
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаПрочиеУдержания", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеСотрудника(ТекущиеДанные)

	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник",ТекущиеДанные.Сотрудник);
	ДанныеСотрудника.Вставить("ДниЧасы",0);
	
	Если ВидРасчетаВДнях() Тогда
		
		ДанныеСотрудника.ДниЧасы = ТекущиеДанные.НормаДни;
		Если ДанныеСотрудника.ДниЧасы = 0 Тогда
			ДанныеСотрудника.ДниЧасы = ТекущиеДанные.Дни;
		КонецЕсли;
		
	Иначе
		
		ДанныеСотрудника.ДниЧасы = ТекущиеДанные.НормаЧасы;
		Если ДанныеСотрудника.ДниЧасы = 0 Тогда
			ДанныеСотрудника.ДниЧасы = ТекущиеДанные.Часы;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеСотрудника;
	
КонецФункции               

&НаСервере
Функция ВидРасчетаВДнях()
	
	Возврат Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПересчитатьСотрудниковНаСервере(ТекущиеДанные.Сотрудник,Истина,Истина);	
	
КонецПроцедуры  

&НаКлиенте
Процедура ПересчитатьВсех(Команда)                                          
	
	ПересчитатьСотрудниковНаСервере();	

КонецПроцедуры         

&НаКлиенте
Процедура Добавить(Команда)
	
	Элементы.Ведомость.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельИзменить(Команда)
	
	стрПараметры = Новый Структура;
	стрПараметры.Вставить("Организация",Объект.Организация);
	стрПараметры.Вставить("Подразделение",Объект.Подразделение);
	стрПараметры.Вставить("МесяцНачисления",Объект.МесяцНачисления);
	стрПараметры.Вставить("Сотрудники",ПолучитьСписокСотрудниковИзВедомости());
	
	ОткрытьФорму("РегистрСведений.инкТабельУчетаРабочегоВремени.Форма.ФормаТабельУчетаРабочегоВремени", стрПараметры);
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьСписокСотрудниковИзВедомости()
	
	СотрудникиСписок = Новый СписокЗначений;
	СотрудникиМассив = Объект.Ведомость.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	СотрудникиСписок.ЗагрузитьЗначения(СотрудникиМассив);
	
	Возврат СотрудникиСписок;	
	
КонецФункции

&НаСервере
Процедура ТабельВставитьДанныеВсемНаСервере(Сотрудник = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|			КОГДА инкТабельУчетаРабочегоВремени.ВДнях = ""Я""
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВДнях,
		|	СУММА(инкТабельУчетаРабочегоВремени.ВЧасах) КАК ВЧасах,
		|	СУММА(ВЫБОР
		|			КОГДА инкТабельУчетаРабочегоВремени.ВДнях <> ""Я""
		|					И инкТабельУчетаРабочегоВремени.ВДнях <> """"
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеРабочиеДни,
		|	СУММА(ВЫБОР
		|			КОГДА инкТабельУчетаРабочегоВремени.ВДнях <> ""Я""
		|					И инкТабельУчетаРабочегоВремени.ВДнях <> """"
		|				ТОГДА инкТабельУчетаРабочегоВремени.ВЧасах
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НеРабочиеЧасы
		|ПОМЕСТИТЬ втДанныеТабеля
		|ИЗ
		|	РегистрСведений.инкТабельУчетаРабочегоВремени КАК инкТабельУчетаРабочегоВремени
		|ГДЕ
		|	инкТабельУчетаРабочегоВремени.Месяц = &Месяц
		|	И инкТабельУчетаРабочегоВремени.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	инкТабельУчетаРабочегоВремени.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	инкКадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	инкКадроваяИсторияСотрудниковСрезПоследних.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
		|	инкКадроваяИсторияСотрудниковСрезПоследних.ДатаУвольнения КАК ДатаУвольнения,
		|	инкКадроваяИсторияСотрудниковСрезПоследних.ИндивидуальныйКоэффициент КАК ИндивидуальныйКоэффициент
		|ПОМЕСТИТЬ втКадровыеДанные
		|ИЗ
		|	РегистрСведений.инкКадроваяИсторияСотрудников.СрезПоследних(
		|			,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					втДанныеТабеля.Сотрудник КАК Сотрудник
		|				ИЗ
		|					втДанныеТабеля КАК втДанныеТабеля)) КАК инкКадроваяИсторияСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеТабеля.Сотрудник КАК Сотрудник,
		|	втДанныеТабеля.ВДнях КАК ВДнях,
		|	втДанныеТабеля.ВЧасах КАК ВЧасах,
		|	втДанныеТабеля.НеРабочиеДни КАК НеРабочиеДни,
		|	втДанныеТабеля.НеРабочиеЧасы КАК НеРабочиеЧасы,
		|	втКадровыеДанные.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу,
		|	втКадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	втКадровыеДанные.ИндивидуальныйКоэффициент КАК ИндивидуальныйКоэффициент
		|ИЗ
		|	втДанныеТабеля КАК втДанныеТабеля
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКадровыеДанные КАК втКадровыеДанные
		|		ПО втДанныеТабеля.Сотрудник = втКадровыеДанные.Сотрудник";
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкТабельУчетаРабочегоВремени.Сотрудник = &Сотрудник","Истина");
	КонецЕсли;
	
	РабочихДнейЧасов = инкОбщийСервер.ПолучитьРабочиеДниЧасыЗаМесяц(Объект.МесяцНачисления);
	
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	тзТабель = Запрос.Выполнить().Выгрузить();
	
	Для каждого стрТабель из тзТабель Цикл
		
		стрПоиск = Новый Структура("Сотрудник",стрТабель.Сотрудник);
		Сотрудники = Объект.Ведомость.НайтиСтроки(стрПоиск);
		КорректировкаВремени = ПолучитьКорректировкуВремениПоСотруднику(стрТабель,Объект.МесяцНачисления);

		Для каждого стрТЧ из Сотрудники Цикл 
			
			стрТЧ.Дни		= День(КонецМесяца(Объект.МесяцНачисления)); 
			стрТЧ.ДниФакт   = стрТЧ.Дни 
			                - стрТабель.НеРабочиеДни 
							- КорректировкаВремени.Дни;
			
			стрТЧ.Часы      = День(КонецМесяца(Объект.МесяцНачисления)) * 8;
			стрТЧ.ЧасыФакт  = стрТЧ.Часы 
			                - стрТабель.НеРабочиеЧасы
							- КорректировкаВремени.Часы;
				
			стрТЧ.НормаДни        = РабочихДнейЧасов.Дней;
			стрТЧ.НормаДниФакт    = стрТабель.ВДнях;
			стрТЧ.НормаЧасыФакт   = стрТабель.ВЧасах;                   
			стрТЧ.НормаЧасы       = РабочихДнейЧасов.Часов;                   
				
		КонецЦикла;
		
	КонецЦикла; 
	
	ПересчитатьСотрудниковНаСервере(Сотрудник);
	           	
КонецПроцедуры                                                      

&НаСервере
Функция ПолучитьКорректировкуВремениПоСотруднику(ТабельСтрока,МесяцНачисления)
	
	КорректировкаВремени = Новый Структура;
	КорректировкаВремени.Вставить("Дни",0);
	КорректировкаВремени.Вставить("Часы",0);
	
	КорректировочныеДни = 0;
	Если НачалоМесяца(ТабельСтрока.ДатаПриемаНаРаботу) = НачалоМесяца(МесяцНачисления) Тогда
		КорректировкаВремени.Дни = День(ТабельСтрока.ДатаПриемаНаРаботу) - 1;		
		КорректировкаВремени.Часы = КорректировкаВремени.Дни * 8;		
	КонецЕсли;
	Если НачалоМесяца(ТабельСтрока.ДатаУвольнения) = НачалоМесяца(МесяцНачисления) Тогда
		КорректировкаВремени.Дни = День(КонецМесяца(МесяцНачисления)) 
		                         - День(ТабельСтрока.ДатаУвольнения);		
		КорректировкаВремени.Часы = КорректировкаВремени.Дни * 8;		
	КонецЕсли;
	
	КорректировкаВремени.Дни = КорректировкаВремени.Дни * ТабельСтрока.ИндивидуальныйКоэффициент;		
	КорректировкаВремени.Часы = КорректировкаВремени.Часы * ТабельСтрока.ИндивидуальныйКоэффициент;		

	Возврат КорректировкаВремени;
	
КонецФункции

&НаКлиенте
Процедура ТабельВставитьДанныеОдному(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабельВставитьДанныеВсемНаСервере(ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабельВставитьДанныеВсем(Команда)
	ТабельВставитьДанныеВсемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаДниЧасыПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокВедомости();
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСписком(Команда)
	
	ВопросЗаполнитьСпискомТЧСотрудники();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСпискомТЧВедомостьЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
	
		ИмяПоля = ДопПараметры.ИмяПоля;     
		ЗначениеПоля = ДопПараметры.ЗначениеПоля;
		
		КолВо = Объект.Ведомость.Количество()-1;
		СчЦикла = 0;
		Для СчЦикла = 0 По КолВо Цикл
			Объект.Ведомость[СчЦикла][ИмяПоля] = ЗначениеПоля;
		КонецЦикла;
		
		ПересчитатьСотрудниковНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьСпискомТЧСотрудники()
	
	ИмяПоляВедомость 		= Элементы.Ведомость.ТекущийЭлемент.Имя;
	
	Если (ИмяПоляВедомость = "ВедомостьОклад") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьДни") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьДниФакт") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьЧасы") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьЧасыФакт") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьНормаДниФакт") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьНормаДни") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьНормаЧасы") ИЛИ
		 (ИмяПоляВедомость = "ВедомостьНормаЧасыФакт") 
	Тогда
	
		ИмяПоля = СтрЗаменить(ИмяПоляВедомость,"Ведомость","");
		ЗначениеПоля = Элементы.Ведомость.ТекущиеДанные[ИмяПоля];

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяПоля",ИмяПоля);
		ДопПараметры.Вставить("ЗначениеПоля",ЗначениеПоля);
		
		ТекстВопроса = НСтр("ru = 'Ввести списком значение "+ЗначениеПоля+" для этого поля?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьСпискомТЧВедомостьЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ИмяПоляВедомость = "ВедомостьПрочиеНачисления" Тогда 	
		
		Оповещение = Новый ОписаниеОповещения("ВводСпискомНачисленийЗавершение", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилищеДляВводаНачисленийУдержаний());
		
		ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаВводСпискомНачислений", 
			ПараметрыОткрытия,
			ЭтотОбъект,
			ЭтотОбъект.УникальныйИдентификатор,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
	ИначеЕсли ИмяПоляВедомость = "ВедомостьПрочиеУдержания" Тогда 	
		
		Оповещение = Новый ОписаниеОповещения("ВводСпискомУдержанийЗавершение", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилищеДляВводаНачисленийУдержаний());
		
		ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаВводСпискомУдержаний", 
			ПараметрыОткрытия,
			ЭтотОбъект,
			ЭтотОбъект.УникальныйИдентификатор,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСпискомУдержанийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьВводСпискомУдержанийНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьВводСпискомУдержанийНаСервере(РезультатРедактирования)
	
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ПрочиеУдержанияСписком	= ПараметрыРасчета.мПрочиеУдержанияТаблица;
	
	Если ЗначениеЗаполнено(ПрочиеУдержанияСписком) Тогда
		
		Для каждого ПрочиеУдержанияСпискомСтрока Из ПрочиеУдержанияСписком Цикл
			
			Если ПрочиеУдержанияСпискомСтрока.СуммаУдержания = 0 Тогда
				Продолжить;	
			КонецЕсли;

			ПрочиеУдержанияСтрока = Объект.ПрочиеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочиеУдержанияСтрока,ПрочиеУдержанияСпискомСтрока);
						
		КонецЦикла; 
		
		ПересчитатьСотрудниковНаСервере();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСпискомНачисленийЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьВводСпискомНачисленийНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьВводСпискомНачисленийНаСервере(РезультатРедактирования)
	
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	ПрочиеНачисленияСписком	= ПараметрыРасчета.мПрочиеНачисленияТаблица;
	
	Если ЗначениеЗаполнено(ПрочиеНачисленияСписком) Тогда
		
		Для каждого ПрочиеНачисленияСпискомСтрока Из ПрочиеНачисленияСписком Цикл
			
			Если ПрочиеНачисленияСпискомСтрока.СуммаНачисления = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			ПрочиеНачисленияСтрока = Объект.ПрочиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочиеНачисленияСтрока,ПрочиеНачисленияСпискомСтрока);
			
			Если ПрочиеНачисленияСпискомСтрока.Начисление.ВПроцентах Тогда
				ПрочиеНачисленияСтрока.ВПроцентах = Истина;
				ПрочиеНачисленияСтрока.ПроцентОтБазы = ПрочиеНачисленияСпискомСтрока.СуммаНачисления;
				ПрочиеНачисленияСтрока.СуммаНачисления = 0;
			КонецЕсли;
			
		КонецЦикла; 
		
		ПересчитатьСотрудниковНаСервере();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресПараметровВХранилищеДляВводаНачисленийУдержаний()
	
	Сотрудники = Новый Массив;
	Для каждого ВедомостьСтрока Из Объект.Ведомость Цикл
		Сотрудники.Добавить(ВедомостьСтрока.Сотрудник);	
	КонецЦикла; 
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Сотрудники",Сотрудники);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВедомостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Заголовок	= "Сотрудник" Тогда
		
		ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 

		СтандартнаяОбработка = Ложь;
		ОткрытьФормуАнкетныхДанныхНаКлиенте(ТекущиеДанные.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элемент, ВыбранноеЗначение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьНачисленийУдержаний(Команда)
	
	ПересчитатьСотрудниковНаСервере();
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияФормы(); 
	ПолноеИмяФормыСтрока = "Обработка.инкВедомостьНачисленийУдержаний.Форма.ФормаВедомости";                   
	
 	ОткрытьФорму(ПолноеИмяФормыСтрока, 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры
	
&НаСервере
Функция ПолучитьПараметрыОткрытияФормы()
	
	ДанныеСтруктура = инкВедомостиСервер.ПолучитьСтруктуруДляВедомостиНачисленийУдержаний(Объект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", инкОбщийСервер.АдресПараметровВХранилище(ДанныеСтруктура,УникальныйИдентификатор));
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция АдресПараметровВХранилищеДляУдалениеВидов()
	
	НачисленияСоответствие = Новый Соответствие;
	Для каждого НачисленияСтрока Из Объект.ПрочиеНачисления Цикл
		НачисленияСоответствие.Вставить(НачисленияСтрока.Начисление,НачисленияСтрока.Начисление.Код);		
	КонецЦикла; 
	УдержанияСоответствие = Новый Соответствие;
	Для каждого УдержаниеСтрока Из Объект.ПрочиеУдержания Цикл
		УдержанияСоответствие.Вставить(УдержаниеСтрока.Удержание,УдержаниеСтрока.Удержание.Код);		
	КонецЦикла; 
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НачисленияСоответствие",НачисленияСоответствие);
	ПараметрыРасчета.Вставить("УдержанияСоответствие",УдержанияСоответствие);
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УдалениеВидов(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", АдресПараметровВХранилищеДляУдалениеВидов());

	Оповещение = Новый ОписаниеОповещения("УдалениеВидовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаУдалениеВидов", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УдалениеВидовЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		УдалениеВидовНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УдалениеВидовНаСервере(РезультатРедактирования)
	
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	
	ТабличнаяЧастьОбъекта = Объект.ПрочиеНачисления;
	ПоискСтрока = "Начисление";
	Если ПараметрыРасчета.ВыборНачисленийУдержаний = "Удержания" Тогда
		ТабличнаяЧастьОбъекта = Объект.ПрочиеУдержания;	
		ПоискСтрока = "Удержание";
	КонецЕсли; 
	
	ПоискНачисленийУдержаний = Новый Структура;
	ПоискНачисленийУдержаний.Вставить(ПоискСтрока);

	Для каждого НачисленияУдержанияСтрока Из ПараметрыРасчета.НачисленияУдержанияКУдалению Цикл
		
		ПоискНачисленийУдержаний[ПоискСтрока] = НачисленияУдержанияСтрока.НачислениеУдержание;
		ТабличнаяЧастьМассив = ТабличнаяЧастьОбъекта.НайтиСтроки(ПоискНачисленийУдержаний);			
		
		Для каждого ТабличнаяЧастьЭлемент Из ТабличнаяЧастьМассив Цикл
			ТабличнаяЧастьОбъекта.Удалить(ТабличнаяЧастьЭлемент);
		КонецЦикла; 
		
	КонецЦикла; 
	
	ПересчитатьСотрудниковНаСервере();	

КонецПроцедуры
 
&НаКлиенте
Процедура ПрочиеНачисления(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Оповещение = Новый ОписаниеОповещения("РедактированиеНачисленийЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ДанныеСотрудника = ПолучитьДанныеСотрудника(Элементы.Ведомость.ТекущиеДанные);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ОбъектРасчетаЗарплатыИСотрудникВХранилище(ДанныеСотрудника));
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаПрочиеНачисления", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор
		,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСпециальныеНачисленияНаСервере(РезультатРедактирования);

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	тзПрочиеНачисления	= ПараметрыРасчета.тзПрочиеНачисления;
	
	Для каждого стртзПрочиеНачисления из тзПрочиеНачисления Цикл

		Если стртзПрочиеНачисления.РазмерНачисления = 0 ИЛИ  
			 НЕ ЗначениеЗаполнено(стртзПрочиеНачисления.Начисление)	
		Тогда
			Продолжить;
		КонецЕсли; 
		
		стрПрочиеНачисления = Объект.ПрочиеНачисления.Добавить(); 
		ЗаполнитьЗначенияСвойств(стрПрочиеНачисления,стртзПрочиеНачисления);
		стрПрочиеНачисления.СуммаНачисления = стртзПрочиеНачисления.РазмерНачисления;
		
	КонецЦикла;
	
	ПересчитатьСотрудниковНаСервере();
			
КонецПроцедуры	

&НаКлиенте
Процедура СпециальныеНачисленияЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования)Тогда
		
		ЗагрузитьСпециальныеНачисленияНаСервере(РезультатРедактирования);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СпециальныеНачисления(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СпециальныеНачисленияЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ОбъектРасчетаЗарплатыВХранилище());
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаСпециальныеНачисления", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	      	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоВыборуСотрудниковДляПостоянныхНачисленийУдержаний(ВидНачисленияУдержания)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НачисленияУдержания",ВидНачисленияУдержания);
	
	Оповещение = Новый ОписаниеОповещения("ПостоянныеНачисленияУдержанияЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", ВыборСпискаСотрудниковВХранилище("Выполнить постоянные "+НРег(ВидНачисленияУдержания)+" по выбранным сотрудникам?"));
	
	ОткрытьФорму("ОбщаяФорма.инкВыборСотрудниковСписком", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеНачисленияУдержанияЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ЗагрузитьПрочиеНачисленияУдержанияНаСервере(РезультатРедактирования,ДополнительныеПараметры.НачисленияУдержания);
		
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьПрочиеНачисленияУдержанияНаСервере(РезультатРедактирования,ВидНачисленийУдержаний);

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(РезультатРедактирования);
	
	Если ВидНачисленийУдержаний = "Начисления" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	инкПостоянныеНачисления.Сотрудник КАК Сотрудник,
			|	инкПостоянныеНачисления.Начисление КАК Начисление,
			|	инкПостоянныеНачисления.Начисление.ВПроцентах КАК ВПроцентах,
			|	инкПостоянныеНачисления.Размер КАК СуммаНачисления
			|ИЗ
			|	РегистрСведений.инкПостоянныеНачисления КАК инкПостоянныеНачисления
			|ГДЕ
			|	инкПостоянныеНачисления.Сотрудник В(&Сотрудники)";
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	инкПостоянныеУдержания.Сотрудник КАК Сотрудник,
			|	инкПостоянныеУдержания.Удержание КАК Удержание,
			|	инкПостоянныеУдержания.Удержание.ВПроцентах КАК ВПроцентах,
			|	инкПостоянныеУдержания.Размер КАК СуммаУдержания
			|ИЗ
			|	РегистрСведений.инкПостоянныеУдержания КАК инкПостоянныеУдержания
			|ГДЕ
			|	инкПостоянныеУдержания.Сотрудник В(&Сотрудники)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", ПараметрыРасчета.Сотрудники);
	
	НачисленияУдержанияТаблица = Запрос.Выполнить().Выгрузить();
	Для каждого ТаблицаСтрока Из НачисленияУдержанияТаблица Цикл
		
		Если ВидНачисленийУдержаний = "Начисления" Тогда
			ПрочееНачисление = Объект.ПрочиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочееНачисление,ТаблицаСтрока);
			
			Если ТаблицаСтрока.ВПроцентах Тогда           
				ПрочееНачисление.СуммаНачисления = 0;
				ПрочееНачисление.ПроцентОтБазы = ТаблицаСтрока.СуммаНачисления;	
			КонецЕсли;
			
		Иначе	
			ПрочееУдержание = Объект.ПрочиеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочееУдержание,ТаблицаСтрока);    
			
			Если ТаблицаСтрока.ВПроцентах Тогда           
				ПрочееУдержание.СуммаУдержания = 0;
				ПрочееУдержание.ПроцентОтБазы = ТаблицаСтрока.СуммаУдержания;	
			КонецЕсли;
			
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры	

&НаКлиенте
Процедура ВедомостьНаВыплатуЗарплаты(Команда)
	
	ТекстВопроса = 	"Внимание! Перед формированием ведомости необходимо провести документ. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("ВопросПередФормированиемВедомостиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросПередФормированиемВедомостиЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьИПровестиДокументНаСервере();		
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДокументОснование", Объект.Ссылка);
		
		ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаВыборВедомостиНаВыплатуЗарплаты", 
			ПараметрыОткрытия,
			ЭтотОбъект,
			ЭтотОбъект.УникальныйИдентификатор,
			,
			,
			,
			РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаписатьИПровестиДокументНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
КонецПроцедуры 

&НаКлиенте
Процедура ПостоянныеНачисленияУдержанияВвод(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Сотрудник = ТекущиеДанные.Сотрудник;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПараметровВХранилище", СотрудникВХранилище(Сотрудник));
	
	ОткрытьФорму("Документ.инкНачислениеЗарплаты.Форма.ФормаПостоянныеНачисленияУдержания", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеНачисления(Команда)                               
	
	ОткрытьФормуПоВыборуСотрудниковДляПостоянныхНачисленийУдержаний("Начисления");

КонецПроцедуры

&НаКлиенте
Процедура ПостоянныеУдержания(Команда)                                
	
	ОткрытьФормуПоВыборуСотрудниковДляПостоянныхНачисленийУдержаний("Удержания");

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплаты(Команда)
	
	ТекстВопроса = НСтр("ru = 'Выплатить зарплату?'");
	Оповещение = Новый ОписаниеОповещения("ВыплатаЗарплатыЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыплатаЗарплатыНаСервере();		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыплатаЗарплатыНаСервере()                                          

	Для каждого ТаблицаСтрока Из Объект.Ведомость Цикл
		
		Если ТаблицаСтрока.СальдоВходящее <> 0 Тогда
			
			ПрочееУдержание = Объект.ПрочиеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочееУдержание,ТаблицаСтрока);
			ПрочееУдержание.Удержание = ПланыВидовРасчета.инкУдержания.ЗарплатаПредыдущегоМесяца;
			ПрочееУдержание.СуммаУдержания = ТаблицаСтрока.СальдоВходящее;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ПересчитатьСотрудниковНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОплатаАванса(Команда)
	
	ТекстВопроса = НСтр("ru = 'Удержать аванс?'");
	Оповещение = Новый ОписаниеОповещения("ОплатаАвансаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаАвансаЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ДопПараметры = Новый Структура("ОплатаАванса",Истина);
		ПересчитатьСотрудниковНаСервере(,,,ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация",Объект.Организация);
	ПараметрыОткрытия.Вставить("ВсеПредприятие",Истина);
	
	Оповещение = Новый ОписаниеОповещения("мПодразделениеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.инкПодразделения.ФормаВыбора", 
		ПараметрыОткрытия,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура мПодразделениеНачалоВыбораЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатРедактирования) = Тип("Структура") Тогда
		
		ИзменениеПараметров = Ложь;
		Если РезультатРедактирования.ВсеПредприятие Тогда
			мПодразделение = "Все предприятие";
			Объект.Подразделение = Неопределено;
			ИзменениеПараметров = Истина;
		Иначе   
			Если ЗначениеЗаполнено(РезультатРедактирования.Подразделение) Тогда
				мПодразделение = Строка(РезультатРедактирования.Подразделение);
				Объект.Подразделение = РезультатРедактирования.Подразделение;
				ИзменениеПараметров = Истина;
			КонецЕсли;
		КонецЕсли;                           
		
		Если ИзменениеПараметров Тогда
			ИзменениеКлючевыхРеквизитовРасчетаЗарплаты(Элементы.Подразделение, Объект.Подразделение);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

#Область о // Больничный лист:

&НаКлиенте
Процедура БольничныйЛист(Команда)
	
	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;     
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные.Подразделение);
	ПараметрыФормы.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыФормы.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);
	ПараметрыФормы.Вставить("Проведен", Истина);    

	ОткрытьФормуБольничногоЛистаНаКлиенте(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуБольничногоЛистаНаКлиенте(ПараметрыФормы)

	БольничныеЛисты = ПолучитьПереченьБольничныхЛистовНаСервере(ПараметрыФормы);
	
	Если БольничныеЛисты.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыборБольничногоЛистаЗавершение",ЭтотОбъект,ПараметрыФормы);
		
		ПараметрыОтбора = Новый Структура("Отбор", ПараметрыФормы);
		
		ОткрытьФорму("Документ.инкБольничныйЛистРасчет.ФормаВыбора",
					 ПараметрыОтбора,
					 ЭтотОбъект,
					 ЭтотОбъект.УникальныйИдентификатор,
					 ,
					 ,
					 Оповещение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе

		ОткрытьФормуДокументаБольничногоЛиста(ПараметрыФормы);		
		
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьПереченьБольничныхЛистовНаСервере(ПараметрыФормы)
	
	Возврат Документы.инкБольничныйЛистРасчет.ПолучитьПереченьБольничныхЛистов(ПараметрыФормы);	
	
КонецФункции

&НаКлиенте
Процедура ВыборБольничногоЛистаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ДополнительныеПараметры.Вставить("Ключ",РезультатРедактирования);
		ОткрытьФормуДокументаБольничногоЛиста(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуДокументаБольничногоЛиста(ПараметрыФормы)
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеБольничногоЛистаЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Документ.инкБольничныйЛистРасчет.Форма.ФормаДокумента", 
		ПараметрыФормы,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеБольничногоЛистаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования,ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область о // Отпуск:

&НаКлиенте
Процедура ОтпускРасчетПоСреднему(Команда)

	ТекущиеДанные = Элементы.Ведомость.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;                     
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", ТекущиеДанные.Подразделение);
	ПараметрыФормы.Вставить("МесяцНачисления", Объект.МесяцНачисления);
	ПараметрыФормы.Вставить("Сотрудник", ТекущиеДанные.Сотрудник);    
	ПараметрыФормы.Вставить("ВидРасчетаДниЧасы", Объект.ВидРасчетаДниЧасы);    
	ПараметрыФормы.Вставить("Проведен", Истина);    
		                                                                                     
	ОткрытьФормуОтпускаНаКлиенте(ПараметрыФормы);

КонецПроцедуры   

&НаКлиенте
Процедура ОткрытьФормуОтпускаНаКлиенте(ПараметрыФормы)

	ПереченьОтпусков = ПолучитьПереченьОтпусковНаСервере(ПараметрыФормы);
	
	Если ПереченьОтпусков.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВыборОтпускаЗавершение",ЭтотОбъект,ПараметрыФормы);
		
		ПараметрыОтбора = Новый Структура("Отбор", ПараметрыФормы);
		
		ОткрытьФорму("Документ.инкОтпускРасчетПоСреднему.ФормаВыбора",
					 ПараметрыОтбора,
					 ЭтотОбъект,
					 ЭтотОбъект.УникальныйИдентификатор,
					 ,
					 ,
					 Оповещение,
					 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе

		ОткрытьФормуДокументаОтпуск(ПараметрыФормы);		
		
	КонецЕсли;
	
КонецПроцедуры    

&НаКлиенте
Процедура ВыборОтпускаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ДополнительныеПараметры.Вставить("Ключ",РезультатРедактирования);
		ОткрытьФормуДокументаОтпуск(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьПереченьОтпусковНаСервере(ПараметрыФормы);
	
	Возврат Документы.инкОтпускРасчетПоСреднему.ПолучитьПереченьОтпусков(ПараметрыФормы);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДокументаОтпуск(ПараметрыФормы)
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеОтпускаЗавершение",ЭтотОбъект);
	
	ОткрытьФорму("Документ.инкОтпускРасчетПоСреднему.Форма.ФормаДокумента", 
		ПараметрыФормы,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры  
	
&НаКлиенте
Процедура РедактированиеОтпускаЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ЗагрузитьПрочиеНачисленияНаСервере(РезультатРедактирования,ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область о // Норма времени из справочника:

&НаКлиенте
Процедура НормаВремениИзСправочника(Команда)

	ТекстВопроса = НСтр("ru = 'Заполнить норму времени?'");
	Оповещение = Новый ОписаниеОповещения("ВопросНормаВремениИзСправочникаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросНормаВремениИзСправочникаЗавершение(Знач Результат, Знач ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НормаВремениИзСправочникаНаСервере();		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НормаВремениИзСправочникаНаСервере()
	
	НаборЗаписейНормаВремени = РегистрыСведений.инкНормаВремени.СоздатьНаборЗаписей();
	НаборЗаписейНормаВремени.Отбор.Месяц.Установить(НачалоМесяца(Объект.МесяцНачисления));
	НаборЗаписейНормаВремени.Прочитать();

	Для каждого ЗаписьНорма Из НаборЗаписейНормаВремени Цикл
		
		Для каждого ВедомсотьСтрока Из Объект.Ведомость Цикл
			
			Если Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
				
				ВедомсотьСтрока.Дни = ЗаписьНорма.КалендраныхДней;
				ВедомсотьСтрока.НормаДни = ЗаписьНорма.РабочихДнейВМесяце;	
				
			Иначе   
				
				Часы			= ЗаписьНорма.НормаЧасовМужчиныПятидневка;
				НормаЧасы       = ЗаписьНорма.НормаЧасовМужчиныПятидневка;
				Если ВедомсотьСтрока.Сотрудник.Пол = Перечисления.инкПол.Женский Тогда
					Часы			= ЗаписьНорма.НормаЧасовЖенщиныПятидневка;	
					НормаЧасы       = ЗаписьНорма.НормаЧасовЖенщиныПятидневка;
				КонецЕсли;
				
				Если мКалендарныеДни Тогда
					ВедомсотьСтрока.Часы = Часы;			
					ВедомсотьСтрока.НормаЧасы = НормаЧасы;
				КонецЕсли;	
					
			КонецЕсли;

		КонецЦикла;	
		
	КонецЦикла;
	
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Проверка актуальности данных:

&НаКлиенте
Процедура ПроверкаАктуальностиДанных(ЭтотОбъект);

	ТаблицаОшибокДляПользователя = ПолучитьТаблицуОшибокНаСервере(Объект.Ссылка);
	ВыводОшибокДляПользователя(ТаблицаОшибокДляПользователя);

КонецПроцедуры                                                                   

&НаКлиенте
Процедура ВыводОшибокДляПользователя(ТаблицаОшибокДляПользователя)

	Если ТаблицаОшибокДляПользователя = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого ТаблицаОшибокСтрока Из ТаблицаОшибокДляПользователя Цикл
		
		Оповещение = Новый ОписаниеОповещения("ВыводОшибокДляПользователяЗавершение", ЭтотОбъект, ТаблицаОшибокСтрока);
		ПоказатьВопрос(Оповещение, ТаблицаОшибокСтрока.ТекстОшибки, РежимДиалогаВопрос.ДаНет);

	КонецЦикла;
	
КонецПроцедуры                                                                     

&НаКлиенте
Процедура ВыводОшибокДляПользователяЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования = КодВозвратаДиалога.Да Тогда
		
		НайтиНачисление = Новый Структура;
		НайтиНачисление.Вставить("ДокументСсылка",ДополнительныеПараметры.Документ);
		МассивНачислений = Объект.ПрочиеНачисления.НайтиСтроки(НайтиНачисление);
		
		Для каждого НачислениеСтрока Из МассивНачислений Цикл
			Если ДополнительныеПараметры.Действие = "Удалить" Тогда
				Объект.ПрочиеНачисления.Удалить(НачислениеСтрока);
			ИначеЕсли ДополнительныеПараметры.Действие = "Обновить" Тогда	
				НачислениеСтрока.СуммаНачисления = ДополнительныеПараметры.СуммаДокумента; 	
			КонецЕсли;			
		КонецЦикла;
		
		ПересчитатьСотрудниковНаСервере(ДополнительныеПараметры.Сотрудник);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьТаблицуОшибокНаСервере(ОбъектСсылка)
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ОшибкиТаблица = ПолучитьСтруктуруОшибкиТаблица(); 

	ИсходныеДанные = ПолучитьИсходныеДанныеДляПроверкиАктуальности(ОбъектСсылка);			

	Для каждого НачислениеСтрока Из ОбъектСсылка.ПрочиеНачисления Цикл
		
		Если ЗначениеЗаполнено(НачислениеСтрока.ДокументСсылка) Тогда
			
			НайденаОшибка = Ложь;
			ДействиеСДокументом = "";
			Если НачислениеСтрока.ДокументСсылка.ПометкаУдаления Тогда
				ДействиеСДокументом = " помечен на удаление.";	
			ИначеЕсли НЕ НачислениеСтрока.ДокументСсылка.Проведен Тогда
				ДействиеСДокументом = " не проведен.";	
			КонецЕсли;              
			
			Если ДействиеСДокументом <> "" Тогда
				ОшибкаСтрока = ОшибкиТаблица.Добавить();
				ОшибкаСтрока.Документ = НачислениеСтрока.ДокументСсылка;
				ОшибкаСтрока.ТекстОшибки = "Внимание! Документ "
				                         + НачислениеСтрока.ДокументСсылка
										 + " на сотрудника "
										 + НачислениеСтрока.Сотрудник
										 + ДействиеСДокументом
										 + " Удалить запись по этому начислению на сумму: "
										 + НачислениеСтрока.СуммаНачисления
										 + "?";   
				ОшибкаСтрока.Действие = "Удалить";						 
				ОшибкаСтрока.Сотрудник = НачислениеСтрока.Сотрудник; 
				НайденаОшибка = Истина;
			КонецЕсли;

			НайтиОшибкуВДокументе(ИсходныеДанные,ИсходныеДанные.БольничныеЛистыТаблица,НачислениеСтрока,НайденаОшибка,ОшибкиТаблица);
			НайтиОшибкуВДокументе(ИсходныеДанные,ИсходныеДанные.ОтпускаТаблица,НачислениеСтрока,НайденаОшибка,ОшибкиТаблица);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОшибкиМассив = ОбщегоНазначения.ТаблицаЗначенийВМассив(ОшибкиТаблица);
	
	Возврат ОшибкиМассив;
	
КонецФункции     

&НаСервереБезКонтекста
Процедура НайтиОшибкуВДокументе(ИсходныеДанные,ДокументыТаблица,НачислениеСтрока,НайденаОшибка,ОшибкиТаблица)

	Если НайденаОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ПоискДокумента = Новый Структура;
	ПоискДокумента.Вставить("ДокументСсылка",НачислениеСтрока.ДокументСсылка);
	
	ДокументыМассив = ДокументыТаблица.НайтиСтроки(ПоискДокумента);
	Для каждого ДокументЭлемент Из ДокументыМассив Цикл
		
		Если ДокументЭлемент.Сумма <> НачислениеСтрока.СуммаНачисления Тогда
			
			ОшибкаСтрока = ОшибкиТаблица.Добавить();
			ОшибкаСтрока.Документ = НачислениеСтрока.ДокументСсылка;
			ОшибкаСтрока.ТекстОшибки = "Внимание! В документе "
			                         + НачислениеСтрока.ДокументСсылка
									 + " на сотрудника "
									 + НачислениеСтрока.Сотрудник
									 + " сумма: "
									 + ДокументЭлемент.Сумма 
									 + " отличается от суммы начисления: "
									 + НачислениеСтрока.СуммаНачисления
									 + ". Обновить сумму начисления?";   
			ОшибкаСтрока.Действие = "Обновить";
			ОшибкаСтрока.Сотрудник = НачислениеСтрока.Сотрудник; 
			ОшибкаСтрока.СуммаДокумента = ДокументЭлемент.Сумма; 
			
			НайденаОшибка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсходныеДанныеДляПроверкиАктуальности(ОбъектСсылка)
	
	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("БольничныеЛистыТаблица",ПолучитьРеестрБольничныЛистов(ОбъектСсылка));
	ИсходныеДанные.Вставить("ОтпускаТаблица",ПолучитьРеестрОтпусков(ОбъектСсылка));
	
	Возврат ИсходныеДанные;
	
КонецФункции                                                       

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОшибкиТаблица()
	
	ДокументыТипыМассив = Новый Массив;
    ДокументыТипыМассив.Добавить(Тип("ДокументСсылка.инкБольничныйЛистРасчет"));
    ДокументыТипыМассив.Добавить(Тип("ДокументСсылка.инкОтпускРасчетПоСреднему"));
	
	ОшибкиТаблица = Новый ТаблицаЗначений;
	ОшибкиТаблица.Колонки.Добавить("Документ",Новый ОписаниеТипов(ДокументыТипыМассив));
	ОшибкиТаблица.Колонки.Добавить("ТекстОшибки",Новый ОписаниеТипов("Строка"));
	ОшибкиТаблица.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка"));
	ОшибкиТаблица.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.инкСотрудники"));
	ОшибкиТаблица.Колонки.Добавить("СуммаДокумента",Новый ОписаниеТипов("Число"));
	                     
	Возврат ОшибкиТаблица;		
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеестрБольничныЛистов(ЭтотОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкРеестрБольничныхЛистов.БольничныйЛист КАК ДокументСсылка,
		|	инкРеестрБольничныхЛистов.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.инкРеестрБольничныхЛистов КАК инкРеестрБольничныхЛистов
		|ГДЕ
		|	инкРеестрБольничныхЛистов.БольничныйЛист В (&ДокументыМассив)";
	
	ДокументыМассив = ЭтотОбъект.ПрочиеНачисления.ВыгрузитьКолонку("ДокументСсылка");
	Запрос.Параметры.Вставить("ДокументыМассив",ДокументыМассив);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;		
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеестрОтпусков(ЭтотОбъект)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкРеестрОтпусков.Отпуск КАК ДокументСсылка,
		|	инкРеестрОтпусков.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.инкРеестрОтпусков КАК инкРеестрОтпусков
		|ГДЕ
		|	инкРеестрОтпусков.Отпуск В (&ДокументыМассив)";
	
	ДокументыМассив = ЭтотОбъект.ПрочиеНачисления.ВыгрузитьКолонку("ДокументСсылка");
	Запрос.Параметры.Вставить("ДокументыМассив",ДокументыМассив);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;		

КонецФункции
  
#КонецОбласти

#Область о // Стандартные подсистемы:

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) 
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область о // Отчеты:

&НаКлиенте
Процедура ВывестиРезультатРасчета(Сотрудники = Неопределено)
	
	ТабличныйДокумент = ПолучитьРезультатРасчетаСервер(Сотрудники);
	инкОтчетыКлиент.ПечатьТабличногоДокумента(ТабличныйДокумент,"Расчетные листки",ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРезультатРасчетаСервер(Сотрудники) 
	
	МенеджерПечати = Обработки.инкРасчетныеЛисты.Создать();
	Если Не ЗначениеЗаполнено(Сотрудники) Тогда
		
		Сотрудники = Новый Массив;
		Для каждого СотрудникСтрока из Объект.Ведомость Цикл
			Сотрудники.Добавить(СотрудникСтрока.Сотрудник);
		КонецЦикла;
		
		МенеджерПечати.Сотрудники = Сотрудники;
		
	Иначе
		
		МенеджерПечати.Сотрудники = Сотрудники;
		
	КонецЕсли;
	
	МенеджерПечати.ДокументОбъект = Объект;
	ТабличныйДокумент = МенеджерПечати.ПолучитьРезультатРасчета();

	Возврат ТабличныйДокумент; 
	
КонецФункции

&НаКлиенте
Процедура РасчетныеЛистки(Команда)
	
	ВывестиРезультатРасчета();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
