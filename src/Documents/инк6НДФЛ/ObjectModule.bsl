
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ПроверкаВозможностиЗаписи(Отказ);
	РасчетДопРеквизитов(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ЗаписатьДвижения_инк6НДФЛ(Отказ, РежимПроведения);
	
КонецПроцедуры                                        

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РасчетДопРеквизитов(Отказ = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;  
	
	ЭтотОбъект.СуммаНалогаБаза = ЭтотОбъект.СуммаДоходаПолученнаяФизическимиЛицами
	                           - ЭтотОбъект.СуммаВычеты;
							   
	ЭтотОбъект.СуммаНалогаИсчисленная = ЭтотОбъект.СуммаНалогаБаза * 0.13; 
	
	ЭтотОбъект.СуммаНалогаУдержанная = ЭтотОбъект.СуммаНалога;
						
КонецПроцедуры

Процедура ПроверкаВозможностиЗаписи(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инк6НДФЛ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.инк6НДФЛ КАК инк6НДФЛ
		|ГДЕ
		|	инк6НДФЛ.ПериодДата = &ПериодДата
		|	И инк6НДФЛ.ПериодРегламентногоОтчета = &ПериодРегламентногоОтчета
		|	И НЕ инк6НДФЛ.ПометкаУдаления
		|	И инк6НДФЛ.Ссылка <> &ТекущийДокументСсылка
		|	И инк6НДФЛ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ПериодДата", ЭтотОбъект.ПериодДата);
	Запрос.УстановитьПараметр("ПериодРегламентногоОтчета", ЭтотОбъект.ПериодРегламентногоОтчета);
	Запрос.УстановитьПараметр("ТекущийДокументСсылка", ЭтотОбъект.Ссылка);   
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);   
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Если РезультатЗапроса.Количество() > 0 Тогда
		
		Отказ = Истина;    
		ОбщегоНазначения.СообщитьПользователю("Найден такой же документ: "+РезультатЗапроса[0].Ссылка+" с таким же периодом отчета. Запись прервана.")
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтроковаяСуммаЦелое(СуммаЧисло,ДлинаСтроки = 6)

	СуммаСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(СуммаЧисло,"ЧДЦ=0; ЧН=0; ЧГ="), ДлинаСтроки, " ", "Слева");
	Возврат СуммаСтрока;

КонецФункции	

Функция СтроковаяСуммаОбщая(СуммаЧисло,ДлинаСтроки = 15)
	
	СуммаСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(СуммаЧисло,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="), ДлинаСтроки, " ", "Слева");
	Возврат СуммаСтрока;
	
КонецФункции

Процедура ЗаписатьДвижения_инк6НДФЛ(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	инк6НДФЛДвижения = ЭтотОбъект.Движения.инк6НДФЛ;
	инк6НДФЛДвижения.Записывать = Истина;

	Движение = инк6НДФЛДвижения.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,ЭтотОбъект);   
	Движение.Период = НачалоМесяца(ЭтотОбъект.ПериодДата);
	
КонецПроцедуры

#Область о // Заполнение начальными данными:

Процедура ЗаполнитьНачальнымиДанными() Экспорт
	
	ИсходныеДанные = ПолучитьИсходныеДанныеДляНачальногоЗаполнения();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныеДанные);  
	
КонецПроцедуры

Функция РассчитатьСуммаНалогаВозвращенного() Экспорт
	
	СуммаНалогаРасчет = 0; 
	
	Если ЭтотОбъект.ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ПервыйКвартал Тогда
		СуммаНалогаРасчет = ЭтотОбъект.ВозвратНалога.Итог("СуммаНалога");
	КонецЕсли;              
	
	Возврат СуммаНалогаРасчет;
	
КонецФункции

Функция ПолучитьСуммуНалогаПоМесяцу(НомерМесяца,ИсходныеДанные)
	
	СуммаНалогаЧисло = 0;
	
	МесяцПериода = НачалоМесяца(ДобавитьМесяц(ИсходныеДанные.Дата1,НомерМесяца-2));
	ПериодПоиск = Новый Структура("Период",МесяцПериода);
	НалогМассив = ИсходныеДанные.НДФЛТаблица.НайтиСтроки(ПериодПоиск);
	
	Для каждого НалогСтрока Из НалогМассив Цикл
		СуммаНалогаЧисло = СуммаНалогаЧисло + НалогСтрока.Сумма;
	КонецЦикла;
	
	Возврат СуммаНалогаЧисло;
	
КонецФункции

Функция ПолучитьСуммуДохода(ИсходныеДанные,КодДохода = Неопределено)
	
	СуммаРасчет = 0;             
	
	Если КодДохода <> Справочники.инкДоходНДФЛ.ПустаяСсылка() Тогда
		
		Если КодДохода = Неопределено Тогда
			
			СуммаРасчет = ИсходныеДанные.НачисленияСводТаблица.Итог("Сумма");
			
		Иначе
			
			ПоискНачисления = Новый Структура("КодДохода",КодДохода);
			НачисленияСводМассив = ИсходныеДанные.НачисленияСводТаблица.НайтиСтроки(ПоискНачисления);
			
			Для каждого НачислениеСтрока Из НачисленияСводМассив Цикл
				СуммаРасчет = СуммаРасчет + НачислениеСтрока.Сумма; 
			КонецЦикла;
		
		КонецЕсли;

	КонецЕсли;	
		
	Возврат СуммаРасчет;
	
КонецФункции 

Функция ПолучитьКоличествоЛицПолучившихДоход(ИсходныеДанные)
	
	КоличествоЛиц = 0;
	
	СотрудникиТаблица = ИсходныеДанные.НачисленияТаблица.Скопировать();
	СотрудникиТаблица.Свернуть("Сотрудник");
	
	КоличествоЛиц = СотрудникиТаблица.Количество();
	
	СуммаСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(КоличествоЛиц,"ЧДЦ=0; ЧН=0; ЧГ="), 6, " ", "Слева");

	Возврат СуммаСтрока;
	
КонецФункции             

Функция ПолучитьНачисленияСводТаблица(ИсходныеДанные)
	
	НачисленияСводТаблица = ИсходныеДанные.НачисленияТаблица.Скопировать();
	НачисленияСводТаблица.Свернуть("Начисление,КодДохода","Сумма");
	
	Возврат НачисленияСводТаблица;
	
КонецФункции   

Функция ПолучитьВычетыТаблица(ИсходныеДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВычетыНДФЛОбороты.Период КАК Период,
		|	инкВычетыНДФЛОбороты.СуммаВычетаОборот КАК СуммаВычета
		|ИЗ
		|	РегистрНакопления.инкВычетыНДФЛ.Обороты(&Дата1, &Дата2, Месяц, Организация = &Организация) КАК инкВычетыНДФЛОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ИсходныеДанные.Дата1));
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции 

Функция ПолучитьНачисленияТаблица(ИсходныеДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНачисленияОбороты.Период КАК Период,
		|	инкНачисленияОбороты.Сотрудник КАК Сотрудник,
		|	инкНачисленияОбороты.Начисление КАК Начисление,
		|	инкНачисленияОбороты.Начисление.ДоходНДФЛ КАК КодДохода,
		|	инкНачисленияОбороты.СуммаНачисленияОборот + инкНачисленияОбороты.РайонныйКоэффициентОборот + инкНачисленияОбороты.СевернаяНадбавкаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.инкНачисления.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			Месяц,
		|			Налог
		|				И Организация = &Организация) КАК инкНачисленияОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Сотрудник,
		|	Начисление";
	
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ИсходныеДанные.Дата1));
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция ПолучитьНДФЛТаблица(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНалогУдержанныйОбороты.Период КАК Период,
		|	инкНалогУдержанныйОбороты.СуммаНалогаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.инкНалогУдержанный.Обороты(&Дата1, &Дата2, Месяц, Организация = &Организация) КАК инкНалогУдержанныйОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	инкНалогУдержанныйОбороты.Период";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
		
КонецФункции

#КонецОбласти 

#Область о // Исходные данные:

Функция ПолучитьИсходныеДанные() 

	ИсходныеДанные = Новый Структура;
	
	ПериодОтчета = инкОбщийСервер.СтандартныйПериодПоГодуИПериодуРегламентногоОтчета(Год(ПериодДата), ПериодРегламентногоОтчета);
	ИсходныеДанные.Вставить("Дата1",ПериодОтчета.ДатаНачала);                
	ИсходныеДанные.Вставить("Дата2",ПериодОтчета.ДатаОкончания);                
	ИсходныеДанные.Вставить("Организация",Организация);
	
	ИсходныеДанные.Вставить("ИНН",Организация.ИНН);
	ИсходныеДанные.Вставить("КПП",Организация.КПП); 
	
    ИсходныеДанные.Вставить("Период",Формат(ПериодДата,"ДФ=MM"));
    ИсходныеДанные.Вставить("ОтчетГод",Формат(ПериодДата,"ДФ=yyyy"));
    ИсходныеДанные.Вставить("НалоговыйОрган",Организация.ИФНСКод);   
	
	ИсходныеДанные.Вставить("ОГРНИП");
	ИсходныеДанные.Вставить("ПоМесту","214");
	ИсходныеДанные.Вставить("ИндивидуальныйПредприниматель",(СтрДлина(Организация.ИНН) = 12));
	
	ИсходныеДанные.Вставить("КодБюджетнойКлассификации","18210102010011000110");
	
	Если ИсходныеДанные.ИндивидуальныйПредприниматель Тогда
		ИсходныеДанные.ОГРНИП = Организация.ОГРН;   
		ИсходныеДанные.ПоМесту = "120";	
	КонецЕсли;	
	
    ИсходныеДанные.Вставить("НаимОрг",Организация.Наименование);
	
	ТелОрганизации = Справочники.инкОрганизации.ПолучитьКонтактныйТелефонОрганизации(Организация);
    ИсходныеДанные.Вставить("ТелОрганизации",ТелОрганизации);
	
	ИсходныеДанные.Вставить("ПрПодп","1");
	
	ИсходныеДанные.Вставить("ОргПодписантФамилия",Организация.Руководитель.Фамилия);
	ИсходныеДанные.Вставить("ОргПодписантИмя",Организация.Руководитель.Имя);
	ИсходныеДанные.Вставить("ОргПодписантОтчество",Организация.Руководитель.Отчество);
	
	ИсходныеДанные.Вставить("ДатаПодписи",Формат(ТекущаяДата(),"ДФ=ddMMyyyy"));
	
	ИсходныеДанные.Вставить("ДатаДок",  Формат(Дата,"ДФ=dd.MM.yyyy"));
	ИсходныеДанные.Вставить("КодНО",    Организация.ИФНСКод);
	ИсходныеДанные.Вставить("НомКорр",  НомерКорректировки);
	
	ИсходныеДанные.Вставить("КодИФНСПосредника","");
	
	ИсходныеДанные.Вставить("Тлф", ТелОрганизации);
	
	ИсходныеДанные.Вставить("ФормРеорг", "");
	ИсходныеДанные.Вставить("ИННРеорг",  "");
	ИсходныеДанные.Вставить("КППРеорг",  "");
	
	ФИОИП = Новый Структура;
	ФИОИП.Вставить("Фамилия");
	ФИОИП.Вставить("Имя");
	ФИОИП.Вставить("Отчество");
	
	Если ИсходныеДанные.ИндивидуальныйПредприниматель Тогда
		ФИОИП.Фамилия	= Организация.Руководитель.Фамилия;
		ФИОИП.Имя		= Организация.Руководитель.Имя;
		ФИОИП.Отчество	= Организация.Руководитель.Отчество;
	КонецЕсли;
	
	ИсходныеДанные.Вставить("ФИОИП", ФИОИП);
	
	ИсходныеДанные.Вставить("ПрПодп","1");
	ИсходныеДанные.Вставить("НаимОргПред", "");
	ИсходныеДанные.Вставить("НаимДокПред", "");

	ФИОПодписанта = Новый Структура;
	ФИОПодписанта.Вставить("Фамилия",Организация.Руководитель.Фамилия);
	ФИОПодписанта.Вставить("Имя",Организация.Руководитель.Имя);
	ФИОПодписанта.Вставить("Отчество",Организация.Руководитель.Отчество);
	
	ИсходныеДанные.Вставить("ФИОПодписанта",ФИОПодписанта);
	
	ЗапросСтруктура = Новый Структура;
	ЗапросСтруктура.Вставить("Дата1",НачалоГода(ИсходныеДанные.Дата1));
	ЗапросСтруктура.Вставить("Дата2",ИсходныеДанные.Дата2);
	ЗапросСтруктура.Вставить("Организация",ИсходныеДанные.Организация);
	ИсходныеДанные.Вставить("НалоговыеУведомленияТаблица",РегистрыСведений.инкНалоговыеУведомления.ПолучитьНалоговыеУведомленияТаблица(ЗапросСтруктура));

	Возврат ИсходныеДанные;
	
КонецФункции 

Функция ПолучитьИсходныеДанныеДляНачальногоЗаполнения()

	ИсходныеДанные = ПолучитьИсходныеДанные();
	
	ИсходныеДанные.Вставить("НДФЛТаблица",ПолучитьНДФЛТаблица(ИсходныеДанные));
	
	ИсходныеДанные.Вставить("ВычетыТаблица",ПолучитьВычетыТаблица(ИсходныеДанные));
	
	ИсходныеДанные.Вставить("НачисленияТаблица",ПолучитьНачисленияТаблица(ИсходныеДанные));
	ИсходныеДанные.Вставить("НачисленияСводТаблица",ПолучитьНачисленияСводТаблица(ИсходныеДанные));

	ИсходныеДанные.Вставить("КоличествоЛицПолучившихДоход",ПолучитьКоличествоЛицПолучившихДоход(ИсходныеДанные));
	
	ИсходныеДанные.Вставить("СуммаДохода",ПолучитьСуммуДохода(ИсходныеДанные));
	ИсходныеДанные.Вставить("СуммаГПХ",ПолучитьСуммуДохода(ИсходныеДанные,Справочники.инкДоходНДФЛ.Код2010));
	ИсходныеДанные.Вставить("СуммаАренда",ПолучитьСуммуДохода(ИсходныеДанные,Справочники.инкДоходНДФЛ.НайтиПоКоду("1400")));
	
	СуммаФОТ = ИсходныеДанные.СуммаДохода
	         - ИсходныеДанные.СуммаАренда;
	ИсходныеДанные.Вставить("СуммаФОТ",СуммаФОТ);
	
	СуммаЗарплата = ИсходныеДанные.СуммаФОТ
	              - ИсходныеДанные.СуммаГПХ;
	ИсходныеДанные.Вставить("СуммаЗарплата",СуммаЗарплата);
	
	ИсходныеДанные.Вставить("Реквизит_111",ПолучитьСуммуДохода(ИсходныеДанные,Справочники.инкДоходНДФЛ.Код1010));
	ИсходныеДанные.Вставить("СуммаВычеты",ИсходныеДанные.ВычетыТаблица.Итог("СуммаВычета"));
	
	ИсходныеДанные.Вставить("Реквизит_021",ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,1));
	ИсходныеДанные.Вставить("Реквизит_022",ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,2));
	ИсходныеДанные.Вставить("Реквизит_023",ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,3));
	ИсходныеДанные.Вставить("Реквизит_024",ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,4));
	ИсходныеДанные.Вставить("Реквизит_025",ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,5));
	ИсходныеДанные.Вставить("Реквизит_026",ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,6));
	
	ИсходныеДанные.Вставить("Реквизит_161",ИсходныеДанные.Реквизит_021);
	ИсходныеДанные.Вставить("Реквизит_162",ИсходныеДанные.Реквизит_022);
	ИсходныеДанные.Вставить("Реквизит_163",ИсходныеДанные.Реквизит_023);
	ИсходныеДанные.Вставить("Реквизит_164",ИсходныеДанные.Реквизит_024);
	ИсходныеДанные.Вставить("Реквизит_165",ИсходныеДанные.Реквизит_025);
	ИсходныеДанные.Вставить("Реквизит_166",ИсходныеДанные.Реквизит_026);
	
	ИсходныеДанные.Вставить("СуммаДоходаПолученнаяФизическимиЛицами",ИсходныеДанные.НачисленияСводТаблица.Итог("Сумма"));
	
	ИсходныеДанные.Вставить("СуммаНалога",ПолучитьСуммуНалога(ИсходныеДанные));

	Возврат ИсходныеДанные;
	
КонецФункции       

Функция ПолучитьСуммуНалога(ИсходныеДанные)
	
	СуммаНалога = 0;
	Для каждого НалоговоеУведомление Из ИсходныеДанные.НалоговыеУведомленияТаблица Цикл
		
		Если НачалоМесяца(НалоговоеУведомление.Период) <= НачалоМесяца(ИсходныеДанные.Дата2) Тогда
			СуммаНалога = СуммаНалога
			            + НалоговоеУведомление.НалогСумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаНалога;
	
КонецФункции

Функция ПолучитьСуммыНалоговыхУведомлений(ИсходныеДанные,НомерСуммы)
	
	СуммаУведомления = 0;
	
	ПериодДата = ИсходныеДанные.Дата1;
	ПолеТаблицы = Неопределено;
	
	Если НомерСуммы = 1 Тогда
		ПолеТаблицы = "АвансНДФЛСумма";
	ИначеЕсли НомерСуммы = 2 Тогда
		ПолеТаблицы = "НДФЛСумма";		
	ИначеЕсли НомерСуммы = 3 Тогда     
		ПолеТаблицы = "АвансНДФЛСумма";
		ПериодДата = ДобавитьМесяц(ПериодДата,1);	
	ИначеЕсли НомерСуммы = 4 Тогда
		ПолеТаблицы = "НДФЛСумма";		
		ПериодДата = ДобавитьМесяц(ПериодДата,1);
	ИначеЕсли НомерСуммы = 5 Тогда
		ПолеТаблицы = "АвансНДФЛСумма";
		ПериодДата = ДобавитьМесяц(ПериодДата,2);
	ИначеЕсли НомерСуммы = 6 Тогда
		ПолеТаблицы = "НДФЛСумма";		
		ПериодДата = ДобавитьМесяц(ПериодДата,2);
	КонецЕсли;   
	
	Если ПолеТаблицы <> Неопределено Тогда
		
		ПоискСтруктура = Новый Структура;
		ПоискСтруктура.Вставить("Период",ПериодДата);
		НалоговыеУведомленияМассив = ИсходныеДанные.НалоговыеУведомленияТаблица.НайтиСтроки(ПоискСтруктура);
		Если НалоговыеУведомленияМассив.Количество() > 0 Тогда
			
			Если ПолеТаблицы = "АвансНДФЛСумма+НДФЛСумма" Тогда
				СуммаУведомления = НалоговыеУведомленияМассив[0]["АвансНДФЛСумма"]
				                 + НалоговыеУведомленияМассив[0]["НДФЛСумма"];
			Иначе	
				СуммаУведомления = НалоговыеУведомленияМассив[0][ПолеТаблицы];	
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаУведомления;
	
КонецФункции

#КонецОбласти

#Область о // Сформировать XML файл:

Функция СформироватьФайл() Экспорт
	
	ИсходныеДанные = ПолучитьИсходныеДанные();
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИсходныеДанные);

	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки,ПараметрыВыгрузки);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки,
											 ИсходныеДанные);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//       
	ФайлВыгрузкиСтруктура = Новый Структура;   
	ФайлВыгрузкиСтруктура.Вставить("ФайлАдрес",ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор));
	ФайлВыгрузкиСтруктура.Вставить("ФайлИмя",ПараметрыВыгрузки.ИдФайл+".xml");
	//
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ФайлВыгрузкиСтруктура;
	
КонецФункции  

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки,
							ПараметрыВыгрузки,
							КодировкаФайлаВыгрузки, 
							ИсходныеДанные)
	
	ПотокXML = СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки, ИсходныеДанные);
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции   

Функция СоздатьНовыйПотокXML(Кодировка = "utf-8") Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку(Кодировка);
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева,
								 ПотокXML,
								 ПараметрыВыгрузки,
								 ИсходныеДанные)
								 
	ДокументОбъект = ЭтотОбъект;							 
								 
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки, ИсходныеДанные);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
			
		ИначеЕсли СтрокаДерева.Код = "СведСумНалВоз" Тогда
			
			Для каждого ТаблицаСтрока Из ДокументОбъект.ВозвратНалога Цикл
				
				ПотокXML.ЗаписатьНачалоЭлемента("СведСумНалВоз");
				
				ПотокXML.ЗаписатьАтрибут("ДатаВозвр", Формат(ТаблицаСтрока.ДатаВозвратаНалога,"ДФ=dd.MM.yyyy"));
				ПотокXML.ЗаписатьАтрибут("СумНал",   Формат(ТаблицаСтрока.СуммаНалога,"ЧДЦ=2; ЧГ="));
				
				ПотокXML.ЗаписатьКонецЭлемента();// "СведСумНалВоз"
				
			КонецЦикла;
			
			ДеревоРаздела = Неопределено;
			
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки, ИсходныеДанные);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ДеревоВыгрузки,ПараметрыВыгрузки) Экспорт
	
	ОбработатьУсловныеЭлементы(ДеревоВыгрузки,ПараметрыВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры  

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если Стр.Код = "СведСумНалВоз" ИЛИ 
			 Стр.Код = "РасчСумНал"
		Тогда
			Продолжить;			
		КонецЕсли;
		
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел, ПараметрыВыгрузки) И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   

Функция ИмеютсяАналогичныеСоседниеУзлыКлюч(Стр) Экспорт 
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел) Экспорт 
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Функция УзелПуст(Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,Узел,НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

// Возвращает признак определения свойства.
//
Функция СвойствоОпределено(Объект, ИмяСвойства) Экспорт
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

// Если в дереве параметр и он не выполнен, то удаляется из дерева.
Процедура ОбработатьУсловныеЭлементы(Узел,ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ТекСтр,ПараметрыВыгрузки);
	КонецЦикла;
	
КонецПроцедуры    

Функция УсловиеВыполнено(ИсходныеДанные, Условие) Экспорт
	
	Попытка
		РезультатВычисленияВыражения = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
			СтрЗаменить(Условие, "&", "Параметры."), ИсходныеДанные);
		
		Если РезультатВычисленияВыражения <> Неопределено Тогда
			Если РезультатВычисленияВыражения = 1 ИЛИ РезультатВычисленияВыражения = 0
			 ИЛИ РезультатВычисленияВыражения = Истина ИЛИ РезультатВычисленияВыражения = Ложь Тогда
				Возврат НЕ (Булево(РезультатВычисленияВыражения) = Ложь);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИсходныеДанные) 
	
	ДокументОбъект = ЭтотОбъект;
	
	ПараметрыВыгрузки = Новый Структура;
	
	// Раздел 1:    
	ПараметрыВыгрузки.Вставить("П000010001001", ИсходныеДанные.КодБюджетнойКлассификации);
	ПараметрыВыгрузки.Вставить("П000010002001", ДокументОбъект.СуммаНалога);
	ПараметрыВыгрузки.Вставить("П000010003001", ДокументОбъект.ВозвратНалога.Итог("СуммаНалога"));
	//
	ПараметрыВыгрузки.Вставить("П000010002101", ДокументОбъект.Реквизит_161);
	ПараметрыВыгрузки.Вставить("П000010002201", ДокументОбъект.Реквизит_162);
	ПараметрыВыгрузки.Вставить("П000010002301", ДокументОбъект.Реквизит_163);
	ПараметрыВыгрузки.Вставить("П000010002401", ДокументОбъект.Реквизит_163);
    //
	
	// Раздел 2:
	//Ставка	
	ПараметрыВыгрузки.Вставить("П000020010001", "13"); 
	//КБК	
	ПараметрыВыгрузки.Вставить("П000020010501", ИсходныеДанные.КодБюджетнойКлассификации);	
	//СумНачислНач	
	ПараметрыВыгрузки.Вставить("П000020011003", ДокументОбъект.СуммаДохода);	
	//СумНачислДив	
	ПараметрыВыгрузки.Вставить("П000020011103", ДокументОбъект.Реквизит_111);	
	//СумНачислДог	
	ПараметрыВыгрузки.Вставить("П000020011203", ДокументОбъект.СуммаЗарплата);	
	//СумНачислРаб	
	ПараметрыВыгрузки.Вставить("П000020011303", ДокументОбъект.СуммаГПХ);	
	//СумНачислКвал	
	//ПараметрыВыгрузки.Вставить("П000020011503", );	
	//КолФЛ	
	ПараметрыВыгрузки.Вставить("П000020012003", ДокументОбъект.КоличествоЛицПолучившихДоход);	
	//КолКвал	
	//ПараметрыВыгрузки.Вставить("П000020012103", "0");	
	//СумВыч	
	ПараметрыВыгрузки.Вставить("П000020013003", ДокументОбъект.СуммаВычеты);	
	//СумНалИсч	
	ПараметрыВыгрузки.Вставить("П000020014003", ДокументОбъект.СуммаНалогаИсчисленная);	
	//СумНалИсчДив	
	ПараметрыВыгрузки.Вставить("П000020014103", ДокументОбъект.Реквизит_141);	
	//СумНалИсчКвал	
	//ПараметрыВыгрузки.Вставить("П000020014203", );	
	//СумФикс	
	ПараметрыВыгрузки.Вставить("П000020015003", ДокументОбъект.Реквизит_150);	
	//СумНалПриб	
	ПараметрыВыгрузки.Вставить("П000020015503", ДокументОбъект.Реквизит_155);	
	//СумНалУдерж	
	ПараметрыВыгрузки.Вставить("П000020016003", ДокументОбъект.СуммаНалогаУдержанная);	
	//СумНалНеУдерж	
	ПараметрыВыгрузки.Вставить("П000020017003", ДокументОбъект.СуммаНалогаНеУдержанная);	
	//СумНалИзлУдерж	
	ПараметрыВыгрузки.Вставить("П000020018003", ДокументОбъект.СуммаНалогаИзлишнеУдержанная);	
	//СумНалВозвр	
	ПараметрыВыгрузки.Вставить("П000020019003", ДокументОбъект.СуммаНалогаВозвращенного);		
	
	// Основные реквизиты:
	ПараметрыВыгрузки.Вставить("ОКТМО", ДокументОбъект.Организация.ОКТМО);
	ПараметрыВыгрузки.Вставить("ПоМесту", ИсходныеДанные.ПоМесту);
	
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ", НЕ ИсходныеДанные.ИндивидуальныйПредприниматель);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ИсходныеДанные.ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", инкОбщийСервер.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи", ИсходныеДанные.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок_Дата", ТекущаяДатаСеанса());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  ИсходныеДанные.ДатаДок);
	ПараметрыВыгрузки.Вставить("Период",   ИсходныеДанные.Период);
	ПараметрыВыгрузки.Вставить("ОтчетГод", ИсходныеДанные.ОтчетГод);
	ПараметрыВыгрузки.Вставить("КодНО",    ИсходныеДанные.КодНО);
	ПараметрыВыгрузки.Вставить("НомКорр",  ИсходныеДанные.НомКорр);
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",ИсходныеДанные.КодИФНСПосредника);
	
	ПараметрыВыгрузки.Вставить("Тлф", ИсходныеДанные.Тлф);
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(ИсходныеДанные.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(ИсходныеДанные.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(ИсходныеДанные.КПП));
	
	ПараметрыВыгрузки.Вставить("ОГРНИП", СокрЛП(ИсходныеДанные.ОГРНИП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(ИсходныеДанные.ФормРеорг));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(ИсходныеДанные.ИННРеорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(ИсходныеДанные.КППРеорг));
	
	ПараметрыВыгрузки.Вставить("Фамилия",  ИсходныеДанные.ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ИсходныеДанные.ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ИсходныеДанные.ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(ИсходныеДанные.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", "");
	ПараметрыВыгрузки.Вставить("НаимДокПред", "");

	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ИсходныеДанные.ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ИсходныеДанные.ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ИсходныеДанные.ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_NDFL6.2_"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции 

Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
				ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИзвлечьСтруктуруXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки503");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти   

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
