
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс  

// Процедура - Установить отбор списка
//
// Параметры:
//  ИмяПараметра - Строка 		- Имя параметра с структуре; 
//  Параметры	 - Структура 	- Параметры открытия формы;
//  Список		 - Динамический список	 - Список формы;
//
Процедура УстановитьОтборСписка(ИмяПараметра,Параметры,Список) Экспорт

	Если инкОбщийКлиентСервер.ЕстьСвойство(Параметры,ИмяПараметра) Тогда
		
		Если ЗначениеЗаполнено(Параметры[ИмяПараметра]) Тогда
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПараметра);
		    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		    ЭлементОтбора.Использование = Истина;
		    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		    ЭлементОтбора.ПравоеЗначение = Параметры[ИмяПараметра];
		КонецЕсли;

	КонецЕсли;	
		
КонецПроцедуры

// Процедура - Установить стандартные настройки интерфейса программы на сервере
//
Процедура УстановитьСтандартныеНастройкиИнтерфейсаПрограммыНаСервере() Экспорт
	
	Если Константы.инкСтандартныеНастройкиИнтерфейса.Получить() Тогда
		
		НастройкиИнтерфейса = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава = НастройкиИнтерфейса.ПолучитьСостав();
		
		// Очистить настройки состава.
		НастройкиСостава.Верх.Очистить();
		НастройкиСостава.Лево.Очистить();
		НастройкиСостава.Низ.Очистить();
		НастройкиСостава.Право.Очистить();

		ПанельРазделов = Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельРазделов");
		ПанельОткрытых = Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых");

		НастройкиСостава.Верх.Добавить(ПанельОткрытых);
		НастройкиСостава.Лево.Добавить(ПанельРазделов);

		НастройкиИнтерфейса.УстановитьСостав(НастройкиСостава);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", , НастройкиИнтерфейса);	
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Возвращаемое значение:
//   Строка - краткое название конфигурации.
//
// Пример:
//   Возврат "1С:Бухгалтерия";
//
Функция НазваниеПрограммы() Экспорт
	
	МетаданныеИмя = "Инкомсофт: Зарплата и кадры";
	
	Возврат МетаданныеИмя;
	
КонецФункции

// Функция - Версия программы
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВерсияПрограммы() Экспорт
	
	Возврат СокрЛП(Метаданные.Версия);
	
КонецФункции  

// Функция - Название и версия программы
// 
// Возвращаемое значение:
//   - Строка
//
Функция НазваниеИВерсияПрограммы() Экспорт
	Возврат ВРЕГ(Лев(НазваниеПрограммы() + " " + ВерсияПрограммы(), 40));
КонецФункции

// Функция - Проверка регистрации программы
// 
// Возвращаемое значение:
//   - Булево;
//
Функция ПроверкаРегистрацииПрограммы() Экспорт
	
	ПроверкаРегистрации = Ложь;
	
	УИДРегистрации = ПолучитьУИДРегистрации();
	Если УИДРегистрации <> "" Тогда
		ПроверкаРегистрации = Истина;	
	КонецЕсли;                      
	
	Возврат ПроверкаРегистрации;
	
КонецФункции

// Функция - Получить УИДРегистрации:
// 
// Возвращаемое значение:
//   - Строка;
//
Функция ПолучитьУИДРегистрации() Экспорт
	
	УИДРегистрации = Константы.инкУИДРегистрации.Получить(); 

	Возврат УИДРегистрации;
	
КонецФункции                  

// Функция - Получить УИДПрограммы
// 
// Возвращаемое значение:
//   - Строка;
//
Функция ПолучитьУИДПрограммы() Экспорт
	
	УИДПрограммы = Константы.инкУИДПрограммы.Получить(); 
	Если НЕ ЗначениеЗаполнено(УИДПрограммы) Тогда
		УИДПрограммы = Новый УникальныйИдентификатор;
		Константы.инкУИДПрограммы.Установить(УИДПрограммы);		
	КонецЕсли;
	
	Возврат УИДПрограммы;
	
КонецФункции                  

// Функция - Получить данные справочника
//
// Параметры:
//  стрТаблица	 - Строка	 - Имя таблицы в БД;
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные справочника;
//
Функция ПолучитьДанныеСправочника(стрТаблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	фуТаблицаБД.Ссылка КАК Ссылка,
		|	фуТаблицаБД.ПометкаУдаления КАК ПометкаУдаления,
		|	фуТаблицаБД.Код КАК Код,
		|	фуТаблицаБД.Наименование КАК Наименование
		|ИЗ
		|	Справочник.фуТаблицаБД КАК фуТаблицаБД";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.фуТаблицаБД","Справочник."+стрТаблица);
	
	тзРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблица Из тзРезультатЗапроса Цикл
		СтрокаТаблица.Наименование = ВРег(СтрокаТаблица.Наименование);
	КонецЦикла;

	тзРезультатЗапроса.Индексы.Добавить("Наименование");

	Возврат тзРезультатЗапроса; 

КонецФункции

// Процедура - Установить параметр в запросе
//
// Параметры:
//  ИмяПараметра			 - Строка - Имя параметра 
//  СтрокаЗаменыПараметра	 - Строка - Строка замены параметра
//  ИсходныеДанные			 - Структура	 - Значения параметров 
//  Запрос					 - Запрос	 - Запрос в котором меняются значения параметров
//  СтрокаЗаменыЗначение	 - Строка	 - Строка замены значения
//  ИмяПараметраВЗапросе	 - Строка	 - Имя параметра в запросе
//
Процедура УстановитьПараметрВЗапросе(ИмяПараметра,СтрокаЗаменыПараметра,ИсходныеДанные,Запрос,СтрокаЗаменыЗначение = "Истина",ИмяПараметраВЗапросе = "") Экспорт
	
	Если ИмяПараметраВЗапросе = "" Тогда
		ИмяПараметраВЗапросе = ИмяПараметра;	
	КонецЕсли;
	
	УстановитьПараметр = Ложь;
	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,ИмяПараметра) Тогда
		Если ЗначениеЗаполнено(ИсходныеДанные[ИмяПараметра]) Тогда
			УстановитьПараметр = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если УстановитьПараметр Тогда
		Запрос.УстановитьПараметр(ИмяПараметраВЗапросе, ИсходныеДанные[ИмяПараметра]);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,СтрокаЗаменыПараметра,СтрокаЗаменыЗначение);
	КонецЕсли;

КонецПроцедуры  
  
// Процедура - Записать текст в журнал операций на сервере
//
// Параметры:
//  ТекстСообщения	 - строка - текст сообщения 
//
Процедура ЗаписатьТекстВЖурналОперацийНаСервере(ТекстСообщения) Экспорт

	СтруктураСобытий = Новый Структура("ИмяСобытия, ПредставлениеУровня, Комментарий,ДатаСобытия");
  	СтруктураСобытий.ИмяСобытия 		 = "Служебная запись в журнал";
	СтруктураСобытий.ПредставлениеУровня = "Информация";	//"Информация", "Ошибка", "Предупреждение", "Примечание".
	СтруктураСобытий.Комментарий 		 = ТекстСообщения;
	СтруктураСобытий.ДатаСобытия 		 = ТекущаяДата();

	СобытияДляЖурналаРегистрации = Новый СписокЗначений();
	СобытияДляЖурналаРегистрации.Добавить(СтруктураСобытий);

	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации);

КонецПроцедуры

// Функция - Возвращает текущую организацию на сервере
// 
// Возвращаемое значение:
//   Ссылка - Справочник "Организации".
//
Функция ПолучитьТекущуюОрганизациюНаСервере() Экспорт
	
	Возврат Справочники.инкОрганизации.ПолучитьТекущуюОрганизацию();
	
КонецФункции
 
// Процедура - Задать значение по умолчанию
//
// Параметры:
//  РеквизитИмя		 - строка	 - Имя реквезита
//  РеквизитЗначение - переопределяемый	 - Значение реквизита
//  Объект			 - переопределяемый	 - Объект в котором проверяется значение
//
Процедура ЗадатьЗначениеПоУмолчанию(РеквизитИмя,РеквизитЗначение,Объект) Экспорт

	Если Не ЗначениеЗаполнено(Объект[РеквизитИмя]) Тогда
		Объект[РеквизитИмя] = РеквизитЗначение;	
	КонецЕсли;  
	
КонецПроцедуры        
 
// Функция - Получить файл из макета в хранилище 
//
// Параметры:
//  ИмяМакета		 - Строка - Имя общего макета
//  ИмяРасширения	 - Строка - Имя расширения файла 
// 
// Возвращаемое значение:
//  Строка - Адрес файла; 
//
Функция ПолучитьФайлИзМакетаВХранилищеНаСервере(ИмяМакета,ИмяРасширения) Экспорт
	
    АдресФайла = Неопределено;
    
    Попытка

		ВремФайлМакета = ПолучитьИмяВременногоФайла(ИмяРасширения);
		
		МакетСФайлом = ПолучитьОбщийМакет(ИмяМакета);
        МакетСФайлом.Записать(ВремФайлМакета);
    
        
        АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВремФайлМакета));

    Исключение
        ОбщегоНазначения.СообщитьПользователю("Ошибка при формировании файла выгрузки. Описание: "+ОписаниеОшибки());
    КонецПопытки; 
    
    Возврат АдресФайла; 	
	
КонецФункции

// Функция - Адрес параметров в хранилище
//
// Параметры:
//  ДанныеСтруктура			 - Структура - Данные для помещение в хранилище 
//  УникальныйИдентификатор	 - Строка	 - УИД
// 
// Возвращаемое значение:
//   Строка - Адрес хранилища
//
Функция АдресПараметровВХранилище(ДанныеСтруктура, УникальныйИдентификатор) Экспорт
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСтруктура, УникальныйИдентификатор);
	
КонецФункции                                              

// Функция - Возвращает код расчетного периода
//
// Параметры:
//  КвараталЧисло	 - Число	 - Номер квартала
// 
// Возвращаемое значение:
//  Строка - Код расчетного периода;
//
Функция РасчетныйПериодКод(КвараталЧисло) Экспорт
	
	КодРасчетногоПериода = "";
	
	Если КвараталЧисло = 1 Тогда
		КодРасчетногоПериода = "21";	
	ИначеЕсли КвараталЧисло = 2 Тогда  	
		КодРасчетногоПериода = "31";
	ИначеЕсли КвараталЧисло = 3 Тогда  	
		КодРасчетногоПериода = "33";
	ИначеЕсли КвараталЧисло = 4 Тогда  	
		КодРасчетногоПериода = "34";
	КонецЕсли; 
	
	Возврат КодРасчетногоПериода;
	
КонецФункции
 
// Функция - Квартал по периоду регламентного отчета
//
// Параметры:
//  ПериодРегламентногоОтчета     - перечисление - номер периода
// 
// Возвращаемое значение:
//  Число - Номер квартала; 
//
Функция КварталПоПериодуРегламентногоОтчета(ПериодРегламентногоОтчета) Экспорт
    
    КварталЧисло = 0;    
    Если ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ПервыйКвартал Тогда
        КварталЧисло = 1;    
    ИначеЕсли ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ВторойКвартал Тогда 
    	КварталЧисло = 2;
    ИначеЕсли ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ТретийКвартал Тогда 
        КварталЧисло = 3;
    ИначеЕсли ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ЧетвертыйКвартал Тогда 
        КварталЧисло = 4;
    КонецЕсли; 
    
    Возврат КварталЧисло; 
    
КонецФункции  

// Функция - Стандартный период по году и периоду регламентного отчета
//
// Параметры:
//  Год                             -  число    - год
//  ПериодРегламентногоОтчета       -  перечисление -  период года
// 
// Возвращаемое значение:
//  СтандартныйПериод - начало и конец квартала 
//
Функция СтандартныйПериодПоГодуИПериодуРегламентногоОтчета(Год, ПериодРегламентногоОтчета) Экспорт
    
    ПериодКвартала = Новый СтандартныйПериод;
    ГодСтрока = Строка(Формат(Год,"ЧГ=0"));
    
    Если (Год<>0) Тогда
        Если ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ПервыйКвартал Тогда
            ПериодКвартала.ДатаНачала = Дата(ГодСтрока+"0101000000");	
        ИначеЕсли ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ВторойКвартал Тогда     
            ПериодКвартала.ДатаНачала = Дата(ГодСтрока+"0401000000");
        ИначеЕсли ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ТретийКвартал Тогда     
            ПериодКвартала.ДатаНачала = Дата(ГодСтрока+"0701000000");
        ИначеЕсли ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ЧетвертыйКвартал Тогда     
            ПериодКвартала.ДатаНачала = Дата(ГодСтрока+"1001000000");
        КонецЕсли; 
    КонецЕсли; 
    
    ПериодКвартала.ДатаОкончания = ДобавитьМесяц(ПериодКвартала.ДатаНачала,3)-1;
    
    Возврат ПериодКвартала; 
    
КонецФункции

// Функция - Получить период регламентного отчета по дате
//
// Параметры:
//  Дата - дата     - дата по которой определяется квартал
// 
// Возвращаемое значение:
//  Перечисление - Период регламентного отчета по дате
//
Функция ПолучитьПериодРегламентногоОтчетаПоДате(Дата) Экспорт
    
    ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ПустаяСсылка();
    КварталПоДате = инкОбщийКлиентСервер.КварталПоДате(Дата);
    
    Если КварталПоДате = 1 Тогда
    	ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ПервыйКвартал;
    ИначеЕсли КварталПоДате = 2 Тогда
        ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ВторойКвартал;
    ИначеЕсли КварталПоДате = 3 Тогда
        ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ТретийКвартал;
    ИначеЕсли КварталПоДате = 4 Тогда
        ПериодРегламентногоОтчета = Перечисления.инкПериодыРегламентныхОтчетов.ЧетвертыйКвартал;
    КонецЕсли; 
    
    Возврат ПериодРегламентногоОтчета; 
		
КонецФункции

// Функция - Удалить дубли из массива
//
// Параметры:
//  ИсходныйМассив	 - Массив	 -  Исходный массив
// 
// Возвращаемое значение:
//  Массив - Массив без дублей
//
Функция УдалитьДублиИзМассива(ИсходныйМассив) Экспорт
	
	МассивПриемник = Новый Массив; 
	
    Для Каждого Элемент Из ИсходныйМассив Цикл
		
		Если МассивПриемник.Найти(Элемент) = Неопределено Тогда
            МассивПриемник.Добавить(Элемент);
        КонецЕсли;
        
    КонецЦикла;
	
	Возврат МассивПриемник; 
	
КонецФункции

// Функция получает настройки по стандартным вычетам на указанную дату
//
//		Параметры:
//			Дата - Дата, дата получения настроек.
// 
// Возвращаемое значение:
//  Структура - Настройки по стандартным вычетам на указанную дату
//
Функция СтандартныеВычетыНастройки(Дата) Экспорт
	
	НастройкиСтруктура = Новый Структура;
	НастройкиСтруктура.Вставить("МаксимальнаяСуммаНаДетей",0);
	НастройкиСтруктура.Вставить("МРОТ",0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкСтандартныеВычетыНастройкиСрезПоследних.Период КАК Период,
		|	инкСтандартныеВычетыНастройкиСрезПоследних.МаксимальнаяСуммаНаДетей КАК МаксимальнаяСуммаНаДетей,
		|	инкСтандартныеВычетыНастройкиСрезПоследних.Мрот КАК МРОТ
		|ИЗ
		|	РегистрСведений.инкСтандартныеВычетыНастройки.СрезПоследних(&Дата1, ) КАК инкСтандартныеВычетыНастройкиСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата1", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НастройкиСтруктура,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат НастройкиСтруктура; 	
	
КонецФункции

// Процедура - Добавляет признак нового в дополнительные свойства объекта
//
// Параметры:
//  Источник - Объект	 - Источник 
//
Процедура ДобавитьПризнакЭтоНовый(Источник) Экспорт
	
	Источник.ДополнительныеСвойства.Вставить("фмЭтоНовый",Источник.ЭтоНовый());
	
КонецПроцедуры

// Функция - Получить рабочие дни часы за месяц
//
// Параметры:
//  МесяцНачисления	 - Дата	 - Месяц начисления
// 
// Возвращаемое значение:
//  Число - Количество рабочих дней (часов)
//
Функция ПолучитьРабочиеДниЧасыЗаМесяц(МесяцНачисления) Экспорт
	
	РабочихДнейЧасов = Неопределено;
	
	ПроизводственныйКалендарьРФ = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	
	Если ПроизводственныйКалендарьРФ <> Неопределено Тогда
		
		// Если производственный календарь определить не удалось - оставляем число дней нулевым.
		РабочихДнейЧасов = инкРасчетЗаработнойПлатыСервер.РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		
	КонецЕсли;
	
	Возврат РабочихДнейЧасов;	
	
КонецФункции

// Функция - Разница в днях
//
// Параметры:
//  Дата1	 - Дата	 - Начало периода
//  Дата2	 - Дата	 - Конец периода
// 
// Возвращаемое значение:
//  Число - Разница в днях
//
Функция РазницаВДнях(Дата1, Дата2) Экспорт
	Если Дата1 > Дата2 Тогда
        Возврат Окр((Дата1 - Дата2)/86400);
    Иначе
        Возврат Окр((Дата2 - Дата1)/86400);
    КонецЕсли;
КонецФункции

// Функция - Разложить строку в массив подстрок
//
// Параметры:
//  Стр			 - Строка	 - Строка для разложения в массив
//  Разделитель	 - Строка	 - Разделитель значений
// 
// Возвращаемое значение:
//  Массив - Массив строк
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
    
    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока 1=1 Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = СокрЛ(Сред(Стр,Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока 1=1 Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = Сред(Стр,Поз+ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;
    
КонецФункции// глРазложить

// Функция - Выделить слово
//
// Параметры:
//  ИсходнаяСтрока	 - Строка	 - Исходная строка
// 
// Возвращаемое значение:
//  Строка - Выделенное слово
//
Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт

    Буфер = СокрЛ(ИсходнаяСтрока);
    ПозицияПослПробела = Найти(Буфер, " ");

    Если ПозицияПослПробела = 0 Тогда
        ИсходнаяСтрока = "";
        Возврат Буфер;
    КонецЕсли;
    
    ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
    ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
    
    Возврат ВыделенноеСлово;
    
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер.
// 
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			ИмяПодчиненногоОМ = ЧастиИмени[3];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Попытка
					Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
					ИмяОм = ИмяПодчиненногоОМ;
				Исключение
					Менеджер = Неопределено;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	//ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ПолноеИмя);
	
КонецФункции

// Функция - Проверяет есть ли элемент в массиве
//
//	Параметры:
//		Элемент - Исходный элемент
//		Массив - массив в котором производится поиск
// 
// Возвращаемое значение:
//  Булево - Есть элемент в массиве или его нет
//
Функция ЭлементВМассиве(Элемент, Массив) Экспорт
	
	булНайден = Ложь;
	Для каждого элМассива из Массив Цикл
		Если Элемент = элМассива Тогда
			булНайден = Истина;
			Прервать;;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат булНайден;
	
КонецФункции

// Функция - Преобразовать таблицу значений в массив
//
// Параметры:
//  тзДанные - ТаблицаЗначений	 - Исходная таблица значений
// 
// Возвращаемое значение:
//  Массив - Данные из таблицы значений
//
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные) Экспорт 
    
    мсДанные = Новый Массив;
        
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
		
		Если СтрокаТЗ.ВыборСтроки Тогда
		
	        стСтрокаТаблицы = Новый Структура;
	        Для Каждого ИмяКолонки Из тзДанные.Колонки Цикл
	            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
	        КонецЦикла;
	        
	        мсДанные.Добавить(стСтрокаТаблицы);
			
		КонецЕсли;
			
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция - Установить ссылку нового
//
// Параметры:
//  обОбъект - Объект	 - Объект который будет записан в БД
// 
// Возвращаемое значение:
//  Ссылка - Ссылка в базе данных
//
Функция УстановитьСсылкуНового(обОбъект) Экспорт

	ссОбъект = обОбъект.Ссылка; 
	
	Если Не ЗначениеЗаполнено(ссОбъект) Тогда
		
		// Получаем возможно уже установленную ранее ссылку нового
		ссОбъект = обОбъект.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(ссОбъект) Тогда
			
			// Если ссылка нового пустая, то запрашиваем ее у менеджера и устанавливаем
			Если ТипЗнч(обОбъект.Ссылка) = Тип("ДокументСсылка.инкНачислениеЗарплаты") Тогда
				ссОбъект = Документы.инкНачислениеЗарплаты.ПолучитьСсылку();
			КонецЕсли;
			
			обОбъект.УстановитьСсылкуНового(ссОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ссОбъект;
	
КонецФункции

// Функция возвращает подразделения организации:
//
//	Параметры:
//		Организация - справочник, организации.		
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Перечень подразделений
//
Функция ПолучитьПодразделенияОрганизацииНаСервере(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПодразделения.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.инкПодразделения КАК инкПодразделения
		|ГДЕ
		|	инкПодразделения.Владелец = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапросаТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапросаТаблица; 
	
КонецФункции

// Функция - Это внешняя обработка отчет
//
// Параметры:
//  Объект	 - Объект	 - Объект обработки или отчета
// 
// Возвращаемое значение:
//  Булево - Внешняя обработка (отчет) или нет
//
Функция ЭтоВнешняяОбработкаОтчет(Объект) Экспорт
	
	ПолноеИмяМетаданных = Объект.Метаданные().ПолноеИмя();
    Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных) = Неопределено
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти






	