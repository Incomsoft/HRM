
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)  
	
	ПервоначальноеЗаполнениеНаСервере(Отказ, Параметры);

КонецПроцедуры       

&НаСервере
Процедура ПервоначальноеЗаполнениеНаСервере(Отказ, Параметры)
	
	ЗаполнитьРеквизитИзПараметров("Организация",Параметры);
	ЗаполнитьРеквизитИзПараметров("Подразделение",Параметры);
	ЗаполнитьРеквизитИзПараметров("Сотрудник",Параметры);
	ЗаполнитьРеквизитИзПараметров("ВидРасчетаДниЧасы",Параметры);

	ЗаполнитьРеквизитИзПараметров("МесяцНачисления",Параметры);
	мМесяцНачисленияСтрокой  = инкЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.МесяцНачисления);
	
	УстановитьВидимостьКолонокПриСменеВидаРасчета();
	
	инкОбщийСервер.ЗадатьЗначениеПоУмолчанию("ВидНачисления",ПланыВидовРасчета.инкНачисления.ОплатаОчередныхОтпусков,Объект);
	инкОбщийСервер.ЗадатьЗначениеПоУмолчанию("ВидРасчета",Перечисления.инкВидРасчетаОтпуска.Отпуск,Объект);
	
	инкОбщийСервер.ЗадатьЗначениеПоУмолчанию("ПериодС",ТекущаяДата(),Объект);
	инкОбщийСервер.ЗадатьЗначениеПоУмолчанию("ПериодПО",ТекущаяДата(),Объект);
	ЗаполнитьДниОтпуска(Истина);
	                  
	ЗаполнитьРасчетныеДанныеНаСервере();
    ВидРасчетаОтпускаПриИзмененииНаСервере();
	
	ЭтаФорма.Заголовок = "Отпуск: "+Объект.Сотрудник.ФИОСокращенное;
	
КонецПроцедуры        

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если мПомещатьРасчетВХранилище И НЕ ЗавершениеРаботы Тогда
		Закрыть(ПоместитьИзмененныеДанныеВоВременноеХранилище());
	Иначе
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтпускСПриИзменении(Элемент)                           
	
	ЗаполнитьДниОтпуска(Истина);   
	
	Объект.МесяцНачисления = НачалоМесяца(Объект.ПериодС); 
	инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "мМесяцНачисленияСтрокой", 0, Модифицированность);
	ВопросПерезаполнитьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПОПриИзменении(Элемент)
	
	ЗаполнитьДниОтпуска(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтпускаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РасчитатьОтпускНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисления(Команда)    
	
	ВопросПерезаполнитьНачисления();
  
КонецПроцедуры   

&НаКлиенте
Процедура ВидРасчетаДниЧасыПриИзменении(Элемент)

	ВопросПерезаполнитьНачисления();

КонецПроцедуры

&НаКлиенте
Процедура ВопросПерезаполнитьНачисления()
	
	ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть ""Расчетные данные"" будет очищена. Заполнить?'");
	Оповещение = Новый ОписаниеОповещения("ВопросПерезаполнитьНачисленияЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры  

&НаКлиенте
Процедура ВидРасчетаОтпускаПриИзменении(Элемент)

	ВопросПерезаполнитьНачисления();

КонецПроцедуры                         

&НаСервере
Процедура ВидРасчетаОтпускаПриИзмененииНаСервере()
	
	ВидимостьВидаРасчетаДниЧасы = Ложь;
	Если Объект.ВидРасчета = Перечисления.инкВидРасчетаОтпуска.ПоСреднему Тогда
		ВидимостьВидаРасчетаДниЧасы = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.ВидНачисления) Тогда
			Объект.ВидНачисления = ПланыВидовРасчета.инкНачисления.ОплатаПоСреднемуЗаработку;	
		КонецЕсли;		
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.ВидНачисления) Тогда
			Объект.ВидНачисления = ПланыВидовРасчета.инкНачисления.ОплатаОчередныхОтпусков;
		КонецЕсли;
	КонецЕсли;	                            
	
	Элементы.ВидРасчетаДниЧасы.Видимость = ВидимостьВидаРасчетаДниЧасы;
	
КонецПроцедуры                                  

&НаКлиенте
Процедура ВопросПерезаполнитьНачисленияЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ТекстВопроса = "Использовать для заполнения данные документа основания: "+Объект.ДокументОснование+"?";
			Оповещение = Новый ОписаниеОповещения("ВопросИспользоватьДокументОснованиеЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ВидРасчетаОтпускаПриИзмененииНаСервере();	
			ЗаполнитьРасчетныеДанныеНаСервере(Истина);	
		КонецЕсли;
		
	КонецЕсли;                                      	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИспользоватьДокументОснованиеЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	ИспользоватьДокументОснование = Результат = КодВозвратаДиалога.Да;

	ВидРасчетаОтпускаПриИзмененииНаСервере();	
	ЗаполнитьРасчетныеДанныеНаСервере(Истина,ИспользоватьДокументОснование);	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныеДанныеПриИзменении(Элемент)            
	
	РасчетныеДанныеИтогиНаСервере();
	
КонецПроцедуры                             

&НаКлиенте                                        
Процедура ОсновнойОтпускДниПриИзменении(Элемент)

	РасчитатьДополнительныйОтпускДни();
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьДополнительныйОтпускДни()

	Объект.ДополнительныйОтпускДни = Объект.Дней - Объект.ОсновнойОтпускДни;
	Если Объект.ДополнительныйОтпускДни < 0 Тогда
		Объект.ДополнительныйОтпускДни = 0;
	КонецЕсли; 
	
	РасчитатьОтпускНаСервере();

КонецПроцедуры

&НаСервере
Процедура КомпенсацияЗаНеиспользованныйОтпускПриИзмененииНаСервере()
	
	Если Объект.КомпенсацияЗаНеиспользованныйОтпускДни <> 0 Тогда
		Объект.ВидНачисления = ПланыВидовРасчета.инкНачисления.КомпенсацияЗаНеиспользованныйОтпуск;
	Иначе
		Если Объект.ВидНачисления = ПланыВидовРасчета.инкНачисления.КомпенсацияЗаНеиспользованныйОтпуск Тогда
			Объект.ВидНачисления = ПланыВидовРасчета.инкНачисления.ОплатаОчередныхОтпусков;		
		КонецЕсли;
	КонецЕсли;

	РасчитатьОтпускНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомпенсацияЗаНеиспользованныйОтпускПриИзменении(Элемент)   
	
	КомпенсацияЗаНеиспользованныйОтпускПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВидОтпускаПриИзменении(Элемент) 
	
	РасчитатьОтпускНаСервере();	

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РасчитатьОтпускНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура РасчетныеДанныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура мМесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ВопросПерезаполнитьНачисления();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере                                       
Процедура ЗаполнитьДниОтпуска(ЗаполнитьОсновнойОтпуск = Ложь)

	Если Объект.ПериодС > Объект.ПериодПО Тогда
		Объект.ПериодПО = Объект.ПериодС;		
	КонецЕсли;	
	
	ДниОтпускаСтруктура = РасчитатьДниОтпускаНаСервере(Объект.ПериодС,Объект.ПериодПО);
	
	Объект.Дней	= ДниОтпускаСтруктура.Дней;	
	Объект.РабочихДней = ДниОтпускаСтруктура.РабочихДней;		
	
	Если ЗаполнитьОсновнойОтпуск Тогда
		Объект.ОсновнойОтпускДни = ДниОтпускаСтруктура.Дней;		
	КонецЕсли;      
	
	РасчитатьДополнительныйОтпускДни();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчитатьДниОтпускаНаСервере(Дата1,Дата2)
	
	ДниОтпускаСтруктура = Новый Структура;
	ДниОтпускаСтруктура.Вставить("Дней",0);
	ДниОтпускаСтруктура.Вставить("РабочихДней",0);
	
	ПроизводственныйКалендарьТаблица = инкПроизводственныйКалендарьСервер.ПолучитьДанныеПроизводственногоКалендаряЗаПериод(Дата1,Дата2);
	Если ПроизводственныйКалендарьТаблица.Количество() > 0 Тогда
		
		Для каждого ПроизводственныйКалендарьСтрока Из ПроизводственныйКалендарьТаблица Цикл
			
			Если ПроизводственныйКалендарьСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				ДниОтпускаСтруктура.РабочихДней = ДниОтпускаСтруктура.РабочихДней + 1;	
			КонецЕсли;
			ДниОтпускаСтруктура.Дней = ДниОтпускаСтруктура.Дней + 1;
			
		КонецЦикла;
		
	Иначе	
		
		КоличествоДней = (Дата2 - Дата1) / 86400;
		Для Сч = 0 По КоличествоДней Цикл
			
			ДатаВЦикле = Дата1 + 86400 * Сч;
			Если ДеньНедели(ДатаВЦикле) <= 5 Тогда
				ДниОтпускаСтруктура.РабочихДней = ДниОтпускаСтруктура.РабочихДней + 1;
			КонецЕсли;
			ДниОтпускаСтруктура.Дней = ДниОтпускаСтруктура.Дней + 1;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ДниОтпускаСтруктура;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизит(ИмяСвойства,Значение)
	
	Если ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
		Возврат;	
	КонецЕсли;	

	Объект[ИмяСвойства] = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитИзПараметров(ИмяСвойства,Параметры)
	
	Если Параметры.Свойство(ИмяСвойства) Тогда
		ЗаполнитьРеквизит(ИмяСвойства,Параметры[ИмяСвойства]);    
		мПомещатьРасчетВХранилище = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИзмененныеДанныеВоВременноеХранилище()
	
	ВозвращаемыеСведения = Новый Структура;             
	ВозвращаемыеСведения.Вставить("Сотрудник", Объект.Сотрудник); 
	ВозвращаемыеСведения.Вставить("тзПрочиеНачисления",Неопределено);
	ВозвращаемыеСведения.Вставить("ДокументСсылка", Неопределено); 
	
	Если Объект.Проведен Тогда
		ВозвращаемыеСведения.тзПрочиеНачисления = Объект.РезультатРасчета.Выгрузить();	
		ВозвращаемыеСведения.Вставить("ДокументСсылка", Объект.Ссылка); 
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ВозвращаемыеСведения, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьКолонокПриСменеВидаРасчета()

	ВидимостьДниБулево = Истина;
	
	Элементы.РасчетныеДанныеДни.Видимость = ВидимостьДниБулево;
	Элементы.РасчетныеДанныеДниФакт.Видимость = ВидимостьДниБулево;
	
КонецПроцедуры

#Область о // Месяц начисления:

&НаКлиенте
Процедура мМесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Объект.МесяцНачисления = НачалоМесяца(ТекущаяДата());	
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент",Элемент);
	
    ПараметрыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления));
	ОписаниеОповещения     = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.инкВыборСтандартногоПериодаМесяц", ПараметрыВыбораПериода, Объект.МесяцНачисления, , , , ОписаниеОповещения);

КонецПроцедуры  

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	Объект.МесяцНачисления = РезультатВыбора.НачалоПериода;
    инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "мМесяцНачисленияСтрокой", 0, Модифицированность);

КонецПроцедуры    

#КонецОбласти

#Область о // Исходные данные:

&НаСервере
Функция ПолучитьИсходныеДанные()
	
	ИсходныеДанные = Новый Структура;   
	ИсходныеДанные.Вставить("РасчетныеДанные",Объект.РасчетныеДанные.Выгрузить());   
	ИсходныеДанные.Вставить("ВидРасчета",Объект.ВидРасчета);   
	ИсходныеДанные.Вставить("МесяцНачисления",Объект.МесяцНачисления);
	ИсходныеДанные.Вставить("Дата2",НачалоМесяца(Объект.МесяцНачисления)-1);
	ИсходныеДанные.Вставить("Дата1",НачалоМесяца(ДобавитьМесяц(ИсходныеДанные.Дата2,-11)));
	ИсходныеДанные.Вставить("Сотрудник",Объект.Сотрудник);
	ИсходныеДанные.Вставить("НачисленияТаблица",ПолучитьНачисления(ИсходныеДанные));
	ИсходныеДанные.Вставить("ВедомостьТаблица",инкУчетВремениСервер.ПолучитьНормуВремениИзВедомости(ИсходныеДанные));
	ИсходныеДанные.Вставить("ТабельТаблица",инкТабельСервер.ПолучитьТабельТаблица(ИсходныеДанные));
	ИсходныеДанные.Вставить("НормаВремениТаблица",инкУчетВремениСервер.ПолучитьНормаВремениТаблица(ИсходныеДанные));
	  
	Возврат ИсходныеДанные;	
	
КонецФункции    

&НаСервере
Функция ПолучитьНачисления(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНачисленияОбороты.Период КАК Месяц,
		|	инкНачисленияОбороты.Начисление КАК Начисление,
		|	инкНачисленияОбороты.Начисление.Премия КАК ВидПремии,
		|	инкНачисленияОбороты.Сотрудник КАК Сотрудник,
		|	инкНачисленияОбороты.СуммаНачисленияОборот + инкНачисленияОбороты.РайонныйКоэффициентОборот + инкНачисленияОбороты.СевернаяНадбавкаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.инкНачисления.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			Месяц,
		|			Сотрудник = &Сотрудник
		|				И Отпуск) КАК инкНачисленияОбороты";
	
	                                                      
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	Запрос.УстановитьПараметр("Сотрудник", ИсходныеДанные.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

#КонецОбласти

#Область о // Заполнение расчетных данных:

&НаСервере
Процедура ЗаполнитьРасчетныеДанныеНаСервере(Перезаполнение = Ложь, ИспользоватьДокументОснование = Ложь)
	
	Если Перезаполнение Тогда
		Объект.РасчетныеДанные.Очистить();		
	КонецЕсли;
	
	Если Объект.РасчетныеДанные.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ИсходныеДанные = ПолучитьИсходныеДанные();
	
	Объект.РасчетныеДанные.Очистить();
	ТекущийМесяцДата = ИсходныеДанные.Дата1;
	Для МесяцНомер = 1 По 12 Цикл

		РасчетныеДанныеЗаПериод = ПолучитьРасчетныеДанныеЗаПериод(ТекущийМесяцДата,ИсходныеДанные);
		РасчетныеДанныеСтрока = Объект.РасчетныеДанные.Добавить();
		
		ЗаполнитьЗначенияСвойств(РасчетныеДанныеСтрока,РасчетныеДанныеЗаПериод);
		
		Если ИспользоватьДокументОснование Тогда
			
			ПоискСтроки = Новый Структура;
			ПоискСтроки.Вставить("Год",НачалоГода(ТекущийМесяцДата));
			ПоискСтроки.Вставить("Месяц",ТекущийМесяцДата);  
			
			СтрокиДокументаОснованияМассив = Объект.ДокументОснование.РасчетныеДанные.НайтиСтроки(ПоискСтроки);
			
			Для каждого СтрокаДокументаОснования Из СтрокиДокументаОснованияМассив Цикл
				ЗаполнитьЗначенияСвойств(РасчетныеДанныеСтрока,СтрокаДокументаОснования);
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущийМесяцДата = ДобавитьМесяц(ТекущийМесяцДата,1);	
		
	КонецЦикла;
	
	РасчетныеДанныеИтогиНаСервере();  
	
КонецПроцедуры                   

&НаСервере
Функция ПолучитьРасчетныеДанныеЗаПериод(ТекущийМесяцДата,ИсходныеДанные)

	РасчетныеДанныеСтруктура = Новый Структура;	    
	Для каждого КолонкаТаблицы Из ИсходныеДанные.РасчетныеДанные.Колонки Цикл
		РасчетныеДанныеСтруктура.Вставить(КолонкаТаблицы.Имя);	
	КонецЦикла;               	                              
	РасчетныеДанныеСтруктура.Год   = НачалоГода(ТекущийМесяцДата);
	РасчетныеДанныеСтруктура.Месяц = ТекущийМесяцДата;
	
	КоличествоДнейЧасовПоПериоду 			= ПолучитьКоличествоДнейЧасовПоПериоду(ТекущийМесяцДата,ИсходныеДанные);
	РасчетныеДанныеСтруктура.ДниЧасы     	= КоличествоДнейЧасовПоПериоду.ДниЧасы;         
	РасчетныеДанныеСтруктура.ДниЧасыФакт 	= КоличествоДнейЧасовПоПериоду.ДниЧасыФакт;
	
	СуммыПоПериоду = ПолучитьПремииПоИтогамРаботы(ТекущийМесяцДата,ИсходныеДанные);
	РасчетныеДанныеСтруктура.ПремииМесяц	= СуммыПоПериоду.ПремииМесяц;
	РасчетныеДанныеСтруктура.ПремииКвартал  = СуммыПоПериоду.ПремииКвартал;
	РасчетныеДанныеСтруктура.ПремииГод      = СуммыПоПериоду.ПремииГод;
	РасчетныеДанныеСтруктура.Зарплата 		= СуммыПоПериоду.Зарплата;  
	                                            
	Возврат РасчетныеДанныеСтруктура;                         
	
КонецФункции 

&НаСервере
Функция ПолучитьПремииПоИтогамРаботы(ТекущийМесяцДата,ИсходныеДанные)
	
	ПремииСтруктура = Новый Структура;
	ПремииСтруктура.Вставить("ПремииМесяц",0);
	ПремииСтруктура.Вставить("ПремииКвартал",0);
	ПремииСтруктура.Вставить("ПремииГод",0);
	ПремииСтруктура.Вставить("Зарплата",0);
	
	ПериодПоиск = Новый Структура;
	ПериодПоиск.Вставить("Месяц",ТекущийМесяцДата);
	
	НачисленияМассив = ИсходныеДанные.НачисленияТаблица.НайтиСтроки(ПериодПоиск);
	
	Для каждого НачислениеЭлемент Из НачисленияМассив Цикл
		
		ПремияСтрока = "";
		Если НачислениеЭлемент.ВидПремии = Перечисления.инкВидыПремий.Годовая Тогда
			ПремияСтрока = "ПремииГод";
		ИначеЕсли НачислениеЭлемент.ВидПремии = Перечисления.инкВидыПремий.Квартальная Тогда
			ПремияСтрока = "ПремииКвартал";
		ИначеЕсли НачислениеЭлемент.ВидПремии = Перечисления.инкВидыПремий.Месяц Тогда
			ПремияСтрока = "ПремииМесяц";	
		Иначе
			ПремияСтрока = "Зарплата";
		КонецЕсли;  
		
		Если ПремияСтрока <> "" Тогда
			ПремииСтруктура[ПремияСтрока] = ПремииСтруктура[ПремияСтрока] + НачислениеЭлемент.Сумма;	
		КонецЕсли;
		
	КонецЦикла;  
	
	Возврат ПремииСтруктура;	
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоДнейЧасовПоПериоду(ТекущийМесяцДата,ИсходныеДанные);
	
	КоличествоДнейЧасов = Новый Структура;
	КоличествоДнейЧасов.Вставить("ДниЧасы",0);
	КоличествоДнейЧасов.Вставить("ДниЧасыФакт",0);
	
	ПоискПериода = Новый Структура;
	ПоискПериода.Вставить("Месяц",ТекущийМесяцДата);  
	
	НормаВремениМассив  = ИсходныеДанные.НормаВремениТаблица.НайтиСтроки(ПоискПериода);
	ВедомостьМассив 	= ИсходныеДанные.ВедомостьТаблица.НайтиСтроки(ПоискПериода);
	
	Если ИсходныеДанные.ВидРасчета = Перечисления.инкВидРасчетаОтпуска.Отпуск Тогда
		
		// Поиск данных по ведомости:
		Для каждого ВедомостьСтрока Из ВедомостьМассив Цикл
			
			ВидРасчета = Перечисления.инкВидРасчетаДниЧасы.ВДнях;
			Если Объект.ВидРасчета = Перечисления.инкВидРасчетаОтпуска.ПоСреднему  Тогда
				ВидРасчета = Объект.ВидРасчета;	
			КонецЕсли;
			
			Если ВидРасчета = Перечисления.инкВидРасчетаДниЧасы.ВЧасах Тогда
				КоличествоДнейЧасов.ДниЧасы = ВедомостьСтрока.Часы;
				КоличествоДнейЧасов.ДниЧасыФакт = ВедомостьСтрока.ЧасыФакт;
			Иначе	
				КоличествоДнейЧасов.ДниЧасы = ВедомостьСтрока.Дни;
				КоличествоДнейЧасов.ДниЧасыФакт = ВедомостьСтрока.ДниФакт;
			КонецЕсли;  
			
		КонецЦикла;              			
		
		// Поиск по норме времени:
		Если КоличествоДнейЧасов.ДниЧасы = 0 Тогда
			Для каждого НормаВремениЭлемент Из НормаВремениМассив Цикл 
            	КоличествоДнейЧасов.ДниЧасы = НормаВремениЭлемент.КалендраныхДней;	
			КонецЦикла;      
		КонецЕсли;
		
	Иначе
		                  
 		// Поиск данных по ведомости:
		Для каждого ВедомостьСтрока Из ВедомостьМассив Цикл
			
			Если Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
				КоличествоДнейЧасов.ДниЧасы = ВедомостьСтрока.НормаДни;
				КоличествоДнейЧасов.ДниЧасыФакт = ВедомостьСтрока.НормаДниФакт;
			Иначе
				КоличествоДнейЧасов.ДниЧасы = ВедомостьСтрока.НормаЧасы;
				КоличествоДнейЧасов.ДниЧасыФакт = ВедомостьСтрока.НормаЧасыФакт;
			КонецЕсли;
		КонецЦикла;  
		
		Если КоличествоДнейЧасов.ДниЧасы = 0 Тогда
			Для каждого НормаВремениЭлемент Из НормаВремениМассив Цикл    
				Если Объект.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
                	КоличествоДнейЧасов.ДниЧасы = НормаВремениЭлемент.РабочихДнейВМесяце;		
				Иначе
					КоличествоДнейЧасов.ДниЧасы = НормаВремениЭлемент.НормаЧасовМужчиныПятидневка;
				КонецЕсли; 				
			КонецЦикла;      
		КонецЕсли;

	КонецЕсли;
	
	Возврат КоличествоДнейЧасов;
	
КонецФункции       

&НаСервере
Процедура РасчетныеДанныеИтогиНаСервере()
	
	РасчетныеДанные = Объект.РасчетныеДанные;
	
	Для каждого РасчетныеДанныеСтрока Из РасчетныеДанные Цикл
		
		РасчетныеДанныеСтрока.Итого = РасчетныеДанныеСтрока.ПремииМесяц
					+ РасчетныеДанныеСтрока.ПремииКвартал
					+ РасчетныеДанныеСтрока.ПремииГод
					+ РасчетныеДанныеСтрока.Зарплата;

		Если РасчетныеДанныеСтрока.ДниЧасы <> 0 Тогда
			РасчетныеДанныеСтрока.КорректировкаДни = 29.3 * РасчетныеДанныеСтрока.ДниЧасыФакт / РасчетныеДанныеСтрока.ДниЧасы;
		Иначе
		    РасчетныеДанныеСтрока.КорректировкаДни = 0;
		КонецЕсли;	       
		
		Если (РасчетныеДанныеСтрока.ДниЧасы = 0) ИЛИ (РасчетныеДанныеСтрока.ДниЧасыФакт = 0) Тогда
			РасчетныеДанныеСтрока.КорректировкаДни	= 0;							      
		КонецЕсли;                                       
        	
		Если РасчетныеДанныеСтрока.ДниЧасы <> 0 Тогда
			РасчетныеДанныеСтрока.КорректировкаДниРасчет = 29.3 * РасчетныеДанныеСтрока.ДниЧасыФакт 
			                                             / РасчетныеДанныеСтрока.ДниЧасы;		
		Иначе		
			РасчетныеДанныеСтрока.КорректировкаДниРасчет = 0;
		КонецЕсли;
			
		РасчетныеДанныеСтрока.ПовышениеЗПСуммаИндексации = РасчетныеДанныеСтрока.Итого
		                                                 * РасчетныеДанныеСтрока.ПовышениеЗПКоэффициент;
		
	КонецЦикла; 
	
	РасчитатьОтпускНаСервере();
	
КонецПроцедуры

#КонецОбласти	                        

#Область о // Расчет отпускных:

&НаСервере
Процедура РасчитатьОтпускНаСервере()
	
	ВремяНачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	//
	РасчетСтруктура = ПолучитьРасчетСтруктура();
	//           
	ПояснениеРасчета = "Расчет на "+ТекущаяДата()+": "+Символы.ПС;
	//
	ПояснениеРасчета = ПояснениеРасчета + Объект.Сотрудник.ФИОСокращенное + ", "
	                 + "Организация - " + Объект.Организация + ", "
					 + "Подразделение - " + Объект.Подразделение + ". "
					 + "Расчет отпуска."
					 + Символы.ПС
					 + Символы.ПС;

	СтрокаРасчетнаяСуммаЗарплаты = Формат(РасчетСтруктура.РасчетнаяСуммаЗарплаты,"ЧДЦ=2; ЧН=0,00");
	Если РасчетСтруктура.СуммаИндексации <> 0 Тогда
		СтрокаРасчетнаяСуммаЗарплаты = "("
							 + СтрокаРасчетнаяСуммаЗарплаты
		                     + " + "
							 + Формат(РасчетСтруктура.СуммаИндексации,"ЧДЦ=2; ЧН=0,00")
							 + ")"
							 + " = "
							 + Формат(РасчетСтруктура.РасчетнаяСуммаЗарплаты+РасчетСтруктура.СуммаИндексации,"ЧДЦ=2; ЧН=0,00");	
	КонецЕсли;

	ПояснениеРасчета = ПояснениеРасчета 
					 + "Расчетная сумма зарплаты: "
					 + СтрокаРасчетнаяСуммаЗарплаты
					 + Символы.ПС;
					 
					 
	ПояснениеРасчета = ПояснениеРасчета 
					 + "Расчёт среднего дневного заработка: " 
					 + Формат(РасчетСтруктура.РасчетнаяСуммаЗарплаты+РасчетСтруктура.СуммаИндексации,"ЧДЦ=2; ЧН=0,00") 
					 + " / "
					 + Формат(РасчетСтруктура.ДниКоличество,"ЧДЦ=2; ЧН=0,00")
					 + " = "
					 + Формат(РасчетСтруктура.РасчетнаяСумма,"ЧДЦ=2; ЧН=0,00")
					 + Символы.ПС
					 + Символы.ПС;
					 
	Если РасчетСтруктура.НеиспОтпускДни = 0 Тогда
		
		СтрокаРасчетаДополнительныйОтпуск = "";
		Если РасчетСтруктура.ДниДополнительныйОтпуск Тогда
			СтрокаРасчетаДополнительныйОтпуск = " + "
			                                  + Формат(РасчетСтруктура.РасчетнаяСумма,"ЧДЦ=2; ЧН=0,00")
			                                  + " * " 
			                                  + РасчетСтруктура.ДниДополнительныйОтпуск;   	
		КонецЕсли;

		ПояснениеРасчета = ПояснениеРасчета 
						 + "Итого начислено: "
						 + Формат(РасчетСтруктура.РасчетнаяСумма,"ЧДЦ=2; ЧН=0,00")
						 + " * "
						 + РасчетСтруктура.ДниОтпуск
						 + СтрокаРасчетаДополнительныйОтпуск
						 + " = "
						 + РасчетСтруктура.ИтогоНачисленоСумма					 
						 + Символы.ПС;  
						 
	Иначе					

		ПояснениеРасчета = ПояснениеРасчета 
						 + "Итого начислено: "
						 + Формат(РасчетСтруктура.РасчетнаяСумма,"ЧДЦ=2; ЧН=0,00")
						 + " * "
						 + РасчетСтруктура.НеиспОтпускДни
						 + " = "
						 + РасчетСтруктура.ИтогоНачисленоСумма					 
						 + Символы.ПС;  
		
	КонецЕсли;				 
					 
	//                  
	Объект.ПояснениеРасчета = ПояснениеРасчета; 
	//
	ЗаполнитьРезультатРасчета(РасчетСтруктура);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Документ.инкОтпускРасчетПоСреднему.РасчетДанных",ВремяНачалоЗамера);
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьРезультатРасчета(РасчетСтруктура)
	
	Объект.РезультатРасчета.Очистить();
	
	// За счет работодателя:
	НачислениеСтрока = Объект.РезультатРасчета.Добавить();
	НачислениеСтрока.Начисление = Объект.ВидНачисления;
	//
	НачислениеСтрока.СуммаНачисления = РасчетСтруктура.ИтогоНачисленоСумма;	
    //
	НачислениеСтрока.Дни             = РасчетСтруктура.ДниОтпуск;
	НачислениеСтрока.Месяц           = РасчетСтруктура.МесяцОтпуск;
	
	Объект.СуммаДокумента = Объект.РезультатРасчета.Итог("СуммаНачисления");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасчетСтруктура()
	
	РасчетСтруктура = Новый Структура;
	РасчетСтруктура.Вставить("ДниОтпуск",Объект.ОсновнойОтпускДни);
	РасчетСтруктура.Вставить("ДниДополнительныйОтпуск",Объект.ДополнительныйОтпускДни);
	РасчетСтруктура.Вставить("МесяцОтпуск",Объект.МесяцНачисления);
	РасчетСтруктура.Вставить("РасчетнаяСуммаЗарплаты",0);
	РасчетСтруктура.Вставить("ДниКоличество",0);
	РасчетСтруктура.Вставить("РасчетнаяСумма",0);
	РасчетСтруктура.Вставить("ИтогоНачисленоСумма",0);     
	РасчетСтруктура.Вставить("НеиспОтпускДни",Объект.КомпенсацияЗаНеиспользованныйОтпускДни);     
	РасчетСтруктура.Вставить("СуммаИндексации",0);     

	РасчетСтруктура.СуммаИндексации = Объект.РасчетныеДанные.Итог("ПовышениеЗПСуммаИндексации");     
	
	РасчетСтруктура.РасчетнаяСуммаЗарплаты	= Объект.РасчетныеДанные.Итог("Итого");
											
	Если Объект.ВидРасчета = Перечисления.инкВидРасчетаОтпуска.ПоСреднему Тогда
		РасчетСтруктура.ДниКоличество			= Объект.РасчетныеДанные.Итог("ДниЧасыФакт");	
	Иначе
		РасчетСтруктура.ДниКоличество			= Объект.РасчетныеДанные.Итог("КорректировкаДниРасчет");	
	КонецЕсли;
	
	//                                                                               
	Если РасчетСтруктура.ДниКоличество <> 0 Тогда
		РасчетСтруктура.РасчетнаяСумма = Окр((РасчетСтруктура.РасчетнаяСуммаЗарплаты + РасчетСтруктура.СуммаИндексации)/ РасчетСтруктура.ДниКоличество,2);	
	КонецЕсли;
	//                             
	//Если РасчетСтруктура.НеиспОтпускДни = 0 Тогда
	//	РасчетСтруктура.ИтогоНачисленоСумма = Окр(РасчетСтруктура.ДниОтпуск * (РасчетСтруктура.РасчетнаяСумма + РасчетСтруктура.СуммаИндексации),2)
	//	                                    + Окр(РасчетСтруктура.ДниДополнительныйОтпуск * (РасчетСтруктура.РасчетнаяСумма + РасчетСтруктура.СуммаИндексации),2);
	//Иначе
	//	РасчетСтруктура.ИтогоНачисленоСумма = Окр(РасчетСтруктура.НеиспОтпускДни * (РасчетСтруктура.РасчетнаяСумма + РасчетСтруктура.СуммаИндексации),2);
	//КонецЕсли;  
	Если РасчетСтруктура.НеиспОтпускДни = 0 Тогда
		РасчетСтруктура.ИтогоНачисленоСумма = Окр(РасчетСтруктура.ДниОтпуск * РасчетСтруктура.РасчетнаяСумма,2)
		                                    + Окр(РасчетСтруктура.ДниДополнительныйОтпуск * РасчетСтруктура.РасчетнаяСумма,2);
	Иначе
		РасчетСтруктура.ИтогоНачисленоСумма = Окр(РасчетСтруктура.НеиспОтпускДни * (РасчетСтруктура.РасчетнаяСумма),2);
	КонецЕсли;
	
	Возврат РасчетСтруктура;
	                                                 
КонецФункции                  

&НаКлиенте
Процедура РасчетныеДанныеПовышениеЗПКоэффициентПриИзменении(Элемент)        
	
	ТекущиеДанные = Элементы.РасчетныеДанные.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;            
	
	Если ТекущиеДанные.ПовышениеЗПКоэффициент = 0 Тогда
		ТекущиеДанные.ПовышениеЗПСуммаИндексации = 0;
		Возврат;	
	КонецЕсли;         
	
	ПараметрыСтруктура = Новый Структура;
	ПараметрыСтруктура.Вставить("Месяц");     
	ПараметрыСтруктура.Вставить("ПовышениеЗПКоэффициент");
	ЗаполнитьЗначенияСвойств(ПараметрыСтруктура,ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Заполнить значения коэффициента прошлых периодов?'");
	Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьЗначениеКоэффициентовЗавершение", ЭтотОбъект, ПараметрыСтруктура);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
                                          
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьЗначениеКоэффициентовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
    	РасчетныеДанныеПовышениеЗПКоэффициентПриИзмененииНаСервере(ДополнительныеПараметры.Месяц,ДополнительныеПараметры.ПовышениеЗПКоэффициент);    
	КонецЕсли;    
	
	РасчетныеДанныеИтогиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РасчетныеДанныеПовышениеЗПКоэффициентПриИзмененииНаСервере(Месяц,ПовышениеЗПКоэффициент)
	
	Для каждого РасчетныеДанныеСтрока Из Объект.РасчетныеДанные Цикл
		
		Если РасчетныеДанныеСтрока.Месяц < Месяц Тогда

			Если Не ЗначениеЗаполнено(РасчетныеДанныеСтрока.ПовышениеЗПКоэффициент) Тогда
				РасчетныеДанныеСтрока.ПовышениеЗПКоэффициент = ПовышениеЗПКоэффициент;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти	                        

#Область о // Заполнить данные из кадров:

&НаКлиенте
Процедура ЗаполнитьДанныеИзКадров(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидРасчета) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Внимание! Для заполнения данных необходимо выбрать вид расчета.");
		Возврат;
	КонецЕсли;  

	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Внимание! Для заполнения данных необходимо выбрать сотрудника.");
		Возврат;
	КонецЕсли;  

	ЗначениеОтбора = Новый Структура; 
	ЗначениеОтбора.Вставить("Проведен",Истина);
	ЗначениеОтбора.Вставить("Сотрудник", Объект.Сотрудник);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор",ЗначениеОтбора);
	
	Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованиеЗавершение",ЭтотОбъект);
	
	ФормаВыбора = ПолучитьФормуВыбораПоВидуРасчета(Объект.ВидРасчета);
	ОткрытьФорму(ФормаВыбора, 
		ПараметрыОткрытия,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры 

&НаКлиенте
Процедура ВыборДокументаОснованиеЗавершение(Знач РезультатРедактирования, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатРедактирования) Тогда
		
		ЗаполнениеДаннымиНаСервере(РезультатРедактирования);	
		инкЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.МесяцНачисления", "мМесяцНачисленияСтрокой", 0, Модифицированность);
		ЗаполнитьРасчетныеДанныеНаСервере(Истина);	   
		
		ОтпускСПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ЗаполнениеДаннымиНаСервере(ДанныеЗаполнения)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьДокументНаОснованииДанных(ДанныеЗаполнения);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФормуВыбораПоВидуРасчета(ВидРасчета)
	
	ФормаВыбора = "Документ.инкПриказНаОтпуск.ФормаВыбора";
	Если ВидРасчета <> Перечисления.инкВидРасчетаОтпуска.Отпуск Тогда
		ФормаВыбора = "Документ.инкПриказВКомандировку.ФормаВыбора";	
	КонецЕсли;  
	
	Возврат ФормаВыбора;
	
КонецФункции

#КонецОбласти

#Область о // Печать:

&НаКлиенте
Процедура ПечатьДокумента(Команда)
	
	ЭтотОбъект.Записать();
	ТабличныйДокумент = ПолучитьТабличныйДокументПечатьОтпускРасчетПоСреднему();
	инкОтчетыКлиент.ПечатьТабличногоДокумента(ТабличныйДокумент,"",ЭтаФорма);
	
КонецПроцедуры   

&НаКлиенте
Процедура ПечатьТ60(Команда)
	
	ЭтотОбъект.Записать();
	ТабличныйДокумент = ПолучитьТабличныйДокументТ60();
	инкОтчетыКлиент.ПечатьТабличногоДокумента(ТабличныйДокумент,"",ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокументТ60()
	
	МенеджерПечати = Обработки.инкПечатьОтпускРасчетПоСреднему.Создать();
	Возврат МенеджерПечати.ПолучитьПечатныйДокументНаСервере(Объект,"Т60");

КонецФункции

&НаСервере
Функция ПолучитьТабличныйДокументПечатьОтпускРасчетПоСреднему()

	МенеджерПечати = Обработки.инкПечатьОтпускРасчетПоСреднему.Создать();
	Возврат МенеджерПечати.ПолучитьПечатныйДокументНаСервере(Объект);

КонецФункции

#КонецОбласти 

#КонецОбласти
