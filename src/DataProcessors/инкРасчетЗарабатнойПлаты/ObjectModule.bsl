
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

// Параметры:
//	ДанныеНачисленияЗарплаты - объект, описывающий документ начисления зарплаты и 
//  содержащий следующий минимальный набор полей. См. процедуру Инициализация.
//		ОбъектНачисленияЗарплаты
//		МесяцНачисления
//		Организация
//		Подразделение
//		Начисления - коллекция со списком начисления, со следующим 
//		минимальным набором полей:
//			Сотрудник
//			Подразделение
//			Начисление
//			Результат
//			ОтработаноДней
//			ОтработаноЧасов
//		Удержания и иные коллекции, содержащие данные начисления зарплаты, 
//		которые могут быть разными в зависимости от реализации документа начисления.
//
//	Сотрудники	- массив, индивидуальный расчет по сотрудникам.
//  булСортировкаПоСотрудникам - булево, сортировать табличную часть Сотрудники.
//	булПерерасчет - булево, перерасчет документа (существующие записи обновляются),
//  				в противном случае документ перезаполняется по-умолчанию.

Перем ДанныеНачисленияЗарплаты Экспорт; // Структура - Состав структуры см. описание в модуле объекта;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область о //Регистрация обработки:

// Функция - Сведения о внешней обработке
// 
// Возвращаемое значение:
//  Структура - Регистрационные данные;
//
Функция СведенияОВнешнейОбработке() Экспорт
    
    ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
    Синоним = ЭтотОбъект.Метаданные().Синоним; 
    Синоним = ?(ЗначениеЗаполнено(Синоним),Синоним, ИмяОтчета);         
    РегистрационныеДанные = Новый Структура;
    РегистрационныеДанные.Вставить("Вид","ЗаполнениеОбъекта"); //может быть – ПечатнаяФорма, ЗаполнениеОбъекта (для вн.обработки), ДополнительныйОтчет, СозданиеСвязанныхОбъектов… 
    РегистрационныеДанные.Вставить("Наименование", Синоним); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
    РегистрационныеДанные.Вставить("Версия", "1.2");
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
    РегистрационныеДанные.Вставить("Информация", "Отчет "+Синоним); //так будет выглядеть описание вн.отчета для пользователя
	//
	
    ТаблицаКоманд = ПолучитьТаблицуКоманд();
    
    // Добавим команду в таблицу
    ДобавитьКоманду(ТаблицаКоманд, Синоним, "СформироватьОтчет" , "ОткрытиеФормы", Истина, );
        
    // Сохраним таблицу команд в параметры регистрации обработки
    РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
    
    Возврат РегистрационныеДанные;
                                       
КонецФункции

Функция ПолучитьТаблицуКоманд()
    
    // Создадим пустую таблицу команд и колонки в ней
    Команды = Новый ТаблицаЗначений;

    // Как будет выглядеть описание печатной формы для пользователя
    Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 

    // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
    Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));

    // Тут задается, как должна вызваться команда обработки
    // Возможные варианты:
    // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, 
	// которое должна будет открыть система
    // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
    // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
    Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));

    // Следующий параметр указывает, необходимо ли показывать оповещение при начале и 
	// завершению работы обработки. Не имеет смысла при открытии формы
    Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));

    // Для печатной формы должен содержать строку ПечатьMXL 
    Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
    Возврат Команды;
   
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ОткрытиеФормы", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
    
    // Добавляем команду в таблицу команд по переданному описанию.
    // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
    НоваяКоманда = ТаблицаКоманд.Добавить();
    НоваяКоманда.Представление = Представление;
    НоваяКоманда.Идентификатор = Идентификатор;
    НоваяКоманда.Использование = Использование;
    НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
    НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры 

#КонецОбласти

#Область о // Инициализация:

// Процедура - Инициализация
//
// Параметры:
//  Объект	 - Объект	 - Документ объект "Начисление заработной платы";
//
Процедура Инициализация(Объект) Экспорт
	
	ДанныеНачисленияЗарплаты = Новый Структура;
	
	ДанныеНачисленияЗарплаты.Вставить("ОбъектНачисленияЗарплаты",Объект);
	ДанныеНачисленияЗарплаты.Вставить("Подразделение",Объект.Подразделение);
	ДанныеНачисленияЗарплаты.Вставить("Организация",Объект.Организация);
	ДанныеНачисленияЗарплаты.Вставить("МесяцНачисления",Объект.МесяцНачисления);
	ДанныеНачисленияЗарплаты.Вставить("Сотрудники",Новый Массив);
	ДанныеНачисленияЗарплаты.Вставить("булСортировкаПоСотрудникам",Истина);
	ДанныеНачисленияЗарплаты.Вставить("булПерерасчет",Ложь);
	ДанныеНачисленияЗарплаты.Вставить("ВыводитьСлужебныеСообщения",Ложь);
	ДанныеНачисленияЗарплаты.Вставить("ОплатаАванса",Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Расчет налога по сотрудникам:
     
// Расчет вычетов (скидки) за исключением стандартных:
Процедура РасчетВычетов(ДанныеНачисленияЗарплаты)
	
	ВычетыНДФЛТаблица = ДанныеНачисленияЗарплаты.ВычетыНДФЛТаблица;
	
	Для каждого СотрудникСтрока из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		стрПоиск = Новый Структура("Сотрудник",СотрудникСтрока);
		ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(стрПоиск); 
		Для каждого ПрочиеНачисленияСтрока из ПрочиеНачисленияМассив Цикл
			
			Если Не ПрочиеНачисленияСтрока.Начисление.Налог Тогда 
				Продолжить;
			КонецЕсли;
			
			ВычетНДФЛ = ПрочиеНачисленияСтрока.Начисление.ВычетНДФЛ;
				
			Если Не ЗначениеЗаполнено(ВычетНДФЛ) Тогда
				Продолжить;
			КонецЕсли;
			
			стрПоискВычета = Новый Структура;	
			стрПоискВычета.Вставить("Сотрудник",СотрудникСтрока);
			стрПоискВычета.Вставить("ВычетНДФЛ",ВычетНДФЛ);
			
			чСуммаВычета = ВычетНДФЛ.СуммаВычета;
			Если чСуммаВычета > 0 Тогда
				
				массВычетыНДФЛ = ВычетыНДФЛТаблица.НайтиСтроки(стрПоискВычета); 
				чСуммаУчтенногоВычета = 0;
				Для каждого элВычетыНДФЛ из массВычетыНДФЛ Цикл
					чСуммаУчтенногоВычета = чСуммаУчтенногоВычета + элВычетыНДФЛ.СуммаВычета;
				КонецЦикла;
				
				чСуммаВычета = чСуммаВычета - чСуммаУчтенногоВычета;
				
				Если чСуммаВычета > ПрочиеНачисленияСтрока.СуммаНачисления Тогда
					чСуммаВычета = ПрочиеНачисленияСтрока.СуммаНачисления;
				КонецЕсли;
				
			КонецЕсли;
			
			Если чСуммаВычета > 0 Тогда
				
				ПрочиеНачисленияСтрока.ВычетНДФЛ 	= ВычетНДФЛ;
				ПрочиеНачисленияСтрока.СуммаВычета	= чСуммаВычета;
				
				ВычетыНДФЛСтрока = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ВычетыНДФЛ.Добавить();
				ВычетыНДФЛСтрока.Сотрудник = ПрочиеНачисленияСтрока.Сотрудник;
				ВычетыНДФЛСтрока.Подразделение = ПрочиеНачисленияСтрока.Подразделение;    
				ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = ВычетНДФЛ.ГруппаВычетаНДФЛ;
				ВычетыНДФЛСтрока.ВычетНДФЛ = ВычетНДФЛ;
				ВычетыНДФЛСтрока.СуммаВычета = чСуммаВычета;
				
			КонецЕсли;
					
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВычетыСотрудника(ДанныеНачисленияЗарплаты,Сотрудник)
	
	ВычетыТаблица = Новый ТаблицаЗначений;
	ВычетыТаблица.Колонки.Добавить("ВычетНДФЛ");
	ВычетыТаблица.Колонки.Добавить("ГруппаВычетаНДФЛ");
	ВычетыТаблица.Колонки.Добавить("НетОграниченийПоНалоговйБазе");
	ВычетыТаблица.Колонки.Добавить("ДействуетС");
	ВычетыТаблица.Колонки.Добавить("ДействуетПо");
	ВычетыТаблица.Колонки.Добавить("СуммаВычета");
	
	// Полученные ранее:
	Для каждого ВычетСтрока из Сотрудник.НалоговыеВычеты Цикл
		
		МесяцНачисления = ДанныеНачисленияЗарплаты.МесяцНачисления;
		ДействуетС = НачалоМесяца(ВычетСтрока.ДействуетС);
		ДействуетПо = ВычетСтрока.ДействуетПо; 
		Если Не ЗначениеЗаполнено(ДействуетС) Тогда
			ДействуетС = НачалоГода(МесяцНачисления);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДействуетПо) Тогда
			ДействуетПо = КонецМесяца(МесяцНачисления);
		КонецЕсли;
		
		Если (ДействуетС <= МесяцНачисления) И (ДействуетПо >= МесяцНачисления) Тогда
			
			ВычетыСтрока = ВычетыТаблица.Добавить();
			ВычетыСтрока.ВычетНДФЛ			= ВычетСтрока.ВычетНДФЛ;
			ВычетыСтрока.ГруппаВычетаНДФЛ   = ВычетСтрока.ВычетНДФЛ.ГруппаВычетаНДФЛ;
			ВычетыСтрока.НетОграниченийПоНалоговйБазе = ВычетСтрока.ВычетНДФЛ.НетОграниченийПоНалоговйБазе; 
			ВычетыСтрока.ДействуетС	 		= ДействуетС;
			ВычетыСтрока.ДействуетПо		= ДействуетПо;
			ВычетыСтрока.СуммаВычета		= ВычетСтрока.ВычетНДФЛ.СуммаВычета;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВычетыТаблица;
	
КонецФункции

Функция ПолучитьОблагаемыйДоход(ПоискСотрудник,ДанныеНачисленияЗарплаты)
	
	ОблагаемыйСуммаДохода = 0;
	
	НДФЛМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.НДФЛ.НайтиСтроки(ПоискСотрудник);
	Для каждого НДФЛСтрока из НДФЛМассив Цикл
		ОблагаемыйСуммаДохода = ОблагаемыйСуммаДохода 
		                      + НДФЛСтрока.ОблагаемыйДоходСНачалаГода;
	КонецЦикла;
	
	Возврат ОблагаемыйСуммаДохода;
	
КонецФункции

Функция ПолучитьПревышениеОблагаемойБазы(ДанныеНачисленияЗарплаты,ВычетСтрока,ОблагаемыйСуммаДохода)
	
	ПревышениеОблагаемойБазы = Ложь;
	
	Если Не ВычетСтрока.НетОграниченийПоНалоговйБазе Тогда
		
		МаксимальнаяСумма = 0; 
		Если ВычетСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.СтандартныеНаДетей Тогда 
			МаксимальнаяСумма = ДанныеНачисленияЗарплаты.МаксимальнаяСуммаНаДетей; 	
		КонецЕсли;
		
		Если (МаксимальнаяСумма > 0) И (ОблагаемыйСуммаДохода > МаксимальнаяСумма) Тогда
			ПревышениеОблагаемойБазы = Истина;			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ПревышениеОблагаемойБазы;
	
КонецФункции

// Расчет стандартных вычетов:
Процедура РасчетСтандартныхНалоговыхВычетов(ДанныеНачисленияЗарплаты)
	
	ВычетыНДФЛТаблица 		= ДанныеНачисленияЗарплаты.ВычетыНДФЛТаблица;
	
	Для каждого СотрудникЭлемент из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		стрПоиск = Новый Структура("Сотрудник",СотрудникЭлемент);
		ВедомостьТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(стрПоиск);
		
		Для каждого СотрудникСтрока из ВедомостьТаблица Цикл
			
			Если СотрудникСтрока.ОблагаемыйДоходЗаМесяц <= 0 Тогда			
				Продолжить;
			КонецЕсли;
			
			СтандартныеВычетыСотрудника = ПолучитьВычетыСотрудника(ДанныеНачисленияЗарплаты,СотрудникЭлемент);
			ОблагаемыйСуммаДохода 		= ПолучитьОблагаемыйДоход(стрПоиск,ДанныеНачисленияЗарплаты);
			 
			Для каждого ВычетСтрока из СтандартныеВычетыСотрудника Цикл
				
				// Предельные суммы для вычетов:
				ПревышениеОблагаемойБазы = ПолучитьПревышениеОблагаемойБазы(ДанныеНачисленияЗарплаты,ВычетСтрока,ОблагаемыйСуммаДохода);
				Если ПревышениеОблагаемойБазы Тогда
					Продолжить;
				КонецЕсли;
				
				ПоискПредоставленныхВычетов = Новый Структура;			
				ПоискПредоставленныхВычетов.Вставить("Сотрудник",СотрудникЭлемент);
				ПоискПредоставленныхВычетов.Вставить("ВычетНДФЛ",ВычетСтрока.ВычетНДФЛ);
				
				ВычетыНДФЛМассив = ВычетыНДФЛТаблица.НайтиСтроки(ПоискПредоставленныхВычетов);
				
				ВычетФактСумма = 0;
				Для каждого ВычетыНДФЛЭлемент Из ВычетыНДФЛМассив Цикл
					ВычетФактСумма = ВычетФактСумма + ВычетыНДФЛЭлемент.СуммаВычета;
				КонецЦикла;
				
				ВычетПланСумма = 0;
				//ТекущийПериод	  = НачалоГода(ТекущаяДата());
				ТекущийПериод	  = НачалоГода(ДанныеНачисленияЗарплаты.МесяцНачисления);
				МесяцНачисленияЧисло = Месяц(ДанныеНачисленияЗарплаты.МесяцНачисления);
				Для МесяцНачисления = 1 По МесяцНачисленияЧисло Цикл
					Если (ТекущийПериод >= ВычетСтрока.ДействуетС) И (ТекущийПериод <= ВычетСтрока.ДействуетПо) Тогда
						ВычетПланСумма = ВычетПланСумма + ВычетСтрока.ВычетНДФЛ.СуммаВычета;
					КонецЕсли;   
					
					ТекущийПериод	  = ДобавитьМесяц(ТекущийПериод,1);
					
				КонецЦикла;
				
				ВычетЗаМесяцСумма 	= ВычетПланСумма - ВычетФактСумма;
				
				Если ВычетЗаМесяцСумма > 0 Тогда
					стрВычеты 					= ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ВычетыНДФЛ.Добавить();
					стрВычеты.Сотрудник 		= СотрудникЭлемент;
					стрВычеты.Подразделение		= СотрудникСтрока.Подразделение;	
					стрВычеты.ГруппаВычетаНДФЛ	= ВычетСтрока.ВычетНДФЛ.ГруппаВычетаНДФЛ;
					стрВычеты.ВычетНДФЛ			= ВычетСтрока.ВычетНДФЛ;
					стрВычеты.СуммаВычета		= ВычетЗаМесяцСумма;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьИмущественныйВычетПоСотруднику(ДанныеНачисленияЗарплаты,Сотрудник)
	
	ИмущественныйВычет = 0; 
	ИмущественныйВычетСумма = Сотрудник.ИмущественныйВычетСумма;
	
	// Предоставляется ли имущественный вычет в данном периоде:
	Если ИмущественныйВычетСумма<>0 Тогда 
		
		МесяцНачисления = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.МесяцНачисления;
		ИмущественныйВычетДатаВыдачи = Сотрудник.ИмущественныйВычетДатаВыдачи; 
		Если Не ЗначениеЗаполнено(ИмущественныйВычетДатаВыдачи) Тогда
			ИмущественныйВычетДатаВыдачи = МесяцНачисления;			
		КонецЕсли;
		
		Если НачалоМесяца(ИмущественныйВычетДатаВыдачи) <= НачалоМесяца(МесяцНачисления) Тогда
			ИмущественныйВычет = ИмущественныйВычетСумма;
		КонецЕсли;
	
	КонецЕсли; 
	
	Возврат ИмущественныйВычет;
	
КонецФункции

// Расчет имущественного вычета:
Процедура РасчетИмущественногоВычета(ДанныеНачисленияЗарплаты)
	
	ВычетыНДФЛТаблица = ДанныеНачисленияЗарплаты.ВычетыНДФЛТаблица;
	
	Для каждого СотрудникЭлемент из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		стрПоиск = Новый Структура("Сотрудник",СотрудникЭлемент);
		ВедомостьТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(стрПоиск);
		
		Для каждого СотрудникСтрока из ВедомостьТаблица Цикл
		
			ПоискСотрудника = Новый Структура("Сотрудник",СотрудникЭлемент);
			
			ПоискВычета = Новый Структура;
			ПоискВычета.Вставить("Сотрудник",СотрудникЭлемент);
			ПоискВычета.Вставить("ГруппаВычетаНДФЛ",Перечисления.инкГруппыВычетовПоНДФЛ.Имущественные);

			ИмущественныйВычетСотрудника = ПолучитьИмущественныйВычетПоСотруднику(ДанныеНачисленияЗарплаты,СотрудникЭлемент);
			Если ИмущественныйВычетСотрудника <> 0 Тогда  
				
				//ПодразделениеСотрудника     = ПолучитьПодразделениеСотрудника(ДанныеНачисленияЗарплаты,СотрудникЭлемент);
				
				ПредоствленныйРанееВычет = 0;
				ИмущественныйВычетМассив  = ВычетыНДФЛТаблица.НайтиСтроки(ПоискВычета);
				Для каждого ИмущественныйВычетСтрока из ИмущественныйВычетМассив Цикл
					ПредоствленныйРанееВычет = ПредоствленныйРанееВычет + ИмущественныйВычетСтрока.СуммаВычета;
				КонецЦикла;

				Если ИмущественныйВычетСотрудника <= ПредоствленныйРанееВычет Тогда
					Продолжить;
				КонецЕсли;
				
				// Облагаемый доход:
				ОблагаемыйДоходЗаМесяц	= 0;
				ОблагаемыйДоход 		= 0;
				НДФЛТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.НДФЛ;
				НДФЛМассив  = НДФЛТаблица.НайтиСтроки(ПоискСотрудника);
				Для каждого НдфлСтрока из НДФЛМассив Цикл
					ОблагаемыйДоходЗаМесяц = ОблагаемыйДоходЗаМесяц 
					                       + НдфлСтрока.ОблагаемыйДоходЗаМесяц;
					ОблагаемыйДоход = ОблагаемыйДоход
					                + НдфлСтрока.ОблагаемыйДоходСНачалаГода;
				КонецЦикла;

				// Налоговые вычеты за месяц (за исключением имущественных):
				НалоговыеВычетыЗаМесяц = 0;
				ВычетыНДФЛТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ВычетыНДФЛ;
				ВычетыНДФЛМассив  = ВычетыНДФЛТаблица.НайтиСтроки(ПоискСотрудника);
				Для каждого ВычетыНДФЛСтрока из ВычетыНДФЛМассив Цикл
					Если ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ <> Перечисления.инкГруппыВычетовПоНДФЛ.Имущественные Тогда
						НалоговыеВычетыЗаМесяц = НалоговыеВычетыЗаМесяц + ВычетыНДФЛСтрока.СуммаВычета;
					КонецЕсли;
				КонецЦикла;
				
				// Налоговые вычеты с начала года (за исключением имущественных):
				НалоговыеВычеты = НалоговыеВычетыЗаМесяц;
				ВычетыНДФЛТаблица = ДанныеНачисленияЗарплаты.ВычетыНДФЛТаблица;
				ВычетыНДФЛМассив  = ВычетыНДФЛТаблица.НайтиСтроки(ПоискСотрудника);
				Для каждого ВычетыНДФЛСтрока из ВычетыНДФЛМассив Цикл
					Если ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ <> Перечисления.инкГруппыВычетовПоНДФЛ.Имущественные Тогда
						НалоговыеВычеты = НалоговыеВычеты + ВычетыНДФЛСтрока.СуммаВычета;
					КонецЕсли;
				КонецЦикла;
				
				ИмущественныйВычетРасчет = ОблагаемыйДоход - НалоговыеВычеты; 
				Если (ИмущественныйВычетРасчет+ПредоствленныйРанееВычет) > ИмущественныйВычетСотрудника Тогда
					ИмущественныйВычетРасчет = ИмущественныйВычетСотрудника
					                         - ПредоствленныйРанееВычет; 
				КонецЕсли;

				ИмущесвтенныйВычетЗаМесяц = ОблагаемыйДоходЗаМесяц - НалоговыеВычетыЗаМесяц; 
				Если ИмущесвтенныйВычетЗаМесяц > ИмущественныйВычетРасчет Тогда
					ИмущесвтенныйВычетЗаМесяц = ИмущественныйВычетРасчет;
				КонецЕсли;
				
				Если ИмущесвтенныйВычетЗаМесяц > 0 Тогда
					
					Вычеты 						= ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ВычетыНДФЛ.Добавить();
					Вычеты.Сотрудник 			= СотрудникЭлемент;
					Вычеты.Подразделение		= СотрудникСтрока.Подразделение;
					Вычеты.ГруппаВычетаНДФЛ		= Перечисления.инкГруппыВычетовПоНДФЛ.Имущественные;
					Вычеты.ВычетНДФЛ			= СотрудникЭлемент.ИмущественныйВычетКодВычета;
					Вычеты.СуммаВычета			= ИмущесвтенныйВычетЗаМесяц;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;    
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВычетыНДФЛ_Заполнение(ДанныеНачисленияЗарплаты)
	
	ОчиститьТабличнуюЧастьОбъекта("ВычетыНДФЛ",ДанныеНачисленияЗарплаты);
	
	РасчетВычетов(ДанныеНачисленияЗарплаты);
	РасчетСтандартныхНалоговыхВычетов(ДанныеНачисленияЗарплаты);
	РасчетИмущественногоВычета(ДанныеНачисленияЗарплаты);

КонецПроцедуры

Процедура НДФЛ_Заполнение(ДанныеНачисленияЗарплаты)
	
	ОчиститьТабличнуюЧастьОбъекта("НДФЛ",ДанныеНачисленияЗарплаты);
	
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
				
		стрПоиск = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(стрПоиск);
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл
			
			НДФЛСтрока = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НДФЛСтрока,ВедомостьСтрока);
			
			ПоискСотрудника = Новый Структура("Сотрудник",НДФЛСтрока.Сотрудник);
			
			// Облагаемый доход за месяц:
			НДФЛСтрока.ОблагаемыйДоходЗаМесяц = 0;
			//		ведомости:
			ВедомостьТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость;
			ВедомостьМассив = ВедомостьТаблица.НайтиСтроки(ПоискСотрудника); 
			Для каждого ВедомостьСтрока из ВедомостьМассив Цикл
				НДФЛСтрока.ОблагаемыйДоходЗаМесяц = НДФЛСтрока.ОблагаемыйДоходЗаМесяц
				                                  + ВедомостьСтрока.Оклад
												  + ВедомостьСтрока.РайонныйКоэффициент
												  + ВедомостьСтрока.СевернаяНадбавка;
			КонецЦикла;

			//		прочие начисления:		
			ПрочиеНачисленияТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления;
			ПрочиеНачисленияМассив  = ПрочиеНачисленияТаблица.НайтиСтроки(ПоискСотрудника);
			Для каждого ПрочиеНачисленияСтрока из ПрочиеНачисленияМассив Цикл
				Если ПрочиеНачисленияСтрока.Начисление.Налог Тогда 
					НДФЛСтрока.ОблагаемыйДоходЗаМесяц = НДФЛСтрока.ОблагаемыйДоходЗаМесяц
				                                      + ПрочиеНачисленияСтрока.СуммаНачисления;
				КонецЕсли;
			КонецЦикла;
			
			// Облагаемый доход с начала года:
			НДФЛСтрока.ОблагаемыйДоходСНачалаГода = НДФЛСтрока.ОблагаемыйДоходЗаМесяц;
			ОблагаемыйДоходТаблица = ДанныеНачисленияЗарплаты.ОблагаемыйДоходТаблица;
			ОблагаемыйДоходМассив = ОблагаемыйДоходТаблица.НайтиСтроки(ПоискСотрудника);
			Для каждого ОблагаемыйДоходСтрока из ОблагаемыйДоходМассив Цикл
				НДФЛСтрока.ОблагаемыйДоходСНачалаГода = НДФЛСтрока.ОблагаемыйДоходСНачалаГода
				                                      + ОблагаемыйДоходСтрока.СуммаДохода;
			КонецЦикла;   
			
			Для каждого ВедомостьСтрока Из ВедомостьМассив Цикл
				ВедомостьСтрока.ОблагаемыйДоходЗаМесяц     = НДФЛСтрока.ОблагаемыйДоходЗаМесяц;
				ВедомостьСтрока.ОблагаемыйДоходСНачалаГода = НДФЛСтрока.ОблагаемыйДоходСНачалаГода;
			КонецЦикла;
			
			Если НДФЛСтрока.ОблагаемыйДоходЗаМесяц <= 0 Тогда
				ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.НДФЛ.Удалить(НДФЛСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	   
КонецПроцедуры

Процедура НДФЛ_Расчет(ДанныеНачисленияЗарплаты)

	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		НДФЛМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.НДФЛ.НайтиСтроки(ПоискСотрудника); 
 	
		Для каждого НДФЛСтрока из НДФЛМассив Цикл
			
			// Налоговые вычеты за месяц:
			НДФЛСтрока.СоциальныеВычетыЗаМесяц = 0;
		    НДФЛСтрока.СтандартныеВычетыНаРаботникаЗаМесяц = 0;
			НДФЛСтрока.СтандартныеВычетыНаДетейЗаМесяц = 0;
			НДФЛСтрока.ИмущественныйВычетЗаМесяц = 0;
			
			// Вычеты за исключением стандартных:
			ПрочиеНачисленияТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления;
			ПрочиеНачисленияМассив  = ПрочиеНачисленияТаблица.НайтиСтроки(ПоискСотрудника);
			Для каждого ПрочиеНачисленияСтрока из ПрочиеНачисленияМассив Цикл
				Если ПрочиеНачисленияСтрока.СуммаВычета <> 0 Тогда
					НДФЛСтрока.СоциальныеВычетыЗаМесяц = НДФЛСтрока.СоциальныеВычетыЗаМесяц 
					                                  + ПрочиеНачисленияСтрока.СуммаВычета;
				КонецЕсли;
			КонецЦикла;	
			
			// Другие вычеты:
			ВычетыНДФЛТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ВычетыНДФЛ;
			ВычетыНДФЛМассив  = ВычетыНДФЛТаблица.НайтиСтроки(ПоискСотрудника);
			Для каждого ВычетыНДФЛСтрока из ВычетыНДФЛМассив Цикл
				// Стандартные вычеты на работника:
				Если ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.Стандартные Тогда
					НДФЛСтрока.СтандартныеВычетыНаРаботникаЗаМесяц = НДФЛСтрока.СтандартныеВычетыНаРаботникаЗаМесяц
					                                               + ВычетыНДФЛСтрока.СуммаВычета; 
																   
				// Стандартные вычеты на детей:												   
				ИначеЕсли ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.СтандартныеНаДетей Тогда								
					НДФЛСтрока.СтандартныеВычетыНаДетейЗаМесяц = НДФЛСтрока.СтандартныеВычетыНаДетейЗаМесяц
					                                           + ВычетыНДФЛСтрока.СуммаВычета;
															   
				// Имущественный вычет											   
				ИначеЕсли ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.Имущественные Тогда
		 			НДФЛСтрока.ИмущественныйВычетЗаМесяц = НДФЛСтрока.ИмущественныйВычетЗаМесяц
					                                     + ВычетыНДФЛСтрока.СуммаВычета;
				КонецЕсли;
												  
			КонецЦикла;
			
			// Налоговые вычеты c начала года:
			НДФЛСтрока.СоциальныеВычетыСНачалаГода = НДФЛСтрока.СоциальныеВычетыЗаМесяц;
		    НДФЛСтрока.СтандартныеВычетыНаРаботникаСНачалаГода = НДФЛСтрока.СтандартныеВычетыНаРаботникаЗаМесяц;
			НДФЛСтрока.СтандартныеВычетыНаДетейСНачалаГода = НДФЛСтрока.СтандартныеВычетыНаДетейЗаМесяц;
			НДФЛСтрока.ИмущественныйВычетСНачалаГода = НДФЛСтрока.ИмущественныйВычетЗаМесяц;

			ВычетыНДФЛТаблица = ДанныеНачисленияЗарплаты.ВычетыНДФЛТаблица;
			ВычетыНДФЛМассив  = ВычетыНДФЛТаблица.НайтиСтроки(ПоискСотрудника);
			Для каждого ВычетыНДФЛСтрока из ВычетыНДФЛМассив Цикл
				// За исключением стандартных и имущественых:
				Если инкНалогСервер.НалоговыйВычетЗаИсключениемСтандартных(ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ) Тогда	 
					НДФЛСтрока.СоциальныеВычетыСНачалаГода = НДФЛСтрока.СоциальныеВычетыСНачалаГода
					               	                      + ВычетыНДФЛСтрока.СуммаВычета;
				// Стандартные вычеты на работника:
				ИначеЕсли ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.Стандартные Тогда
					НДФЛСтрока.СтандартныеВычетыНаРаботникаСНачалаГода = НДФЛСтрока.СтандартныеВычетыНаРаботникаСНачалаГода
					                                                   + ВычетыНДФЛСтрока.СуммаВычета; 
																   
				// Стандартные вычеты на детей:												   
				ИначеЕсли ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.СтандартныеНаДетей Тогда								
					НДФЛСтрока.СтандартныеВычетыНаДетейСНачалаГода = НДФЛСтрока.СтандартныеВычетыНаДетейСНачалаГода
					                                               + ВычетыНДФЛСтрока.СуммаВычета;
															   
				// Имущественный вычет											   
				ИначеЕсли ВычетыНДФЛСтрока.ГруппаВычетаНДФЛ = Перечисления.инкГруппыВычетовПоНДФЛ.Имущественные Тогда
		 			НДФЛСтрока.ИмущественныйВычетСНачалаГода = НДФЛСтрока.ИмущественныйВычетСНачалаГода
					                                         + ВычетыНДФЛСтрока.СуммаВычета;
				КонецЕсли;
												  
			КонецЦикла;

			// Налог удержанный с начала года:
			НДФЛСтрока.НалогУдержанныйСНачалаГода = 0;
			НалогУдержанныйТаблица = ДанныеНачисленияЗарплаты.НалогУдержанныйТаблица;
			НалогУдержанныйМассив  = НалогУдержанныйТаблица.НайтиСтроки(ПоискСотрудника);
			Для каждого НалогУдержанныйСтрока из НалогУдержанныйМассив Цикл
				НДФЛСтрока.НалогУдержанныйСНачалаГода = НДФЛСтрока.НалогУдержанныйСНачалаГода
					                                  + НалогУдержанныйСтрока.СуммаНалога;
			КонецЦикла;
			
			// Процент налога и налоговая ставка: 		
			НДФЛСтрока.НалоговаяСтавка = инкНалогСервер.ПолучитьНалоговуюСтавкуСотрудника(НДФЛСтрока.Сотрудник);
			НДФЛСтрока.ПроцентНалога   = инкНалогСервер.ПолучитьПроцентПоНалоговойСтавке(НДФЛСтрока.НалоговаяСтавка);
			//
			
			НДФЛСтрока.НалоговаяБазаЗаМесяц  	 = НДФЛСтрока.ОблагаемыйДоходЗаМесяц
												 - НДФЛСтрока.СоциальныеВычетыЗаМесяц
												 - НДФЛСтрока.СтандартныеВычетыНаРаботникаЗаМесяц
												 - НДФЛСтрока.СтандартныеВычетыНаДетейЗаМесяц
												 - НДФЛСтрока.ИмущественныйВычетЗаМесяц;
												 
			Если НДФЛСтрока.НалоговаяБазаЗаМесяц < 0 Тогда
				НДФЛСтрока.НалоговаяБазаЗаМесяц = 0;
			КонецЕсли;
			
			НДФЛСтрока.НалоговаяБазаСНачалаГода  = НДФЛСтрока.ОблагаемыйДоходСНачалаГода
												 - НДФЛСтрока.СоциальныеВычетыСНачалаГода
												 - НДФЛСтрока.СтандартныеВычетыНаРаботникаСНачалаГода
												 - НДФЛСтрока.СтандартныеВычетыНаДетейСНачалаГода
												 - НДФЛСтрока.ИмущественныйВычетСНачалаГода;
												 
			Если НДФЛСтрока.НалоговаяБазаСНачалаГода < 0 Тогда
				НДФЛСтрока.НалоговаяБазаСНачалаГода = 0;
			КонецЕсли;
												 
			НДФЛСтрока.СуммаНалога = НДФЛСтрока.НалоговаяБазаСНачалаГода * НДФЛСтрока.ПроцентНалога
			                       - НДФЛСтрока.НалогУдержанныйСНачалаГода;					 
								   
			НДФЛСтрока.СуммаНалога = Окр(НДФЛСтрока.СуммаНалога);					   

		КонецЦикла;	 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область о // Загрузка данных для расчета зарплаты:

Процедура ЗагрузкаДанныхДляРасчетаЗарплаты(ДанныеНачисленияЗарплаты)
	
	ДанныеНачисленияЗарплаты.Вставить("Дата1",НачалоМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	ДанныеНачисленияЗарплаты.Вставить("Дата2",КонецМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	
	// Сотрудники:
	ДанныеНачисленияЗарплаты.Вставить("СотрудникиТаблица",Получить_Сотрудники(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("Сотрудники",ДанныеНачисленияЗарплаты.СотрудникиТаблица.ВыгрузитьКолонку("Сотрудник"));
	ДанныеНачисленияЗарплаты.Сотрудники = ПолучитьМассивСотрудников(ДанныеНачисленияЗарплаты);
	
	// НДФЛ:
	ДанныеНачисленияЗарплаты.Вставить("ВычетыНДФЛТаблица",Получить_ВычетыНДФЛ(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("НалогУдержанныйТаблица",Получить_НалогУдержанный(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("ОблагаемыйДоходТаблица",Получить_ОблагаемыйДоход(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("ВыбранныеСотрудники",Получить_ВыбранныеСотрудники(ДанныеНачисленияЗарплаты));
	
	ДанныеНачисленияЗарплаты.Вставить("ВидРасчетаДниЧасы",ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ВидРасчетаДниЧасы);
	
	Загрузить_СтандартныеВычетыНастройки(ДанныеНачисленияЗарплаты);
	
	// Кадровые данные для расчета ЗП:
	ДанныеНачисленияЗарплаты.Вставить("КадровыеДанные",инкКадровыйУчетСервер.ПолучитьКадровыеДанныеСотрудников(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("КадровыеДанныеНаКонецПериода",инкКадровыйУчетСервер.ПолучитьКадровыеДанныеСотрудников(ДанныеНачисленияЗарплаты,Ложь));
	ДанныеНачисленияЗарплаты.Вставить("КадровыеДанныеЗаПериод",инкКадровыйУчетСервер.ПолучитьКадровыеДанныеЗаПериод(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("ПроизводственныйКалендарьТаблица",инкПроизводственныйКалендарьСервер.ПолучитьДанныеПроизводственногоКалендаряЗаПериод(ДанныеНачисленияЗарплаты.Дата1,ДанныеНачисленияЗарплаты.Дата2));
	ДанныеНачисленияЗарплаты.Вставить("ТабельТаблица",инкТабельСервер.ПолучитьДанныеТабеляНаСервере(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("НормаВремениТаблица",инкУчетВремениСервер.ПолучитьНормаВремениТаблица(ДанныеНачисленияЗарплаты));
	ДанныеНачисленияЗарплаты.Вставить("ПериодыРасчетаКадровыхДанных",ПолучитьПериодыРасчетаКадровыхДанных(ДанныеНачисленияЗарплаты));
	
КонецПроцедуры	 

Функция ПолучитьПериодыРасчетаКадровыхДанных(ДанныеНачисленияЗарплаты)
	
	ПериодыРасчетаКадровыхДанных = ДанныеНачисленияЗарплаты.КадровыеДанные.СкопироватьКолонки();
	ПериодыРасчетаКадровыхДанных.Колонки.Добавить("ПериодДата1");
	ПериодыРасчетаКадровыхДанных.Колонки.Добавить("ПериодДата2");
	ПериодыРасчетаКадровыхДанных.Колонки.Добавить("ПериодРасчет");
	ПериодыРасчетаКадровыхДанных.Колонки.Добавить("ДниЧасыФакт");
	ПериодыРасчетаКадровыхДанных.Колонки.Добавить("ДниЧасы");
	ПериодыРасчетаКадровыхДанных.Колонки.Добавить("НормаВремениКоэффициент");
	
	// Первичное заполнение:
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		КадровыеДанныеМассив = ДанныеНачисленияЗарплаты.КадровыеДанные.НайтиСтроки(ПоискСотрудника);
		Если КадровыеДанныеМассив.Количество() = 0 Тогда
			КадровыеДанныеМассив = ДанныеНачисленияЗарплаты.КадровыеДанныеНаКонецПериода.НайтиСтроки(ПоискСотрудника);
		КонецЕсли;
		
		Для каждого КадровыеДанныеЭлемент Из КадровыеДанныеМассив Цикл
			
			// Базовый период:
			ПериодСтрока = ПериодыРасчетаКадровыхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(ПериодСтрока,КадровыеДанныеЭлемент);
			ПериодСтрока.ПериодДата1 = ДанныеНачисленияЗарплаты.Дата1;
			ПериодСтрока.ПериодДата2 = ДанныеНачисленияЗарплаты.Дата2;
			ПериодСтрока.ПериодРасчет = Ложь; 
			//
			ЗаполнитьДниЧасыИзВедомости(ПериодСтрока,ДанныеНачисленияЗарплаты);  
			//
			ПериодСтрока.НормаВремениКоэффициент = ПолучитьНормаВремениКоэффициент(ПериодСтрока);
			
			// Периоды с кадровыми данными:
			КалендраныеДниЗаПериод = ПолучитьНормуВремениЗаПериод(ДанныеНачисленияЗарплаты);           
			ПериодСтрока.ДниЧасы = КалендраныеДниЗаПериод;
			ПериодСтрока.ДниЧасыФакт = ПолучитьРабочиеДниИзТабеля(ПериодСтрока,ДанныеНачисленияЗарплаты);

			КадровыеДанныеЗаПериодМассив = ДанныеНачисленияЗарплаты.КадровыеДанныеЗаПериод.НайтиСтроки(ПоискСотрудника); 
			НаличиеКадровыхИзменений = Ложь;
			Для каждого КадровыеДанныеЗаПериодЭлемент Из КадровыеДанныеЗаПериодМассив Цикл
				
				Если КадровыеДанныеЗаПериодЭлемент.Период = ДанныеНачисленияЗарплаты.Дата1 ИЛИ		
					 НачалоМесяца(КадровыеДанныеЗаПериодЭлемент.ДатаПриемаНаРаботу) = НачалоМесяца(ДанныеНачисленияЗарплаты.Дата1)
				Тогда
					ЗаполнитьЗначенияСвойств(ПериодСтрока,КадровыеДанныеЗаПериодЭлемент);  
					Продолжить;	
				КонецЕсли;  
				
				// Предыдущий период:
				ПериодСтрока.ПериодРасчет = Истина;
				ПериодСтрока.ПериодДата2 = КадровыеДанныеЗаПериодЭлемент.Период - 1;
				ПериодСтрока.ДниЧасы = КалендраныеДниЗаПериод;
				ПериодСтрока.ДниЧасыФакт = ПолучитьРабочиеДниИзТабеля(ПериодСтрока,ДанныеНачисленияЗарплаты);
				ПериодСтрока.НормаВремениКоэффициент = ПолучитьНормаВремениКоэффициент(ПериодСтрока);

				// Текущий период:
				ПериодСтрока = ПериодыРасчетаКадровыхДанных.Добавить();
				ЗаполнитьЗначенияСвойств(ПериодСтрока,КадровыеДанныеЭлемент);   
				ЗаполнитьЗначенияСвойств(ПериодСтрока,КадровыеДанныеЗаПериодЭлемент);   
				ПериодСтрока.ПериодРасчет = Истина;
				ПериодСтрока.ПериодДата1 = КадровыеДанныеЗаПериодЭлемент.Период;
				ПериодСтрока.ПериодДата2 = ДанныеНачисленияЗарплаты.Дата2;
				ПериодСтрока.ДниЧасы = КалендраныеДниЗаПериод;
				ПериодСтрока.ДниЧасыФакт = ПолучитьРабочиеДниИзТабеля(ПериодСтрока,ДанныеНачисленияЗарплаты);
				ПериодСтрока.НормаВремениКоэффициент = ПолучитьНормаВремениКоэффициент(ПериодСтрока);
				
				НаличиеКадровыхИзменений = Истина;
				
			КонецЦикла;

			Если НаличиеКадровыхИзменений И  ДанныеНачисленияЗарплаты.ВыводитьСлужебныеСообщения Тогда
				инкОбщийКлиентСервер.СообщитьПользователю("Внимание! В данном периоде у сотрудника: " +
				                                          стрСотрудник +
														  " кадровые изменения, поэтому расчет нормы времени будет произведен автоматически.");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	 

	Возврат ПериодыРасчетаКадровыхДанных;
	
КонецФункции  

Функция ПолучитьНормуВремениЗаПериод(ДанныеНачисленияЗарплаты);
	
	НормаВремени = 0; 
	
	ПоискСтроки = Новый Структура("Месяц",ДанныеНачисленияЗарплаты.МесяцНачисления);
	НормаВремениМассив = ДанныеНачисленияЗарплаты.НормаВремениТаблица.НайтиСтроки(ПоискСтроки);
	Для каждого НормаВремениЭлемент Из НормаВремениМассив Цикл
		НормаВремени = НормаВремениЭлемент.РабочихДнейВМесяце;	
	КонецЦикла;
	
	Возврат НормаВремени;
	
КонецФункции

Процедура Загрузить_СтандартныеВычетыНастройки(ДанныеНачисленияЗарплаты)
	
	ДанныеНачисленияЗарплаты.Вставить("МаксимальнаяСуммаНаДетей",0);
	ДанныеНачисленияЗарплаты.Вставить("Мрот",0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкСтандартныеВычетыНастройкиСрезПоследних.Период КАК Период,
		|	инкСтандартныеВычетыНастройкиСрезПоследних.МаксимальнаяСуммаНаДетей КАК МаксимальнаяСуммаНаДетей,
		|	инкСтандартныеВычетыНастройкиСрезПоследних.Мрот КАК Мрот
		|ИЗ
		|	РегистрСведений.инкСтандартныеВычетыНастройки.СрезПоследних(&Дата1, ) КАК инкСтандартныеВычетыНастройкиСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата1", ДанныеНачисленияЗарплаты.МесяцНачисления);
	СтандартныеВычетыНастройки = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы из СтандартныеВычетыНастройки Цикл
		
		ДанныеНачисленияЗарплаты.МаксимальнаяСуммаНаДетей		= СтрокаТаблицы.МаксимальнаяСуммаНаДетей;
		ДанныеНачисленияЗарплаты.Мрот							= СтрокаТаблицы.Мрот;
		
	КонецЦикла;	
		
КонецПроцедуры

Процедура ЗаполнитьДниЧасыИзВедомости(ПериодСтрока,ДанныеНачисленияЗарплаты)
	
	ПериодСтрока.ДниЧасы		= 0;
	ПериодСтрока.ДниЧасыФакт	= 0;

	стрПоиск = Новый Структура("Сотрудник",ПериодСтрока.Сотрудник);
	ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(стрПоиск); 
	Если ВедомостьМассив.Количество() > 0 Тогда
		
		ВедомостьСтрока = ВедомостьМассив[0]; 
		
		ДниЧасыСтрока = "Часы";
		Если ДанныеНачисленияЗарплаты.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
			ДниЧасыСтрока = "Дни";	
		КонецЕсли;
        НормаСтрока = "";
		Если ВедомостьСтрока["Норма"+ДниЧасыСтрока+"Факт"] <> 0 Тогда
			НормаСтрока = "Норма";	                   
		КонецЕсли;
		
		ПериодСтрока.ДниЧасы = ВедомостьСтрока[НормаСтрока+ДниЧасыСтрока];
		ПериодСтрока.ДниЧасыФакт = ВедомостьСтрока[НормаСтрока+ДниЧасыСтрока+"Факт"];
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьНормаВремениКоэффициент(ПериодСтрока)
	
	НормаВремениКоэффициент = 0;
	
	Если ПериодСтрока.ДниЧасы <> 0 Тогда
		НормаВремениКоэффициент = ПериодСтрока.ДниЧасыФакт / ПериодСтрока.ДниЧасы;	
	КонецЕсли; 
	
	Возврат НормаВремениКоэффициент;

КонецФункции		
		
Функция ПолучитьРабочиеДниИзТабеля(ПериодСтрока,ДанныеНачисленияЗарплаты)
	
	РабочиеДни = 0;
	
	ДатаПериода = НачалоДня(ПериодСтрока.ПериодДата1);
	ДеньНачало = День(ПериодСтрока.ПериодДата1);
	ДеньКонец = День(ПериодСтрока.ПериодДата2);
	
	Для ТекущийДень = ДеньНачало По ДеньКонец Цикл
		
		ПоискДень = Новый Структура;
		ПоискДень.Вставить("Дата",ДатаПериода);
		ПоискДень.Вставить("Сотрудник",ПериодСтрока.Сотрудник);
		
		ТабельТаблицаМассив = ДанныеНачисленияЗарплаты.ТабельТаблица.НайтиСтроки(ПоискДень);
		Для каждого ДанныеДень Из ТабельТаблицаМассив Цикл
			
			Если ДанныеДень.ВДнях = "Я" Тогда
				РабочиеДни = РабочиеДни + 1;
			КонецЕсли;                      
			
		КонецЦикла;
		
		ДатаПериода = ДатаПериода + 60*60*24; 
		
	КонецЦикла;
	
	Возврат РабочиеДни;
	
КонецФункции	

Функция Получить_Сотрудники(ДанныеНачисленияЗарплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса_Сотрудники(ДанныеНачисленияЗарплаты); 
	
	Запрос.УстановитьПараметр("Организация", ДанныеНачисленияЗарплаты.Организация);
	Запрос.УстановитьПараметр("Подразделение", ДанныеНачисленияЗарплаты.Подразделение);
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудники", ДанныеНачисленияЗарплаты.Сотрудники);
	
	тз = Запрос.Выполнить().Выгрузить(); 
	
	Возврат тз;
	
КонецФункции

Функция ПолучитьМассивСотрудников(ДанныеНачисленияЗарплаты) 
	
	Сотрудники = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеНачисленияЗарплаты.Сотрудники) Тогда
		Для каждого СотрудникиСтрока из ДанныеНачисленияЗарплаты.СотрудникиТаблица Цикл
			Сотрудники.Добавить(СотрудникиСтрока.Сотрудник);
		КонецЦикла;
	Иначе
		Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники; 	
	КонецЕсли;
	
	Возврат Сотрудники; 
	
КонецФункции

Функция Получить_ВычетыНДФЛ(ДанныеНачисленияЗарплаты)

	Запрос = Новый Запрос; 
	
	// +++ Чесноков М.С. 2023-04-05 *№ 0000096    
	// Не понятно, для чего нам нужны суммы вычетов в начислениях. Пока код запроса оставляю в комментарии:
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	инкВычетыНДФЛОбороты.Период КАК Период,
	//               |	инкВычетыНДФЛОбороты.Сотрудник КАК Сотрудник,
	//               |	инкВычетыНДФЛОбороты.ГруппаВычетаНДФЛ КАК ГруппаВычетаНДФЛ,
	//               |	инкВычетыНДФЛОбороты.ВычетНДФЛ КАК ВычетНДФЛ,
	//               |	инкВычетыНДФЛОбороты.СуммаВычетаОборот КАК СуммаВычета
	//               |ПОМЕСТИТЬ втВычеты
	//               |ИЗ
	//               |	РегистрНакопления.инкВычетыНДФЛ.Обороты(
	//               |			&Дата1,
	//               |			&Дата2,
	//               |			Месяц,
	//               |			Сотрудник В (&Сотрудники)
	//               |				И ДокументОснование <> &ТекущийДокумент) КАК инкВычетыНДФЛОбороты
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	инкНачисленияОбороты.Период КАК Период,
	//               |	инкНачисленияОбороты.Сотрудник КАК Сотрудник,
	//               |	инкНачисленияОбороты.ВычетНДФЛ.ГруппаВычетаНДФЛ КАК ВычетНДФЛГруппаВычетаНДФЛ,
	//               |	инкНачисленияОбороты.ВычетНДФЛ КАК ВычетНДФЛ,
	//               |	инкНачисленияОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот
	//               |ПОМЕСТИТЬ втВычетыСкидкиНаДоходы
	//               |ИЗ
	//               |	РегистрНакопления.инкНачисления.Обороты(
	//               |			&Дата1,
	//               |			&Дата2,
	//               |			Месяц,
	//               |			Сотрудник В (&Сотрудники)
	//               |				И ДокументОснование <> &ТекущийДокумент) КАК инкНачисленияОбороты
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втВычеты.Период КАК Период,
	//               |	втВычеты.Сотрудник КАК Сотрудник,
	//               |	втВычеты.ГруппаВычетаНДФЛ КАК ГруппаВычетаНДФЛ,
	//               |	втВычеты.ВычетНДФЛ КАК ВычетНДФЛ,
	//               |	втВычеты.СуммаВычета КАК СуммаВычета
	//               |ПОМЕСТИТЬ втОбъединение
	//               |ИЗ
	//               |	втВычеты КАК втВычеты
	//               |
	//               |ОБЪЕДИНИТЬ ВСЕ
	//               |
	//               |ВЫБРАТЬ
	//               |	втВычетыСкидкиНаДоходы.Период,
	//               |	втВычетыСкидкиНаДоходы.Сотрудник,
	//               |	втВычетыСкидкиНаДоходы.ВычетНДФЛГруппаВычетаНДФЛ,
	//               |	втВычетыСкидкиНаДоходы.ВычетНДФЛ,
	//               |	втВычетыСкидкиНаДоходы.СуммаВычетаОборот
	//               |ИЗ
	//               |	втВычетыСкидкиНаДоходы КАК втВычетыСкидкиНаДоходы
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	втОбъединение.Период КАК Период,
	//               |	втОбъединение.Сотрудник КАК Сотрудник,
	//               |	втОбъединение.ГруппаВычетаНДФЛ КАК ГруппаВычетаНДФЛ,
	//               |	втОбъединение.ВычетНДФЛ КАК ВычетНДФЛ,
	//               |	СУММА(втОбъединение.СуммаВычета) КАК СуммаВычета
	//               |ИЗ
	//               |	втОбъединение КАК втОбъединение
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	втОбъединение.Период,
	//               |	втОбъединение.Сотрудник,
	//               |	втОбъединение.ГруппаВычетаНДФЛ,
	//               |	втОбъединение.ВычетНДФЛ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	Период,
	//               |	Сотрудник";

	Запрос.Текст = "ВЫБРАТЬ
	               |	инкВычетыНДФЛОбороты.Период КАК Период,
	               |	инкВычетыНДФЛОбороты.Сотрудник КАК Сотрудник,
	               |	инкВычетыНДФЛОбороты.ГруппаВычетаНДФЛ КАК ГруппаВычетаНДФЛ,
	               |	инкВычетыНДФЛОбороты.ВычетНДФЛ КАК ВычетНДФЛ,
	               |	инкВычетыНДФЛОбороты.СуммаВычетаОборот КАК СуммаВычета
	               |ИЗ
	               |	РегистрНакопления.инкВычетыНДФЛ.Обороты(
	               |			&Дата1,
	               |			&Дата2,
	               |			Месяц,
	               |			Сотрудник В (&Сотрудники)
	               |				И ДокументОснование <> &ТекущийДокумент) КАК инкВычетыНДФЛОбороты";
	// --- Чесноков М.С. 2023-04-05 *№ 0000096

	Запрос.УстановитьПараметр("Дата1", НачалоГода(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудники", ДанныеНачисленияЗарплаты.Сотрудники);
	Запрос.УстановитьПараметр("ТекущийДокумент", ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ссылка);
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Сотрудник,ВычетНДФЛ");
	
	Возврат тз;
	
КонецФункции

Функция Получить_НалогУдержанный(ДанныеНачисленияЗарплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНалогУдержанныйОбороты.Сотрудник КАК Сотрудник,
		|	инкНалогУдержанныйОбороты.Период КАК Период,
		|	инкНалогУдержанныйОбороты.СуммаНалогаОборот КАК СуммаНалога
		|ИЗ
		|	РегистрНакопления.инкНалогУдержанный.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			Месяц,
		|			Сотрудник В (&Сотрудники)
		|				И ДокументОснование <> &ТекущийДокумент) КАК инкНалогУдержанныйОбороты";
	
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудники", ДанныеНачисленияЗарплаты.Сотрудники);
	Запрос.УстановитьПараметр("ТекущийДокумент", ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ссылка);
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Сотрудник");
	
	Возврат тз;
	
КонецФункции	

Функция Получить_ОблагаемыйДоход(ДанныеНачисленияЗарплаты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   инкНачисленияОбороты.Сотрудник КАК Сотрудник,
        |   инкНачисленияОбороты.Период КАК Период,
        |   инкНачисленияОбороты.СуммаНачисленияОборот + инкНачисленияОбороты.РайонныйКоэффициентОборот + инкНачисленияОбороты.СевернаяНадбавкаОборот КАК СуммаДохода
        |ИЗ
        |   РегистрНакопления.инкНачисления.Обороты(
        |           &Дата1,
        |           &Дата2,
        |           Месяц,
        |           Сотрудник В (&Сотрудники)
        |               И ДокументОснование <> &ТекущийДокумент
        |               И Налог = ИСТИНА) КАК инкНачисленияОбороты";
	
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДанныеНачисленияЗарплаты.МесяцНачисления));
	Запрос.УстановитьПараметр("Сотрудники", ДанныеНачисленияЗарплаты.Сотрудники);
	Запрос.УстановитьПараметр("ТекущийДокумент", ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ссылка);
	
	тз = Запрос.Выполнить().Выгрузить();
	тз.Индексы.Добавить("Сотрудник");
	
	Возврат тз;
	
КонецФункции	

Функция Получить_ВыбранныеСотрудники(ДанныеНачисленияЗарплаты)
	
	Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники; 
	ВедомостьТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость;
	
	ВыбранныеСотрудники = ВедомостьТаблица.Выгрузить();

	Если Сотрудники.Количество() > 0 Тогда
		
		ВыбранныеСотрудники.Очистить();
		Для Каждого СотрудникСтрока из Сотрудники Цикл
			Для каждого СотрудникТаблица из ВедомостьТаблица Цикл
				Если СотрудникТаблица.Сотрудник = СотрудникСтрока Тогда
					ВыбранныеСотрудникиСтрока = ВыбранныеСотрудники.Добавить();
					ЗаполнитьЗначенияСвойств(ВыбранныеСотрудникиСтрока,СотрудникТаблица);
				КонецЕсли;				
			КонецЦикла;			
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат ВыбранныеСотрудники; 
	
КонецФункции

Функция ПолучитьТекстЗапроса_Сотрудники(ДанныеНачисленияЗарплаты)

	стрТекстЗапроса =	
		"ВЫБРАТЬ
		|	инкКадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	инкКадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
		|	инкКадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	инкКадроваяИсторияСотрудниковСрезПоследних.ВидСобытия КАК ВидСобытия
		|ПОМЕСТИТЬ втРаботающиеСотрудникиНаКонецПериода
		|ИЗ
		|	РегистрСведений.инкКадроваяИсторияСотрудников.СрезПоследних(&Дата2, Сотрудник В (&Сотрудники)) КАК инкКадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	инкКадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.инкВидыКадровыхСобытий.Увольнение)
		|	И инкКадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация
		|	И инкКадроваяИсторияСотрудниковСрезПоследних.Подразделение = &Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	инкКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	инкКадроваяИсторияСотрудников.Организация КАК Организация,
		|	инкКадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	инкКадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия
		|ПОМЕСТИТЬ втУволенныеВТекущемПериоде
		|ИЗ
		|	РегистрСведений.инкКадроваяИсторияСотрудников КАК инкКадроваяИсторияСотрудников
		|ГДЕ
		|	инкКадроваяИсторияСотрудников.Период >= &Дата1
		|	И инкКадроваяИсторияСотрудников.Период <= &Дата2
		|	И инкКадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.инкВидыКадровыхСобытий.Увольнение)
		|	И инкКадроваяИсторияСотрудников.Организация = &Организация
		|	И инкКадроваяИсторияСотрудников.Подразделение = &Подразделение
		|	И инкКадроваяИсторияСотрудников.Сотрудник В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРаботающиеСотрудникиНаКонецПериода.Сотрудник КАК Сотрудник,
		|	втРаботающиеСотрудникиНаКонецПериода.Организация КАК Организация,
		|	втРаботающиеСотрудникиНаКонецПериода.Подразделение КАК Подразделение,
		|	втРаботающиеСотрудникиНаКонецПериода.ВидСобытия КАК ВидСобытия
		|ПОМЕСТИТЬ втОбъединение
		|ИЗ
		|	втРаботающиеСотрудникиНаКонецПериода КАК втРаботающиеСотрудникиНаКонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втУволенныеВТекущемПериоде.Сотрудник,
		|	втУволенныеВТекущемПериоде.Организация,
		|	втУволенныеВТекущемПериоде.Подразделение,
		|	втУволенныеВТекущемПериоде.ВидСобытия
		|ИЗ
		|	втУволенныеВТекущемПериоде КАК втУволенныеВТекущемПериоде
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОбъединение.Сотрудник КАК Сотрудник,
		|	втОбъединение.Организация КАК Организация,
		|	втОбъединение.Подразделение КАК Подразделение
		|ИЗ
		|	втОбъединение КАК втОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	втОбъединение.Сотрудник,
		|	втОбъединение.Организация,
		|	втОбъединение.Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	втОбъединение.Сотрудник.Наименование";
	
	Если Не ЗначениеЗаполнено(ДанныеНачисленияЗарплаты.Сотрудники) Тогда
		
		стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса,"инкКадроваяИсторияСотрудников.Сотрудник В(&Сотрудники)","Истина");
		стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса,"Сотрудник В (&Сотрудники)","Истина");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеНачисленияЗарплаты.Организация) Тогда  
		стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса,"инкКадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация","Истина");
		стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса,"инкКадроваяИсторияСотрудников.Организация = &Организация","Истина");
	КонецЕсли;		
	
	Если Не ЗначениеЗаполнено(ДанныеНачисленияЗарплаты.Подразделение) Тогда
		стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса,"инкКадроваяИсторияСотрудниковСрезПоследних.Подразделение = &Подразделение","Истина");
		стрТекстЗапроса = СтрЗаменить(стрТекстЗапроса,"инкКадроваяИсторияСотрудников.Подразделение = &Подразделение","Истина");
	КонецЕсли;		
	
	Возврат стрТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область о // Расчет заработной платы:

Процедура ВыполнитьРасчетЗаработнойПлаты() Экспорт
	
	Если ДанныеНачисленияЗарплаты = Неопределено Тогда
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Не заданы данные для ПрочиеНачисления зарплаты. Операция прервана.");
		Возврат;
	КонецЕсли; 
	
	ВремяНачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ЗагрузкаДанныхДляРасчетаЗарплаты(ДанныеНачисленияЗарплаты);
	
	Ведомость_ОбновитьКадровыеДанные(ДанныеНачисленияЗарплаты);
	Ведомость_Заполнение(ДанныеНачисленияЗарплаты);
	Ведомость_Расчет(ДанныеНачисленияЗарплаты);
	//
	ПрочиеНачисления_Заполнение(ДанныеНачисленияЗарплаты);
	ПрочиеНачисления_Расчет(ДанныеНачисленияЗарплаты);
	//
	ПрочиеУдержания_Заполнение(ДанныеНачисленияЗарплаты);
	ПрочиеУдержания_Расчет(ДанныеНачисленияЗарплаты);
	//
	РКиКН_Расчет(ДанныеНачисленияЗарплаты);
	//
	НДФЛ_Заполнение(ДанныеНачисленияЗарплаты);
	ВычетыНДФЛ_Заполнение(ДанныеНачисленияЗарплаты);
	НДФЛ_Расчет(ДанныеНачисленияЗарплаты);
	//
	Ведомость_НДФЛ(ДанныеНачисленияЗарплаты);
	//        
	Ведомость_Итоги(ДанныеНачисленияЗарплаты);
    //         
	Ведомость_ОтразитьОплатуАванса(ДанныеНачисленияЗарплаты);
	//
	Ведомость_ИсполнительныйЛист(ДанныеНачисленияЗарплаты);
	//
	Ведомость_Сальдо(ДанныеНачисленияЗарплаты);
    Ведомость_Сортировка(ДанныеНачисленияЗарплаты);
	//                                               
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка.инкРасчетЗарабатнойПлаты.РасчетДанных",ВремяНачалоЗамера,ДанныеНачисленияЗарплаты.СотрудникиТаблица.Количество());
	
КонецПроцедуры

#Область о // Расчет заработной платы - Ведомость:

Процедура Ведомость_ОбновитьКадровыеДанные(ДанныеНачисленияЗарплаты)
	
	Для каждого Сотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",Сотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл
		
			ПоискСотрудника = Новый Структура("Сотрудник",Сотрудник);
			КадровыеДанныеМассив = ДанныеНачисленияЗарплаты.КадровыеДанные.НайтиСтроки(ПоискСотрудника);
			
			Если КадровыеДанныеМассив.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ВедомостьСтрока,КадровыеДанныеМассив[0]);
			КонецЕсли;    	
			
		КонецЦикла;                              	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура Ведомость_Заполнение(ДанныеНачисленияЗарплаты)
	
	Если ДанныеНачисленияЗарплаты.булПерерасчет Тогда
		Возврат;
	КонецЕсли;		
	
	ОбъектНачисленияЗарплаты = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты; 
	СотрудникиТаблица = ДанныеНачисленияЗарплаты.СотрудникиТаблица;
	ОчиститьТабличнуюЧастьОбъекта("Ведомость",ДанныеНачисленияЗарплаты);
	
	Для каждого СотрудникСтрока из СотрудникиТаблица Цикл
	
		ВедомостьСтрока = ОбъектНачисленияЗарплаты.Ведомость.Добавить();
		ЗаполнитьЗначенияСвойств(ВедомостьСтрока,СотрудникСтрока);     
		
		СотрудникПоиск = Новый Структура("Сотрудник",СотрудникСтрока.Сотрудник);
		КадровыеДанныеМассив = ДанныеНачисленияЗарплаты.КадровыеДанныеНаКонецПериода.НайтиСтроки(СотрудникПоиск);
		Для каждого КадровыеДанныеСтрока Из КадровыеДанныеМассив Цикл
			ВедомостьСтрока.СотрудникОклад = КадровыеДанныеСтрока.Оклад;
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура Ведомость_Расчет(ДанныеНачисленияЗарплаты)
	
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл
		
			КалендарныеДниКадры = 0;
			КалендарныеДниФактКадры = 0;
			
			ВедомостьСтрока.Оклад = 0;
			ПериодыКадровыхДанныхМассив = ДанныеНачисленияЗарплаты.ПериодыРасчетаКадровыхДанных.НайтиСтроки(ПоискСотрудника);			

			Если ПериодыКадровыхДанныхМассив.Количество() > 0 Тогда 
				ВедомостьСтрока.Оклад = РасчетОкладаПоПериоду(ПериодыКадровыхДанныхМассив[0]);
				ВедомостьСтрока.ПериодДата1 = ПериодыКадровыхДанныхМассив[0].ПериодДата1;
				ВедомостьСтрока.ПериодДата2 = ПериодыКадровыхДанныхМассив[0].ПериодДата2;
			КонецЕсли;						
			
			// На рабочий стол попадает только первый интервал, если у нас есть кадроые изменения:
			Если ПериодыКадровыхДанныхМассив.Количество() > 1 Тогда
				
				// Если расчет по кадровым данным, то пока периоды делятся на календарные рабочие дни, а данные
				// по дням заданные пользователем мы принудительно затираем:
				ВедомостьСтрока.Часы			= 0;	     
				ВедомостьСтрока.ЧасыФакт        = 0;
				ВедомостьСтрока.НормаЧасы       = 0;
				ВедомостьСтрока.НормаЧасыФакт   = 0;
				ВедомостьСтрока.НормаДни        = ПериодыКадровыхДанныхМассив[0].ДниЧасы;
				ВедомостьСтрока.НормаДниФакт    = ПериодыКадровыхДанныхМассив[0].ДниЧасыФакт;
				ВедомостьСтрока.ПериодДата1		= ПериодыКадровыхДанныхМассив[0].ПериодДата1;
				ВедомостьСтрока.ПериодДата2		= ПериодыКадровыхДанныхМассив[0].ПериодДата2;
				
			КонецЕсли;
			
		КонецЦикла;                              	
		
	КонецЦикла;
	
КонецПроцедуры      

Процедура ОчиститьТабличнуюЧастьОбъекта(стрТабличнаяЧасть,ДанныеНачисленияЗарплаты)
	
	ОбъектНачисленияЗарплаты = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты; 
	
	Если Не ЗначениеЗаполнено(ДанныеНачисленияЗарплаты.Сотрудники) Тогда
		ОбъектНачисленияЗарплаты[стрТабличнаяЧасть].Очистить();
	Иначе
		
		Если ДанныеНачисленияЗарплаты.Сотрудники.Количество() = 0 Тогда
			ОбъектНачисленияЗарплаты[стрТабличнаяЧасть].Очистить();
		Иначе
			
			Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
				
				стрПоиск = Новый Структура("Сотрудник",стрСотрудник);
				массСтроки = ОбъектНачисленияЗарплаты[стрТабличнаяЧасть].НайтиСтроки(стрПоиск); 	
				Для каждого стрМассива из массСтроки Цикл
					ОбъектНачисленияЗарплаты[стрТабличнаяЧасть].Удалить(стрМассива);	
				КонецЦикла;				
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Ведомость_Сортировка(ДанныеНачисленияЗарплаты)
	
	Если ДанныеНачисленияЗарплаты.булСортировкаПоСотрудникам Тогда
		ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.Сортировать("Сотрудник");
	КонецЕсли;
	
КонецПроцедуры

Процедура Ведомость_Итоги(ДанныеНачисленияЗарплаты)
	
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл

			ВедомостьСтрока.ВсегоНачислено  = ВедомостьСтрока.Оклад
											+ ВедомостьСтрока.РайонныйКоэффициент
											+ ВедомостьСтрока.СевернаяНадбавка
											+ ВедомостьСтрока.Отпуск
											+ ВедомостьСтрока.БольничныйЛист
											+ ВедомостьСтрока.ПрочиеНачисления;
			                                                                                   
			ВедомостьСтрока.ВсегоУдержано 	= ВедомостьСтрока.ПрочиеУдержания
											+ ВедомостьСтрока.Профсоюз
											+ ВедомостьСтрока.ИсполнительныйЛист
			                                + ВедомостьСтрока.НДФЛ
											+ ВедомостьСтрока.ОтпускИБольничныйЛист
											+ ВедомостьСтрока.ЗарплатаПредыдущегоМесяца
											+ ВедомостьСтрока.ЗарплатаТекущегоМесяца
											+ ВедомостьСтрока.ЗарплатаТекущегоМесяцаДо22
											+ ВедомостьСтрока.ЗарплатаТекущегоМесяцаПосле22;
										
			ВедомостьСтрока.КВыплате	 	= ВедомостьСтрока.СальдоВходящее
											+ ВедомостьСтрока.ВсегоНачислено
			                                - ВедомостьСтрока.ВсегоУдержано;
							
		КонецЦикла;								
										
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область о // Расчет заработной платы - Прочие начисления:

Процедура ПрочиеНачисления_Заполнение(ДанныеНачисленияЗарплаты);
	
	Если ДанныеНачисленияЗарплаты.булПерерасчет Тогда
		Возврат;
	КонецЕсли;		

	ОбъектНачисленияЗарплаты = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты;
	ОчиститьТабличнуюЧастьОбъекта("ПрочиеНачисления",ДанныеНачисленияЗарплаты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПостоянныеНачисления.Сотрудник КАК Сотрудник,
		|	инкПостоянныеНачисления.Начисление КАК Начисление,
		|	инкПостоянныеНачисления.Размер КАК СуммаНачисления,
		|	инкПостоянныеНачисления.Начисление.ВПроцентах КАК ВПроцентах,
		|	инкПостоянныеНачисления.Начисление.ВычетНДФЛ КАК ВычетНДФЛ,
		|	инкПостоянныеНачисления.Начисление.ВычетНДФЛ.СуммаВычета КАК СуммаВычета
		|ИЗ
		|	РегистрСведений.инкПостоянныеНачисления КАК инкПостоянныеНачисления
		|ГДЕ
		|	инкПостоянныеНачисления.Сотрудник В(&Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Начисление";
	
	Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		стрНачисление = ОбъектНачисленияЗарплаты.ПрочиеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(стрНачисление,ВыборкаДетальныеЗаписи);
		
	КонецЦикла;

КонецПроцедуры	

Процедура ПрочиеНачисления_Расчет(ДанныеНачисленияЗарплаты)
	
	Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники;

	Для каждого элСотрудник из Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",элСотрудник);

		массВедомость = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника);
		Для каждого ВедомостьСтрока из массВедомость Цикл
			
			ВедомостьСтрока.ПрочиеНачисления 		= 0;
			ВедомостьСтрока.БольничныйЛист			= 0;
			ВедомостьСтрока.Отпуск           		= 0;

			РасчетПрочихНачисленийПоПериоду(ВедомостьСтрока,ДанныеНачисленияЗарплаты);
			РасчетПрочихНачислений(ВедомостьСтрока,ДанныеНачисленияЗарплаты);
			РасчетПрочихНачисленийСПроцентом(ВедомостьСтрока,ДанныеНачисленияЗарплаты);
			
		КонецЦикла;		
		
	КонецЦикла;

КонецПроцедуры   

Процедура РасчетПрочихНачисленийПоПериоду(ВедомостьСтрока,ДанныеНачисленияЗарплаты)

	// Удаление старых расчетов:
	ПрочихНачисленийПериод = Новый Структура;
	ПрочихНачисленийПериод.Вставить("Сотрудник",ВедомостьСтрока.Сотрудник);
	ПрочихНачисленийПериод.Вставить("ПериодРасчет",Истина);   
	
	ПрочиеНачисленияТаблица = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления;
	ПрочиеНачисленияМассив = ПрочиеНачисленияТаблица.НайтиСтроки(ПрочихНачисленийПериод);
	
	Для каждого ПрочееНачисление из ПрочиеНачисленияМассив Цикл
		ПрочиеНачисленияТаблица.Удалить(ПрочееНачисление);
	КонецЦикла;
	
	ПоискСотрудника = Новый Структура("Сотрудник",ВедомостьСтрока.Сотрудник);
	ПериодыКадровыхДанныхМассив = ДанныеНачисленияЗарплаты.ПериодыРасчетаКадровыхДанных.НайтиСтроки(ПоискСотрудника);			

	Если ПериодыКадровыхДанныхМассив.Количество() > 1 Тогда
		
		КоличествоПериодов = ПериодыКадровыхДанныхМассив.Количество();
		Для ИндексЭлемента = 1 По КоличествоПериодов - 1 Цикл
			
			ОкладСумма = РасчетОкладаПоПериоду(ПериодыКадровыхДанныхМассив[ИндексЭлемента]);
			
			Если ОкладСумма <> 0 Тогда

				ПрочееНачисление = ПрочиеНачисленияТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(ПрочееНачисление,ПериодыКадровыхДанныхМассив[ИндексЭлемента]);
				ЗаполнитьЗначенияСвойств(ПрочееНачисление,ПланыВидовРасчета.инкНачисления.Оклад);
				
				ПрочееНачисление.Начисление = ПланыВидовРасчета.инкНачисления.Оклад;
				ПрочееНачисление.СуммаВычета = ПланыВидовРасчета.инкНачисления.Оклад.ВычетНДФЛ.СуммаВычета;
				ПрочееНачисление.СуммаНачисления = ОкладСумма; 
				
				ПрочееНачисление.Дни  	= ПериодыКадровыхДанныхМассив[ИндексЭлемента].ДниЧасыФакт;
				ПрочееНачисление.Месяц  = НачалоМесяца(ПериодыКадровыхДанныхМассив[ИндексЭлемента].ПериодДата1);
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция РасчетОкладаПоПериоду(ПериодКадровыхДанных)
	
	ОкладСумма = ПериодКадровыхДанных.Оклад 
	           * ПериодКадровыхДанных.ИндивидуальныйКоэффициент
			   * ПериодКадровыхДанных.НормаВремениКоэффициент;
			   
	Возврат ОкладСумма;
	
КонецФункции  

Процедура РасчетПрочихНачислений(ВедомостьСтрока,ДанныеНачисленияЗарплаты)
	
	ПоискПрочихНачислений = Новый Структура;
	ПоискПрочихНачислений.Вставить("Сотрудник",ВедомостьСтрока.Сотрудник);
	ПоискПрочихНачислений.Вставить("ВПроцентах",Ложь);
	
	ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискПрочихНачислений);
	
	ВедомостьСтрока.ПрочиеНачисления		= ВедомостьСтрока.ПрочиеНачисления
	                                        + РасчитатьСуммуПрочегоНачисления("ПрочееНачисление",ПрочиеНачисленияМассив);
	ВедомостьСтрока.БольничныйЛист			= ВедомостьСтрока.БольничныйЛист
											+ РасчитатьСуммуПрочегоНачисления("Больничный",ПрочиеНачисленияМассив);
	ВедомостьСтрока.Отпуск           		= ВедомостьСтрока.Отпуск
	                                        + РасчитатьСуммуПрочегоНачисления("Отпуск",ПрочиеНачисленияМассив);
КонецПроцедуры    

Функция РасчитатьСуммуПрочегоНачисления(ТипНачисления,ПрочиеНачисленияМассив)
	
	НачислениеСумма = 0;
	
	Для каждого ПрочееНачисление из ПрочиеНачисленияМассив Цикл

		ТипТекущегоНачисления = ОпределитьТипНачисления(ПрочееНачисление);
		
		Если ТипНачисления = ТипТекущегоНачисления Тогда
			НачислениеСумма = НачислениеСумма + ПрочееНачисление.СуммаНачисления;	
		КонецЕсли;
		
	КонецЦикла;			
	
	Возврат НачислениеСумма;
	
КонецФункции

Функция ОпределитьТипНачисления(стрТабличнаяЧасть)
	
	ТипНачисления = "";
	
	Если ТипЗнч(стрТабличнаяЧасть.ДокументСсылка) = Тип("ДокументСсылка.инкБольничныйЛистРасчет") ИЛИ
		 СтрНайти(НРег(стрТабличнаяЧасть.Начисление.Наименование),НРег("нетруд")) > 0
	Тогда
		ТипНачисления = "Больничный";	
	ИначеЕсли ТипЗнч(стрТабличнаяЧасть.ДокументСсылка) = Тип("ДокументСсылка.инкОтпускРасчетПоСреднему") ИЛИ
			  стрТабличнаяЧасть.Начисление = ПланыВидовРасчета.инкНачисления.ОплатаОчередныхОтпусков
	Тогда                            
		ТипНачисления = "Отпуск"; 
	Иначе
		ТипНачисления = "ПрочееНачисление";
	КонецЕсли;
	
	Возврат ТипНачисления;
		
КонецФункции

Процедура РасчетПрочихНачисленийСПроцентом(ВедомостьСтрока,ДанныеНачисленияЗарплаты)
	
	ПоискПрочихНачислений = Новый Структура;
	ПоискПрочихНачислений.Вставить("Сотрудник",ВедомостьСтрока.Сотрудник);
	ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискПрочихНачислений);

	ПоискПрочихНачислений = Новый Структура;
	ПоискПрочихНачислений.Вставить("Сотрудник",ВедомостьСтрока.Сотрудник);
	ПоискПрочихНачислений.Вставить("ВПроцентах",Истина);
	ПрочиеНачисленияВПроцентахМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискПрочихНачислений);
	
	Для каждого ПрочееНачислениеВПроцентах из ПрочиеНачисленияВПроцентахМассив Цикл
	
		Если ЗначениеЗаполнено(ПрочееНачислениеВПроцентах.ДокументСсылка) Тогда
	    	Продолжить;
		КонецЕсли;
		
		чПроцент = ПрочееНачислениеВПроцентах.ПроцентОтБазы / 100;
		
		// Расчет базы:
		чБаза = 0;
		БазовыеНачисления = ПрочееНачислениеВПроцентах.Начисление.БазовыеВидыРасчета;
		Для каждого стрБазовоеНачисление Из БазовыеНачисления Цикл
			
			// Основная зарплата:
			Если стрБазовоеНачисление.ВидРасчета = ПланыВидовРасчета.инкНачисления.Оклад Тогда
				
				Оклад = ПолучитьРасчетИзВедомости("Оклад",ВедомостьСтрока.Сотрудник,ДанныеНачисленияЗарплаты);
				чБаза = чБаза + Оклад;	
				
				Оклад = ПолучитьРасчетИзПрочихНачислений(ПланыВидовРасчета.инкНачисления.Оклад,ВедомостьСтрока.Сотрудник,ДанныеНачисленияЗарплаты);
				чБаза = чБаза + Оклад;	
				
				Продолжить;
				
			КонецЕсли;
			
			// Прочие начисления:
			Для каждого стрБазовоеНачислениеСотрудника из ПрочиеНачисленияМассив Цикл 
				Если стрБазовоеНачислениеСотрудника.Начисление = стрБазовоеНачисление.ВидРасчета Тогда
					чБаза = чБаза + стрБазовоеНачислениеСотрудника.СуммаНачисления;	
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если чПроцент <> 0 Тогда
			ПрочееНачислениеВПроцентах.СуммаНачисления = чБаза * чПроцент;	
		КонецЕсли;
		
		ВедомостьСтрока.ПрочиеНачисления = ВедомостьСтрока.ПрочиеНачисления 
		                                 + ПрочееНачислениеВПроцентах.СуммаНачисления;
		
	КонецЦикла;

КонецПроцедуры    

Функция ПолучитьРасчетИзПрочихНачислений(Начисление,Сотрудник,ДанныеНачисленияЗарплаты)
	
	РасчетСумма = 0;    
	
	ПоискСотрудника = Новый Структура;
	ПоискСотрудника.Вставить("Сотрудник",Сотрудник);
	ПоискСотрудника.Вставить("Начисление",Начисление);
	
	ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискСотрудника); 
	Для каждого ПрочееНачислениеСтрока из ПрочиеНачисленияМассив Цикл
		РасчетСумма = РасчетСумма + ПрочееНачислениеСтрока.СуммаНачисления;
	КонецЦикла;
	
	Возврат РасчетСумма;
	
КонецФункции

Функция ПолучитьРасчетИзВедомости(ИмяКолонки,Сотрудник,ДанныеНачисленияЗарплаты)
	
	РасчетСумма = 0;
	
	ПоискСотрудника = Новый Структура("Сотрудник",Сотрудник);
	ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 

	Для каждого ВедомостьСтрока из ВедомостьМассив Цикл
		РасчетСумма = РасчетСумма + ВедомостьСтрока[ИмяКолонки];
	КонецЦикла;
	
	Возврат РасчетСумма;
		
КонецФункции

#КонецОбласти

#Область о // Расчет заработной платы - Прочие удержания:

Процедура ПрочиеУдержания_Заполнение(ДанныеНачисленияЗарплаты);
	
	Если ДанныеНачисленияЗарплаты.булПерерасчет Тогда
		Возврат;
	КонецЕсли;		
	
	ОбъектНачисленияЗарплаты = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты;
	ОчиститьТабличнуюЧастьОбъекта("ПрочиеУдержания",ДанныеНачисленияЗарплаты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПостоянныеУдержания.Сотрудник КАК Сотрудник,
		|	инкПостоянныеУдержания.Удержание КАК Удержание,
		|	инкПостоянныеУдержания.Размер КАК СуммаУдержания,
		|	инкПостоянныеУдержания.Удержание.ВПроцентах КАК ВПроцентах
		|ИЗ
		|	РегистрСведений.инкПостоянныеУдержания КАК инкПостоянныеУдержания
		|ГДЕ
		|	инкПостоянныеУдержания.Сотрудник В (&Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Удержание";
	
	Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		стрУдержание = ОбъектНачисленияЗарплаты.ПрочиеУдержания.Добавить();
		ЗаполнитьЗначенияСвойств(стрУдержание,ВыборкаДетальныеЗаписи);
		
	КонецЦикла;

КонецПроцедуры	

Процедура ПрочиеУдержания_Расчет(ДанныеНачисленияЗарплаты)
	
	Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники;

	Для каждого элСотрудник из Сотрудники Цикл
		
		стрПоиск = Новый Структура("Сотрудник",элСотрудник);
		
		// Прочие удержания:
		чПрочиеУдержания = 0;
		ИспЛистЧисло = 0;
		ПрофсоюзЧисло = 0;
		ЗарплатаПредыдущегоМесяцаЧисло = 0;
		ЗарплатаТекущегоМесяцаЧисло = 0;
		ЗарплатаТекущегоМесяцаДо22Число = 0;
		ЗарплатаТекущегоМесяцаПосле22Число = 0;		
		АвансЧисло = 0;     
		ОтпускИБольничныйЛистЧисло = 0;
		массТабличнаяЧасть = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеУдержания.НайтиСтроки(стрПоиск);
		Для каждого стрТабличнаяЧасть из массТабличнаяЧасть Цикл
			
			// Автоматические удержания обрабатываются отдельно (см. расчет исп. листа):
			Если стрТабличнаяЧасть.ДобавленАвтоматически Тогда
				Продолжить;
			КонецЕсли;
			
			Если стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ИсполнительныйЛист Тогда
				ИспЛистЧисло = ИспЛистЧисло + стрТабличнаяЧасть.СуммаУдержания;	
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ПрофсоюзныйВзнос Тогда
				ПрофсоюзЧисло = ПрофсоюзЧисло + стрТабличнаяЧасть.СуммаУдержания;	
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ЗарплатаПредыдущегоМесяца Тогда
				ЗарплатаПредыдущегоМесяцаЧисло = ЗарплатаПредыдущегоМесяцаЧисло + стрТабличнаяЧасть.СуммаУдержания;	
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ЗарплатаТекущегоМесяца Тогда
				ЗарплатаТекущегоМесяцаЧисло = ЗарплатаТекущегоМесяцаЧисло + стрТабличнаяЧасть.СуммаУдержания;	
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ЗарплатаТекущегоМесяцаДо22 Тогда	
				ЗарплатаТекущегоМесяцаДо22Число = ЗарплатаТекущегоМесяцаДо22Число + стрТабличнаяЧасть.СуммаУдержания;	
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ЗарплатаТекущегоМесяцаПосле22 Тогда	
				ЗарплатаТекущегоМесяцаПосле22Число = ЗарплатаТекущегоМесяцаПосле22Число + стрТабличнаяЧасть.СуммаУдержания;					
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.Аванс Тогда
				АвансЧисло = АвансЧисло + стрТабличнаяЧасть.СуммаУдержания;	
			ИначеЕсли стрТабличнаяЧасть.Удержание = ПланыВидовРасчета.инкУдержания.ВыплатаОтпускныхИБЛВТекущемМесяце Тогда
				ОтпускИБольничныйЛистЧисло = ОтпускИБольничныйЛистЧисло + стрТабличнаяЧасть.СуммаУдержания;	
			Иначе
				чПрочиеУдержания = чПрочиеУдержания + стрТабличнаяЧасть.СуммаУдержания;	
			КонецЕсли;
			
		КонецЦикла;
		
		// Запись в сотрудники:
		массТабличнаяЧасть = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(стрПоиск);
		Для каждого стрТабличнаяЧасть из массТабличнаяЧасть Цикл
			стрТабличнаяЧасть.Профсоюз = ПрофсоюзЧисло;
			стрТабличнаяЧасть.Аванс = АвансЧисло;
			стрТабличнаяЧасть.ИсполнительныйЛист = ИспЛистЧисло;
			стрТабличнаяЧасть.ПрочиеУдержания = чПрочиеУдержания;
			стрТабличнаяЧасть.ЗарплатаПредыдущегоМесяца = ЗарплатаПредыдущегоМесяцаЧисло;
			стрТабличнаяЧасть.ЗарплатаТекущегоМесяца     = ЗарплатаТекущегоМесяцаЧисло; 
			стрТабличнаяЧасть.ЗарплатаТекущегоМесяцаДо22 = ЗарплатаТекущегоМесяцаДо22Число; 
			стрТабличнаяЧасть.ЗарплатаТекущегоМесяцаПосле22 = ЗарплатаТекущегоМесяцаПосле22Число;   
			стрТабличнаяЧасть.ОтпускИБольничныйЛист = ОтпускИБольничныйЛистЧисло;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьПрочееАвтоУдержание(Сотрудник,Удержание,ДанныеНачисленияЗарплаты)
	
	// Удаление предыдущего аванса:
	ПоискСтроки = Новый Структура;
	ПоискСтроки.Вставить("Сотрудник",Сотрудник);
	ПоискСтроки.Вставить("Удержание",Удержание);
	ПоискСтроки.Вставить("ДобавленАвтоматически",Истина);
	
	УдержанияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеУдержания.НайтиСтроки(ПоискСтроки);
	Для каждого УдержаниеЭлемент Из УдержанияМассив Цикл
		ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеУдержания.Удалить(УдержаниеЭлемент);	
	КонецЦикла;                                                            
	
КонецПроцедуры

#КонецОбласти

#Область о // Расчет заработной платы - РК и КН:

Процедура РКиКН_Расчет(ДанныеНачисленияЗарплаты)
	
	Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники;
	
	Для каждого стрСотрудник из Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);

		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника);
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл

			ВедомостьСтрока.СевернаяНадбавкаОклад 		= 0;
			ВедомостьСтрока.РайонныйКоэффициентОклад 	= 0;
			ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискСотрудника);
			Для каждого ПрочееНачисление из ПрочиеНачисленияМассив Цикл
				ПрочееНачисление.СевернаяНадбавка 		= 0;
				ПрочееНачисление.РайонныйКоэффициент 	= 0;
			КонецЦикла;	   
			
			//ПериодыКадровыхДанныхМассив = ДанныеНачисленияЗарплаты.ПериодыРасчетаКадровыхДанных.НайтиСтроки(ПоискСотрудника);			
			//Для каждого ПериодыКадровыхДанных Из ПериодыКадровыхДанныхМассив Цикл
			//	
			//	КоэффНормаВремени = ПериодыКадровыхДанных.НормаВремениКоэффициент;
			//	СН		 = ПериодыКадровыхДанных.СевернаяНадбавка;
			//	РК		 = ПериодыКадровыхДанных.РайонныйКоэффициент;
			//	
			//	// Оклад:
			//	ВедомостьСтрока.СевернаяНадбавкаОклад 		= ВедомостьСтрока.СевернаяНадбавкаОклад
			//	                                            + ВедомостьСтрока.Оклад*СН*КоэффНормаВремени;
			//	ВедомостьСтрока.РайонныйКоэффициентОклад 	= ВедомостьСтрока.РайонныйКоэффициентОклад
			//	                                            + ВедомостьСтрока.Оклад*РК*КоэффНормаВремени;   
			//												
			//	// Прочие начисления:
			//	ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискСотрудника);
			//	Для каждого ПрочееНачисление из ПрочиеНачисленияМассив Цикл
			//		
			//		Если ПрочееНачисление.Начисление.СевернаяНадбавка Тогда
			//			ПрочееНачисление.СевернаяНадбавка = ПрочееНачисление.СевернаяНадбавка +
			//												ПрочееНачисление.СуммаНачисления * СН * КоэффНормаВремени;   
			//		КонецЕсли;

			//		Если ПрочееНачисление.Начисление.РайонныйКоэффициент Тогда
			//			ПрочееНачисление.РайонныйКоэффициент = ПрочееНачисление.РайонныйКоэффициент +
			//												   ПрочееНачисление.СуммаНачисления * РК * КоэффНормаВремени; 
			//		КонецЕсли;
			//		
			//	КонецЦикла;
			//										
			//КонецЦикла;

			ПериодыКадровыхДанныхМассив = ДанныеНачисленияЗарплаты.КадровыеДанныеНаКонецПериода.НайтиСтроки(ПоискСотрудника);			
			Для каждого ПериодыКадровыхДанных Из ПериодыКадровыхДанныхМассив Цикл
				
				СН		 = ПериодыКадровыхДанных.СевернаяНадбавка;
				РК		 = ПериодыКадровыхДанных.РайонныйКоэффициент;
				
				// Оклад:
				ВедомостьСтрока.СевернаяНадбавкаОклад 		= ВедомостьСтрока.СевернаяНадбавкаОклад
				                                            + ВедомостьСтрока.Оклад*СН;
				ВедомостьСтрока.РайонныйКоэффициентОклад 	= ВедомостьСтрока.РайонныйКоэффициентОклад
				                                            + ВедомостьСтрока.Оклад*РК;   
															
				// Прочие начисления:
				ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискСотрудника);
				Для каждого ПрочееНачисление из ПрочиеНачисленияМассив Цикл
					
					Если ПрочееНачисление.Начисление.СевернаяНадбавка Тогда
						ПрочееНачисление.СевернаяНадбавка = ПрочееНачисление.СевернаяНадбавка +
															ПрочееНачисление.СуммаНачисления * СН;   
					КонецЕсли;

					Если ПрочееНачисление.Начисление.РайонныйКоэффициент Тогда
						ПрочееНачисление.РайонныйКоэффициент = ПрочееНачисление.РайонныйКоэффициент +
															   ПрочееНачисление.СуммаНачисления * РК; 
					КонецЕсли;
					
				КонецЦикла;
													
			КонецЦикла;
			
			// Запись данных в ведомость:
			ВедомостьСтрока.СевернаяНадбавка	= ВедомостьСтрока.СевернаяНадбавкаОклад;
			ВедомостьСтрока.РайонныйКоэффициент = ВедомостьСтрока.РайонныйКоэффициентОклад;
			ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискСотрудника);
			Для каждого ПрочееНачисление из ПрочиеНачисленияМассив Цикл
				
				ВедомостьСтрока.СевернаяНадбавка = ВедомостьСтрока.СевернаяНадбавка
					                             + ПрочееНачисление.СевернаяНадбавка;   
				ВедомостьСтрока.РайонныйКоэффициент = ВедомостьСтрока.РайонныйКоэффициент 
				                                    + ПрочееНачисление.РайонныйКоэффициент; 
				
			КонецЦикла;

		КонецЦикла;	

	КонецЦикла;   
	
КонецПроцедуры

#КонецОбласти

#Область о // Расчет заработной платы - Отразить оплату аванса:

Процедура Ведомость_ОтразитьОплатуАванса(ДанныеНачисленияЗарплаты)
	
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл

		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл
			
			// Добавление аванса в удержание:
			Если ДанныеНачисленияЗарплаты.ОплатаАванса Тогда
				
				УдалитьПрочееАвтоУдержание(стрСотрудник,ПланыВидовРасчета.инкУдержания.Аванс,ДанныеНачисленияЗарплаты);
				
				// Добавление нового:
				УдержанияСтрока = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеУдержания.Добавить();
				ЗаполнитьЗначенияСвойств(УдержанияСтрока,ВедомостьСтрока);
				УдержанияСтрока.Удержание      = ПланыВидовРасчета.инкУдержания.Аванс;
				УдержанияСтрока.СуммаУдержания = ВедомостьСтрока.КВыплате;			
				УдержанияСтрока.ДобавленАвтоматически = Истина;
				
			КонецЕсли;
			
			// Отражение аванса в ведомости:
			ПоискСтроки = Новый Структура;
			ПоискСтроки.Вставить("Сотрудник",стрСотрудник);
			ПоискСтроки.Вставить("Удержание",ПланыВидовРасчета.инкУдержания.Аванс);
			УдержанияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеУдержания.НайтиСтроки(ПоискСтроки);
			ВедомостьСтрока.Аванс = 0;
			Для каждого УдержаниеЭлемент Из УдержанияМассив Цикл
				ВедомостьСтрока.Аванс = ВедомостьСтрока.Аванс + УдержаниеЭлемент.СуммаУдержания; 	
			КонецЦикла;                                                            
			
			ВедомостьСтрока.ВсегоУдержано 	= ВедомостьСтрока.ВсегоУдержано + ВедомостьСтрока.Аванс;
			ВедомостьСтрока.КВыплате 		= ВедомостьСтрока.КВыплате - ВедомостьСтрока.Аванс;
			
		КонецЦикла;	
			
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область о // Расчет заработной платы - НДФЛ:

Процедура Ведомость_НДФЛ(ДанныеНачисленияЗарплаты)
	
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл

			НДФЛМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.НДФЛ.НайтиСтроки(ПоискСотрудника);
			НДФЛЧисло = 0;
			Для каждого НДФЛЭлемент из НДФЛМассив Цикл
				НДФЛЧисло = НДФЛЧисло + НДФЛЭлемент.СуммаНалога;
			КонецЦикла;		
			
			ВедомостьСтрока.НДФЛ = НДФЛЧисло;		
			
		КонецЦикла;	
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область о // Исполнительный лист:

Процедура Ведомость_ИсполнительныйЛист(ДанныеНачисленияЗарплаты)
	
	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		// Удаление предыдущего удержания:
		УдалитьПрочееАвтоУдержание(стрСотрудник,ПланыВидовРасчета.инкУдержания.ИсполнительныйЛист,ДанныеНачисленияЗарплаты);

		Если НЕ ЗначениеЗаполнено(стрСотрудник.ИсполнительныйЛистПроцент) Тогда
			Продолжить;
		КонецЕсли;     
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 

		ИспЛистРасчет = 0;
		ИспЛистПроцент = Перечисления.инкИсполнительныйЛистПроцент.ПолучитьПроцент(стрСотрудник.ИсполнительныйЛистПроцент);
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл

			НачисленияФОТ = ВедомостьСтрока.ВсегоНачислено;
			
			ПрочиеНачисленияМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеНачисления.НайтиСтроки(ПоискСотрудника); 
			Для каждого ПрочееНачисление Из ПрочиеНачисленияМассив Цикл
				
				Если НЕ ПрочееНачисление.Начисление.ВходитВФОТ Тогда
					НачисленияФОТ = НачисленияФОТ - ПрочееНачисление.СуммаНачисления;	
				КонецЕсли;
					
			КонецЦикла;

			ИспЛистРасчет = ИспЛистПроцент * (НачисленияФОТ - ВедомостьСтрока.НДФЛ);	
			Если  ИспЛистРасчет < 0 Тогда
				ИспЛистРасчет = 0;	
			КонецЕсли; 

			Если НачисленияФОТ <= 0 Тогда
				Продолжить;
			КонецЕсли;     
			
			ВедомостьСтрока.ИсполнительныйЛист = ИспЛистРасчет;
			ВедомостьСтрока.КВыплате = ВедомостьСтрока.КВыплате - ИспЛистРасчет;
			ВедомостьСтрока.ВсегоУдержано = ВедомостьСтрока.ВсегоУдержано + ИспЛистРасчет;
			
		КонецЦикла;
		
		// Добавление нового:
		Если ИспЛистРасчет <> 0 Тогда
			УдержанияСтрока = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.ПрочиеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(УдержанияСтрока,ВедомостьСтрока);
			УдержанияСтрока.Удержание      = ПланыВидовРасчета.инкУдержания.ИсполнительныйЛист;
			УдержанияСтрока.СуммаУдержания = ИспЛистРасчет;			
			УдержанияСтрока.ДобавленАвтоматически = Истина;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры   

#КонецОбласти

#Область о // Расчет заработной платы - Сальдо:

Процедура Ведомость_Сальдо(ДанныеНачисленияЗарплаты)
    
    ПредыдущийПериодДата = ДобавитьМесяц(ДанныеНачисленияЗарплаты.МесяцНачисления,-1);
    Сотрудники = ДанныеНачисленияЗарплаты.Сотрудники; 
    
    // Расчет входящего сальдо:
    СальдоВходящееТаблица = ПолучитьСальдоЗаПериод(ПредыдущийПериодДата,Сотрудники);
   	Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
		
		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
		
		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл

			СальдоВходящееМассив = СальдоВходящееТаблица.НайтиСтроки(ПоискСотрудника);
			СальдоВходящееЧисло = 0;
			Для каждого СальдоВходящееЭлемент из СальдоВходящееМассив Цикл
				СальдоВходящееЧисло = СальдоВходящееЧисло + СальдоВходящееЭлемент.Сальдо;
			КонецЦикла;		
            
            Если СальдоВходящееЧисло<>0 Тогда
                ВедомостьСтрока.СальдоВходящее = СальдоВходящееЧисло;	
            КонецЕсли;					
			
		КонецЦикла;	
			
	КонецЦикла;
    
    // Расчет исходящего сальдо:
    Если ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.УчитыватьКакСальдоСуммуЗаПредыдущийМесяц Тогда
        
        Для каждого стрСотрудник из ДанныеНачисленияЗарплаты.Сотрудники Цикл
    		
    		ПоискСотрудника = Новый Структура("Сотрудник",стрСотрудник);
    		ВедомостьМассив = ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты.Ведомость.НайтиСтроки(ПоискСотрудника); 
    		
    		Для каждого ВедомостьСтрока из ВедомостьМассив Цикл

    			ВедомостьСтрока.СальдоИсходящее = ВедомостьСтрока.СальдоВходящее
                                                + ВедомостьСтрока.ВсегоНачислено
                                                - ВедомостьСтрока.ВсегоУдержано;
    			
    		КонецЦикла;	
    			
    	КонецЦикла;
    	
    КонецЕсли; 
    
КонецПроцедуры

Функция ПолучитьСальдоЗаПериод(ПредыдущийПериодДата,Сотрудники)
    
    // Исходящее сальдо прошлого период, в текущем будет входящим:
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   инкВедомостиОбороты.Сотрудник КАК Сотрудник,
        |   инкВедомостиОбороты.СальдоИсходящееОборот КАК Сальдо
        |ИЗ
        |   РегистрНакопления.инкВедомости.Обороты(&Дата1, &Дата2, Месяц, Сотрудник В (&Сотрудники)) КАК инкВедомостиОбороты";
    
    Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ПредыдущийПериодДата));
    Запрос.УстановитьПараметр("Дата2", КонецМесяца(ПредыдущийПериодДата));
    Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
    
    тз = Запрос.Выполнить().Выгрузить();
    тз.Индексы.Добавить("Сотрудник");
    
    Возврат тз;
    
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецОбласти

#КонецЕсли
