
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Сформировать табличные документы ЕФС 1
//
// Параметры:
//  ПараметрыОтчета	 - Структура	- Параметры отчета
//  ВидОтчета		 - Строка	 	- Вид отчета "Раздел1" или "Раздел2"
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Отчет ЕФС - 1
//
Функция СформироватьТабличныеДокументыЕФС_1(ПараметрыОтчета,ВидОтчета) Экспорт 
	
	ИсходныеДанные = ПолучитьИсходныеДанные(ПараметрыОтчета,ВидОтчета);
	
	ТабличныеДокументыЕФС_1 = Новый Структура;
	ТабличныеДокументыЕФС_1.Вставить("ТаблицаРаздел1");
	ТабличныеДокументыЕФС_1.Вставить("ТаблицаРаздел2");
	ТабличныеДокументыЕФС_1.Вставить("ТаблицаТитульный");
	ТабличныеДокументыЕФС_1.Вставить("ТаблицаРаздел23");
	
	Если ВидОтчета = "Раздел1" Тогда
		ТабличныеДокументыЕФС_1.ТаблицаРаздел1 = ПолучитьРаздел1(ИсходныеДанные);	
	ИначеЕсли ВидОтчета = "Раздел2" Тогда	
		ТабличныеДокументыЕФС_1.ТаблицаТитульный = ПолучитьТитульный(ИсходныеДанные);	
		ТабличныеДокументыЕФС_1.ТаблицаРаздел2 = ПолучитьРаздел2(ИсходныеДанные);	
		ТабличныеДокументыЕФС_1.ТаблицаРаздел23 = ПолучитьРаздел23(ИсходныеДанные);	
	КонецЕсли;
	
	Возврат ТабличныеДокументыЕФС_1;
	
КонецФункции    

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Исходные данные:

Функция ПолучитьИсходныеДанные(ПараметрыОтчета,ВидОтчета)
	
	ИсходныеДанные = Новый Структура;
	
	ИсходныеДанные.Вставить("Дата1",ПараметрыОтчета.Дата1);
	ИсходныеДанные.Вставить("Дата2",ПараметрыОтчета.Дата2);
	
	Если ВидОтчета = "Раздел1" Тогда
		ИсходныеДанные.Вставить("СотрудникиМассив",ПараметрыОтчета.Сотрудники);
		ИсходныеДанные.Вставить("СотрудникиТаблица",ПолучитьСотрудникиТаблица(ИсходныеДанные));
		ИсходныеДанные.Вставить("КадровыеИзмененияТаблица",ПолучитьКадровыеИзмененияТаблица(ИсходныеДанные));
	ИначеЕсли ВидОтчета = "Раздел2" Тогда
		ИсходныеДанные.Вставить("Организация",ПараметрыОтчета.Организация);
		ИсходныеДанные.Вставить("РезультатРасчетаВзносы",ПолучитьРезультатРасчетаВзносы_Раздел2(ИсходныеДанные));
		ИсходныеДанные.Вставить("ФондТравматизма",Константы.инкФондТравматизма.Получить()); 
		ИсходныеДанные.Вставить("ЧисленностьЗастрахованных",ПолучитьЧисленностьЗастрахованных(ИсходныеДанные));
	КонецЕсли;
	
	Возврат ИсходныеДанные;
	
КонецФункции   

Функция ПолучитьЧисленностьЗастрахованных(ИсходныеДанные)

	ЧисленностьЗастрахованных = 0;

	Для каждого ВзносыСтрока Из ИсходныеДанные.РезультатРасчетаВзносы.ВзносыТаблица_Год Цикл
		
		Если ВзносыСтрока.ОблагаемаяБаза > 0 Тогда
			ЧисленностьЗастрахованных = ЧисленностьЗастрахованных + 1;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧисленностьЗастрахованных;
	
КонецФункции

Функция ПолучитьСотрудникиТаблица(ПараметрыСтруктура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкСотрудники.Ссылка КАК Сотрудник,
		|	инкСотрудники.Фамилия КАК Фамилия,
		|	инкСотрудники.Имя КАК Имя,
		|	инкСотрудники.Отчество КАК Отчество,
		|	инкСотрудники.ДатаРождения КАК ДатаРождения,
		|	инкСотрудники.СНИЛС КАК СтраховойНомерПФР,
		|	инкСотрудники.ИНН КАК ИНН,
		|	инкСотрудники.Гражданство.Код КАК Гражданство
		|ИЗ
		|	Справочник.инкСотрудники КАК инкСотрудники
		|ГДЕ
		|	НЕ инкСотрудники.ПометкаУдаления
		|	И инкСотрудники.Ссылка В(&СотрудникиМассив)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество";
	
	Запрос.УстановитьПараметр("СотрудникиМассив",ПараметрыСтруктура.СотрудникиМассив);
	
	СотрудникиТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат СотрудникиТаблица;
	
КонецФункции

Функция ПолучитьКадровыеИзмененияТаблица(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	инкКадроваяИсторияСотрудников.Период КАК ДатаМероприятия,
		|	инкКадроваяИсторияСотрудников.Регистратор.Номер КАК КадровыйПриказНомер,
		|	инкКадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	инкКадроваяИсторияСотрудников.Должность КАК ТрудоваяФункция,
		|	инкКадроваяИсторияСотрудников.Должность.ОбщийКлассификаторЗанятий КАК КодПоОКЗ,
		|	инкКадроваяИсторияСотрудников.ВидСобытия КАК ВидМероприятия,
		|	""Приказ"" КАК НаименованиеДокументаОснования,
		|	инкКадроваяИсторияСотрудников.Период КАК ДатаДокументаОснования,
		|	инкКадроваяИсторияСотрудников.Регистратор.Номер КАК НомерДокументаОснования,
		|	инкКадроваяИсторияСотрудников.Регистратор.Ссылка КАК Регистратор,
		|	инкКадроваяИсторияСотрудников.Сотрудник.ТерриториальныеУсловия КАК ТерриториальныеУсловия
		|ИЗ
		|	РегистрСведений.инкКадроваяИсторияСотрудников КАК инкКадроваяИсторияСотрудников
		|ГДЕ
		|	инкКадроваяИсторияСотрудников.Период <= &Дата2
		|	И инкКадроваяИсторияСотрудников.Сотрудник В(&Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаМероприятия,
		|	КадровыйПриказНомер";
	
	Запрос.УстановитьПараметр("Сотрудники", ИсходныеДанные.СотрудникиМассив);
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьРезультатРасчетаВзносы_Раздел2(ИсходныеДанные)

	//
	МенеджерРасчета = Обработки.инкРасчетВзносов.Создать();
	//
	МенеджерРасчета.Инициализация();
	//
	МенеджерРасчета.ДанныеДляРасчетаВзносов.Организация = ИсходныеДанные.Организация;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.Дата1 = НачалоГода(ИсходныеДанные.Дата1);
	МенеджерРасчета.ДанныеДляРасчетаВзносов.Дата2 = ИсходныеДанные.Дата2;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.СформироватьТабличныеДокументы = Ложь;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.ВидОтчета = "Свод";
	
	//
	МенеджерРасчета.ВыполнитьРасчетВзносов();
	//         
	
	Возврат МенеджерРасчета.РезультатРасчета;		
	
КонецФункции   

#КонецОбласти                

#Область о // Сформировать табличные документы:

#Область о // Раздел 1: 

Функция ПолучитьРаздел1(ИсходныеДанные)

	Раздел2ТабличныйДокумент = Новый ТабличныйДокумент;

	Макет = ПолучитьМакет("ПФ_MXL_ФормаЕФС_Раздел1");   
	
	Для каждого СотрудникСтрока Из ИсходныеДанные.СотрудникиТаблица Цикл
		
		ВывестиРаздел1(Раздел2ТабличныйДокумент,Макет,СотрудникСтрока,ИсходныеДанные);
		
	КонецЦикла;	                
	
	Раздел2ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Раздел2ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат Раздел2ТабличныйДокумент;	
	
КонецФункции 

Процедура ВывестиРаздел1(ЕФСТабличныйДокумент,Макет,СотрудникСтрока,ИсходныеДанные)
	
	ОбластьДокумента = Макет.ПолучитьОбласть("Подраздел1");  
	ЗаполнитьЗначенияСвойств(ОбластьДокумента.Параметры,СотрудникСтрока);
	инкОтчетыСервер.ВывестиДанныеПоБуквенно(СотрудникСтрока.ИНН, ОбластьДокумента, "ИННРаботника", Мин(СтрДлина(СотрудникСтрока.ИНН), 12));
	КодКатегорииЗЛ = ПолучитьКодКатегорииЗЛ(СотрудникСтрока);
	инкОтчетыСервер.ВывестиДанныеПоБуквенно(КодКатегорииЗЛ, ОбластьДокумента, "КодКатегорииЗЛ", Мин(СтрДлина(КодКатегорииЗЛ), 4));
	инкОтчетыСервер.ВывестиДанныеПоБуквенно(СотрудникСтрока.Гражданство, ОбластьДокумента, "Гражданство", Мин(СтрДлина(СотрудникСтрока.Гражданство), 3));
	
	ЕФСТабличныйДокумент.Вывести(ОбластьДокумента);
	
	ОбластьДокумента = Макет.ПолучитьОбласть("Подраздел11");       
	ЕФСТабличныйДокумент.Вывести(ОбластьДокумента);
	
	ОбластьДокумента = Макет.ПолучитьОбласть("ШапкаПодраздела11");  
	ЕФСТабличныйДокумент.Вывести(ОбластьДокумента);
	
	ПоискДокументов = Новый Структура;
	ПоискДокументов.Вставить("Сотрудник",СотрудникСтрока.Сотрудник);
	КадровыеДокументыМассив = ИсходныеДанные.КадровыеИзмененияТаблица.НайтиСтроки(ПоискДокументов);
	
	НомерДокумента = 1;
	Для каждого КадровыйДокумент Из КадровыеДокументыМассив Цикл
		
		ОбластьДокумента = Макет.ПолучитьОбласть("СтрокаПодраздела11");  
		ЗаполнитьЗначенияСвойств(ОбластьДокумента.Параметры,КадровыйДокумент);
		ОбластьДокумента.Параметры.НомерСтрокиФормы = НомерДокумента;
		
		Если ТипЗнч(КадровыйДокумент.Регистратор) = Тип("ДокументСсылка.инкУвольнение") Тогда
			ОбластьДокумента.Параметры.ОснованиеУвольнения = КадровыйДокумент.Регистратор.Основание;								
		КонецЕсли;
		
		ЕФСТабличныйДокумент.Вывести(ОбластьДокумента);

		НомерДокумента = НомерДокумента + 1;
		
	КонецЦикла;	
	
	ЕФСТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
КонецПроцедуры 

Функция ПолучитьКодКатегорииЗЛ(СотрудникСтрока)
	
	Возврат " ГРФ";
	
КонецФункции

#КонецОбласти

#Область о // Раздел 2: 

Функция ПолучитьТитульный(ИсходныеДанные)
	
	ТитульныйТабличныйДокумент = Новый ТабличныйДокумент;
	ТитульныйМакет = ПолучитьМакет("ФормаОтчета2024Кв1_Титульный"); 
	
	// ОсновнаяЧасть1:
	ОбластьТаблицы = ТитульныйМакет.ПолучитьОбласть("ОсновнаяЧасть1");
	
	// Номер корректировки:
	ИмяРаздела = "НомерКорректировки";
	ДанныеЗначение = "000";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Расчетный (отчетный) период (код):
	ИмяРаздела = "Период";
	ДанныеЗначение = Формат(ИсходныеДанные.Дата2,"ДФ=MM");
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Календарный год:
	ИмяРаздела = "ОтчетГод";
	ДанныеЗначение = Формат(ИсходныеДанные.Дата2,"ДФ=yyyy");;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Прекращение деятельности:
	//ИмяРаздела = "ПрекращениеДеятельности";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	//// Страхователь представляет ЕФС-1 за себя:
	//ИмяРаздела = "ПризнакСтрахователя";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	////  Код территориального органа, принимающего ЕФС-1 *:
	//ИмяРаздела = "КодОргана";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Регистрационный номер:
	ИмяРаздела = "Предст_РегНомер";
	ДанныеЗначение = ИсходныеДанные.Организация.СНИЛС;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_НаимОрг:
	ИмяРаздела = "Предст_НаимОрг";
	ДанныеЗначение = ИсходныеДанные.Организация.Наименование;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_ИНН:
	ИмяРаздела = "Предст_ИНН";
	ДанныеЗначение = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_КПП:
	ИмяРаздела = "Предст_КПП";
	ДанныеЗначение = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_ОКФС:
	ИмяРаздела = "Предст_ОКФС";
	ДанныеЗначение = ИсходныеДанные.Организация.ОКФС;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	//// Предст_ОКОГУ:
	//ИмяРаздела = "Предст_ОКОГУ";
	//ДанныеЗначение = ИсходныеДанные.Организация.ОКОГУ;
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_ОКПО:
	ИмяРаздела = "Предст_ОКПО";
	ДанныеЗначение = ИсходныеДанные.Организация.ОКПО;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_ОКВЭД:
	ИмяРаздела = "Предст_ОКВЭД";
	ДанныеЗначение = ИсходныеДанные.Организация.ОКВЭД;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_ОГРН:
	ИмяРаздела = "Предст_ОГРН";
	ДанныеЗначение = ИсходныеДанные.Организация.ОГРН;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	//// Предст_КодКатСтрахФЛ:
	//ИмяРаздела = "Предст_КодКатСтрахФЛ";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_Телефон:
	ИмяРаздела = "Предст_Телефон";
	ДанныеЗначение = Справочники.инкОрганизации.ПолучитьКонтактныйТелефонОрганизации(ИсходныеДанные.Организация);
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Предст_ЭлПочта:
	ИмяРаздела = "Предст_ЭлПочта";
	ДанныеЗначение = "";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	//// РегНомер:
	//ИмяРаздела = "РегНомер";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// НаимОрг:
	//ИмяРаздела = "НаимОрг";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// ИНН:
	//ИмяРаздела = "ИНН";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// КПП:
	//ИмяРаздела = "КПП";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// ОКФС:
	//ИмяРаздела = "ОКФС";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// ОКОГУ:
	//ИмяРаздела = "ОКОГУ";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// ОКПО:
	//ИмяРаздела = "ОКПО";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// ОКВЭД:
	//ИмяРаздела = "ОКВЭД";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// ОГРН:
	//ИмяРаздела = "ОГРН";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// КодКатСтрахФЛ:
	//ИмяРаздела = "КодКатСтрахФЛ";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	//// Предст_Телефон:
	//ИмяРаздела = "Предст_Телефон";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	//
	//// Предст_ЭлПочта:
	//ИмяРаздела = "Предст_ЭлПочта";
	//ДанныеЗначение = "";
	//инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	ТитульныйТабличныйДокумент.Вывести(ОбластьТаблицы);
	
	// ОсновнаяЧасть2:
	ОбластьТаблицы = ТитульныйМакет.ПолучитьОбласть("ОсновнаяЧасть2");
	
	ДанныеРуководителя = Справочники.инкОрганизации.КадровыеДанныеРуководителя(ИсходныеДанные.Организация);
	
	// Рук_Должность:
	ИмяРаздела = "Рук_Должность";
	ДанныеЗначение = ДанныеРуководителя.Должность;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Рук_Фамилия:
	ИмяРаздела = "Рук_Фамилия";
	ДанныеЗначение = ДанныеРуководителя.Сотрудник.Фамилия;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Рук_Имя:
	ИмяРаздела = "Рук_Имя";
	ДанныеЗначение = ДанныеРуководителя.Сотрудник.Имя;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// Рук_Отчество:
	ИмяРаздела = "Рук_Отчество";
	ДанныеЗначение = ДанныеРуководителя.Сотрудник.Отчество;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	// ДатаПодписи:
	ИмяРаздела = "ДатаПодписи";
	ДанныеЗначение = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);
	
	ТитульныйТабличныйДокумент.Вывести(ОбластьТаблицы);        
	
	Возврат ТитульныйТабличныйДокумент;
	
КонецФункции

Функция ПолучитьРаздел23(ИсходныеДанные)

	Раздел23ТабличныйДокумент = Новый ТабличныйДокумент;
	Раздел2Макет = ПолучитьМакет("ФормаОтчета2024Кв1_Раздел23"); 
	
	ОбластьТаблицы = Раздел2Макет.ПолучитьОбласть("ОсновнаяЧасть");
	
	// Общееколичество рабочих мест страхователя:
	ИмяРаздела = "П000230000103";
	ДанныеЗначение = ИсходныеДанные.ЧисленностьЗастрахованных;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеЗначение,ОбластьТаблицы,Истина);

	Раздел23ТабличныйДокумент.Вывести(ОбластьТаблицы);        
	
	Возврат Раздел23ТабличныйДокумент;	
	
КонецФункции       

Функция ПолучитьРаздел2(ИсходныеДанные)

	Раздел2ТабличныйДокумент = Новый ТабличныйДокумент;
	Раздел2Макет = ПолучитьМакет("ФормаОтчета2023Кв1_Раздел2"); 
	
	ОбластьТаблицы = Раздел2Макет.ПолучитьОбласть("ОсновнаяЧасть");
	
	// Среднесписочная численность работников:
	ИмяРаздела = "П000020000100";
	ЧисленностьЧисло = Справочники.инкСотрудники.ПолучитьСреднесписочнуюЧисленность(ИсходныеДанные);
	ЧисленностьСтрока = Формат(ЧисленностьЧисло,"ЧДЦ=1ы");
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ЧисленностьСтрока,ОбластьТаблицы,Истина);
	
	// Численность застрахованных лиц:
	ИмяРаздела = "П000020000200";
	ЧисленностьЧисло = ИсходныеДанные.ЧисленностьЗастрахованных;
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ЧисленностьЧисло,ОбластьТаблицы,Истина);

	// Численность инвалидов:
	ИмяРаздела = "П000020000300";
	ЧисленностьЧисло = Справочники.инкСотрудники.ПолучитьЧисленностьИнвалидов(ИсходныеДанные);
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ЧисленностьЧисло,ОбластьТаблицы,Истина);
	
	//	Доход за период:                                             	
	ВывестиСтрокуТаблицы("П00021000010","Доход",ОбластьТаблицы,ИсходныеДанные);
	// 	Суммы, не подлежащие налогообложению:
	ВывестиСтрокуТаблицы("П00021000020","НеОблагаемыеСуммы",ОбластьТаблицы,ИсходныеДанные);
	//	База для исчисления взносов:
	ВывестиСтрокуТаблицы("П00021000030","ОблагаемаяБаза",ОбластьТаблицы,ИсходныеДанные);
	//  Размер страхового тарифа:
	ИмяРаздела = "П000210000503";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ИсходныеДанные.ФондТравматизма,ОбластьТаблицы,Истина);
	// Взносы НС  и ПЗ:	
	ВывестиСтрокуТаблицы("П00021000090","НСиПЗ",ОбластьТаблицы,ИсходныеДанные);
	
	Раздел2ТабличныйДокумент.Вывести(ОбластьТаблицы);        
	Раздел2ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат Раздел2ТабличныйДокумент;	
	
КонецФункции       

Процедура ВывестиСтрокуТаблицы(ИмяЯчейки,ИмяРаздела,ОбластьТаблицы,ИсходныеДанные)

	ДанныеПоПериоду = ПолучитьДанныеПоПериоду(ИмяРаздела,ИсходныеДанные);
	//		Всего с начала расчетного периода:
	ИмяРаздела = ИмяЯчейки+"3";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеПоПериоду.ВсегоСНачалаРасчетногоПериода,ОбластьТаблицы,Истина);
	//		На начало отчетного периода:
	ИмяРаздела = ИмяЯчейки+"4";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеПоПериоду.НаНачалоРасчетногоПериода,ОбластьТаблицы,Истина);
	//		1 месяц:
	ИмяРаздела = ИмяЯчейки+"5";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеПоПериоду.Месяц1,ОбластьТаблицы,Истина);
	//		2 месяц:
	ИмяРаздела = ИмяЯчейки+"6";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеПоПериоду.Месяц2,ОбластьТаблицы,Истина);
	//		3 месяц:
	ИмяРаздела = ИмяЯчейки+"7";
	инкОтчетыСервер.ВывестиДанныеВОбласти(ИмяРаздела,ДанныеПоПериоду.Месяц3,ОбластьТаблицы,Истина);

КонецПроцедуры

Функция ПолучитьДанныеПоПериоду(ИмяПоля,ИсходныеДанные)
	
	ДанныеПоПериоду = Новый Структура;
	ДанныеПоПериоду.Вставить("ВсегоСНачалаРасчетногоПериода");
	ДанныеПоПериоду.Вставить("НаНачалоРасчетногоПериода");
	ДанныеПоПериоду.Вставить("Месяц1");
	ДанныеПоПериоду.Вставить("Месяц2");
	ДанныеПоПериоду.Вставить("Месяц3");
	
	ПериодВыборки = Новый СтандартныйПериод;
	
	// ВсегоСНачалаРасчетногоПериода:
	ПериодВыборки.ДатаНачала 	= НачалоГода(ИсходныеДанные.Дата1);
	ПериодВыборки.ДатаОкончания = ИсходныеДанные.Дата2;
	ДанныеПоПериоду.ВсегоСНачалаРасчетногоПериода = ПолучитьДанныеПоВыборке(ПериодВыборки,ИмяПоля,ИсходныеДанные);
	
	// НаНачалоРасчетногоПериода:
	Если НачалоГода(ИсходныеДанные.Дата1) = ИсходныеДанные.Дата1 Тогда
		ДанныеПоПериоду.НаНачалоРасчетногоПериода = 0;
	Иначе
		ПериодВыборки.ДатаНачала 	= НачалоГода(ИсходныеДанные.Дата1);
		ПериодВыборки.ДатаОкончания = НачалоМесяца(ИсходныеДанные.Дата1)-1;
		ДанныеПоПериоду.НаНачалоРасчетногоПериода = ПолучитьДанныеПоВыборке(ПериодВыборки,ИмяПоля,ИсходныеДанные);
	КонецЕсли;
	
	// Помесячные данные:
	ТекущийМесяц = ИсходныеДанные.Дата1;
	Для НомерМесяца = 1 По 3 Цикл
		
		ПериодВыборки.ДатаНачала 	= ТекущийМесяц;
		ПериодВыборки.ДатаОкончания = ТекущийМесяц;

		ДанныеПоПериоду["Месяц"+НомерМесяца] = ПолучитьДанныеПоВыборке(ПериодВыборки,ИмяПоля,ИсходныеДанные);

		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц,1);
		
	КонецЦикла;
	
	Возврат ДанныеПоПериоду;
	
КонецФункции  

Функция ПолучитьДанныеПоВыборке(ПериодВыборки,ИмяПоля,ИсходныеДанные)
	
	ДанныеЧисло = 0;
	                                                         	
	МесяцВыборкиНачало = Месяц(ПериодВыборки.ДатаНачала);
	МесяцВыборкиКонец = Месяц(ПериодВыборки.ДатаОкончания);
	Для ТекущийМесяц = МесяцВыборкиНачало По МесяцВыборкиКонец Цикл
		
		ПоискМесяц = Новый Структура("Месяц",ТекущийМесяц);
		ВзносыЗаМесяцМассив = ИсходныеДанные.РезультатРасчетаВзносы.ВзносыТаблица_Месяц.НайтиСтроки(ПоискМесяц);
		
		Для каждого ВзносыСтрока Из ВзносыЗаМесяцМассив Цикл
			
			Если ИмяПоля = "НеОблагаемыеСуммы" Тогда
				ДанныеЧисло = ДанныеЧисло 
				            + ВзносыСтрока["Ст9ФЗ212"]
							+ ВзносыСтрока["МатПомощь"]
							; 
			ИначеЕсли ИмяПоля = "ОблагаемаяБаза" Тогда				
				ДанныеЧисло = ДанныеЧисло 
				            + ВзносыСтрока["Доход"]
							- ВзносыСтрока["Ст9ФЗ212"] 
							- ВзносыСтрока["МатПомощь"]
							;							
			Иначе
				ДанныеЧисло = ДанныеЧисло + ВзносыСтрока[ИмяПоля];	
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеЧисло;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#КонецОбласти

#КонецЕсли
