
// Функция - Файл выгрузки данных в банк
//
// Параметры:
//  ДокументСсылка	 - Ссылка - Документ "Ведомость на выплату зарплаты"
// 
// Возвращаемое значение:
//   - Структура - Включает в себя адрес файла и его имя
//
&НаСервере
Функция ФайлВыгрузкиДанныхВБанк(ДокументСсылка,Отказ) Экспорт
    
    ФайлВыгрузки = Новый Структура;
	ФайлВыгрузки.Вставить("ФайлАдрес");
	ФайлВыгрузки.Вставить("ФайлИмя");
    
    Попытка

		ДокументМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументСсылка);
		ДанныеДокумента = ДанныеВедомостиНаВыплатуЗарплатыВБанк(ДокументСсылка,Отказ);
		
		Если Отказ Тогда
			Возврат ФайлВыгрузки;	
		КонецЕсли;
		
		// Соответствие полей файла и данных документа зависит от версии формата, указанного в зарплатном проекте.
		СоответствиеПолейФайла = СоответствиеПолейФайла();
		
		КодировкаФайла = "UTF-8";
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку(КодировкаФайла);
		ЗаписьXML.ЗаписатьОбъявлениеXML();        
		
		Ошибки = Неопределено;
		
		Пакет = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоЗарплатнымПроектам.ПространствоИмен);
		
      	
		КорневыеСвойстваМассив = КорневыеСвойства();  
		ОбязательныеПоляФайлаСоответсвие = ОбязательныеПоляФайла();
		ПреобразованияЗначенийСоответствие = СоответствиеПреобразованияЗначений(); 
		
		ДанныеШапкиДокумента = ДанныеДокумента[ДокументСсылка];   
		ДанныеСтрокДокумента = ДанныеДокумента[ДокументСсылка].Сотрудники;
		
		Для Каждого КорневоеСвойство Из КорневыеСвойстваМассив Цикл
		
			КорневоеСвойствоXDTO = Пакет.КорневыеСвойства.Получить(КорневоеСвойство);
			КорневойОбъектXDTO = ФабрикаXDTO.Создать(КорневоеСвойствоXDTO.Тип);
			
			ЗаполнитьПоляФормата(КорневойОбъектXDTO, ДанныеШапкиДокумента, ДанныеСтрокДокумента,
								СоответствиеПолейФайла, ОбязательныеПоляФайлаСоответсвие,
								ПреобразованияЗначенийСоответствие, Ошибки);
			
			ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, КорневойОбъектXDTO, КорневоеСвойствоXDTO.ЛокальноеИмя, КорневоеСвойствоXDTO.URIПространстваИмен, , НазначениеТипаXML.Явное);
		
		КонецЦикла;
		
		ТекстXML = ЗаписьXML.Закрыть();
		ТекстXML = УдалитьПространствоИмен(ТекстXML, ДанныеШапкиДокумента.ФорматФайла, КодировкаФайла);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстXML);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаФайла);
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		ФайлВыгрузки.ФайлАдрес 	= ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		ФайлВыгрузки.ФайлИмя	= ДанныеДокумента[ДокументСсылка].ИмяФайла;
		
    Исключение
        Сообщить("Ошибка при формировании файла выгрузки. Описание: "+ОписаниеОшибки());
    КонецПопытки; 
    
    Возврат ФайлВыгрузки;    
    
КонецФункции                          

// Удаляет пространство имен из текста xml-файла для совместимости с форматами версии 1.0 и 3.0.
//
// Параметры:
//		СтрокаXML - Строка, текст xml-файла.
//
// Возвращаемое значение:
//		СтрокаXML - Строка, новый текст xml-файла без пространства имен.
//
Функция УдалитьПространствоИмен(ТекстXML, ФорматФайла, КодировкаФайла)
	
	МассивИменСвойствСумм = Новый Массив;
	Пакет = ФабрикаXDTO.Пакеты.Получить(Метаданные.ПакетыXDTO.ФорматОбменаСБанкамиПоЗарплатнымПроектам.ПространствоИмен);
	Для Каждого КорневоеСвойство Из Пакет.КорневыеСвойства Цикл
		КорневойОбъектXDTO = ФабрикаXDTO.Создать(КорневоеСвойство.Тип);
		ДополнитьМассивИменСвойствСумм(МассивИменСвойствСумм, КорневойОбъектXDTO, КорневоеСвойство.Имя);
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(КодировкаФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ИмяЭлемента = "";
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяЭлемента = ИмяЭлемента + ?(ИмяЭлемента = "", "", "\") + ЧтениеXML.Имя;
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если (ЧтениеXML.Имя = "xmlns"
							Или ЧтениеXML.Имя = "xmlns:xs"
							Или ЧтениеXML.Имя = "xmlns:xsi"
							Или ЧтениеXML.Имя = "xsi:type")
						И (ФорматФайла = Перечисления.ФорматыФайловОбменаПоЗарплатномуПроекту.Версия1
							Или ФорматФайла = Перечисления.ФорматыФайловОбменаПоЗарплатномуПроекту.Версия3)Тогда
						Продолжить;
					КонецЕсли;
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если МассивИменСвойствСумм.Найти(ИмяЭлемента) = Неопределено Тогда
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			Иначе
				ЗаписьXML.ЗаписатьТекст(Формат(Число(ЧтениеXML.Значение), "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧГ=0"));
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ИмяЭлемента = Лев(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрДлина(ЧтениеXML.Имя) - 1);
		Иначе
			ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Получает данные документа.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//		ПлатежныйДокумент - Ссылка на платежный документ, в который входят ведомости.
//
// Возвращаемое значение:
//		Соответствие - где Ключ - ссылка на документ, Значение - структура документа.
//
Функция ДанныеВедомостиНаВыплатуЗарплатыВБанк(ДокументСсылка,Отказ) Экспорт
	
	ДанныеДокументов = Новый Соответствие; 
	
	ДанныеДокумента = ДанныеЗаполненияВедомости();
	
	// Шапка документа:
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостьНаВыплатуЗарплаты.Ссылка КАК Документ,
		|	инкВедомостьНаВыплатуЗарплаты.Номер КАК НомерДокумента,
		|	инкВедомостьНаВыплатуЗарплаты.Дата КАК ДатаДокумента,
		|	инкВедомостьНаВыплатуЗарплаты.Организация.Наименование КАК ПолноеНаименованиеОрганизации,
		|	инкВедомостьНаВыплатуЗарплаты.НомерРеестра КАК НомерРеестра,
		|	инкВедомостьНаВыплатуЗарплаты.Организация.ИНН КАК ИННОрганизации,
		|	инкВедомостьНаВыплатуЗарплаты.Организация.ОКПО КАК КодПоОКПО,
		|	инкВедомостьНаВыплатуЗарплаты.Организация КАК Организация,
		|	инкВедомостьНаВыплатуЗарплаты.Подразделение КАК Подразделение,
		|	инкВедомостьНаВыплатуЗарплаты.ЗарплатныйПроект КАК ЗарплатныйПроект,
		|	инкВедомостьНаВыплатуЗарплаты.ЗарплатныйПроект.ДоговорНомер КАК НомерДоговора,
		|	инкВедомостьНаВыплатуЗарплаты.ЗарплатныйПроект.ДоговорДата КАК ДатаДоговора,
		|	инкВедомостьНаВыплатуЗарплаты.ЗарплатныйПроект.РасчетныйСчет.Банк КАК ОтделениеБанка,
		|	инкВедомостьНаВыплатуЗарплаты.ЗарплатныйПроект.РасчетныйСчет.Банк.Код КАК БИКБанка,
		|	инкВедомостьНаВыплатуЗарплаты.ЗарплатныйПроект.РасчетныйСчет.НомерСчета КАК НомерРасчетногоСчетаОрганизации,
		|	инкВедомостьНаВыплатуЗарплаты.ВерсияДанных КАК ВерсияДанных,
		|	инкВедомостьНаВыплатуЗарплаты.ПометкаУдаления КАК ПометкаУдаления,
		|	инкВедомостьНаВыплатуЗарплаты.Проведен КАК Проведен,
		|	инкВедомостьНаВыплатуЗарплаты.ДатаВыплаты КАК ДатаВыплаты,
		|	инкВедомостьНаВыплатуЗарплаты.Ответственный КАК Ответственный,
		|	инкВедомостьНаВыплатуЗарплаты.Комментарий КАК Комментарий,
		|	инкВедомостьНаВыплатуЗарплаты.ДокументОснование КАК ДокументОснование,
		|	инкВедомостьНаВыплатуЗарплаты.Организация.Руководитель КАК Руководитель,
		|	инкВедомостьНаВыплатуЗарплаты.Организация.Бухгалтер КАК ГлавныйБухгалтер,
		|	инкВедомостьНаВыплатуЗарплаты.Организация.Бухгалтер КАК Бухгалтер
		|ИЗ
		|	Документ.инкВедомостьНаВыплатуЗарплаты КАК инкВедомостьНаВыплатуЗарплаты
		|ГДЕ
		|	инкВедомостьНаВыплатуЗарплаты.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеДокумента,ВыборкаДетальныеЗаписи);   

		ДанныеДокумента.ИдПервичногоДокумента = ДанныеДокумента.Документ.УникальныйИдентификатор();
		ДанныеДокумента.ОтделениеБанка = ПолучитьНомерОтделениеБанка(ВыборкаДетальныеЗаписи.ОтделениеБанка);
		ДанныеДокумента.ИмяФайла = "ЗИК11_"+ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(ДанныеДокумента.Документ, ДанныеДокумента.ОтделениеБанка, "1", "z");
		
	КонецЦикла;
	
	// Табличная часть документа:
	СотрудникиМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.НомерСтроки КАК НомерСтроки,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Сотрудник.Фамилия КАК Фамилия,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Сотрудник.Имя КАК Имя,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Сотрудник.Отчество КАК Отчество,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Сотрудник.ЛицевойСчет КАК НомерЛицевогоСчета,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.КВыплате КАК СуммаКВыплате,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Ссылка.ЗарплатныйПроект.РасчетныйСчет.Банк КАК ОтделениеБанка,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Ссылка.ЗарплатныйПроект.РасчетныйСчет.ВалютаСчета.Код КАК КодВалюты,
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.инкВедомостьНаВыплатуЗарплаты.Зарплата КАК инкВедомостьНаВыплатуЗарплатыЗарплата
		|ГДЕ
		|	инкВедомостьНаВыплатуЗарплатыЗарплата.Ссылка = &ДокументСсылка";

	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	КоличествоЗаписей = 0;
	СуммаИтого = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеЗаполненияСтруктура =	ДанныеЗаполненияСтрокиВедомости();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполненияСтруктура,ВыборкаДетальныеЗаписи);
		ДанныеЗаполненияСтруктура.ОтделениеБанка = ПолучитьНомерОтделениеБанка(ВыборкаДетальныеЗаписи.ОтделениеБанка);
		
		ДанныеДокумента.Сотрудники.Добавить(ДанныеЗаполненияСтруктура); 

		КоличествоЗаписей = КоличествоЗаписей + 1;
		СуммаИтого = СуммаИтого + ВыборкаДетальныеЗаписи.СуммаКВыплате;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НомерЛицевогоСчета) Тогда
			Отказ = Истина;	
			инкОбщийКлиентСервер.СообщитьПользователю("Внимание! У сотрудника: "+ВыборкаДетальныеЗаписи.Сотрудник
													 +" не задан лицевой счет.");
		КонецЕсли;
		
	КонецЦикла;                 
	
	// Дополнительные данные:
	//ДанныеДокумента.НомерПлатежногоПоручения 	= ДокументСсылка.Номер;
	//ДанныеДокумента.ДатаПлатежногоПоручения		= ДокументСсылка.Дата;
	ДанныеДокумента.ДатаФормирования 			= ТекущаяДата();
	ДанныеДокумента.ФорматФайла					= Перечисления.ФорматыФайловОбменаПоЗарплатномуПроекту.Версия36;
	ДанныеДокумента.КоличествоЗаписей			= КоличествоЗаписей;
	ДанныеДокумента.СуммаИтого					= СуммаИтого;
	
	ДанныеДокументов.Вставить(ДокументСсылка, ДанныеДокумента);
	
	Если Отказ Тогда
		инкОбщийКлиентСервер.СообщитьПользователю("Загрузка данных прервана.");
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции 

Функция ПолучитьНомерОтделениеБанка(ОтделениеБанка)
	
	НомерОтделенияБанка = "";
	
	НомераВСтрокеМассив = инкОбщийКлиентСервер.НайтиЧислаВСтроке(ОтделениеБанка);
	Если НомераВСтрокеМассив.Количество() > 0 Тогда
		НомерОтделенияБанка = Строка(НомераВСтрокеМассив[0]);	
	КонецЕсли;		
	
	Возврат НомерОтделенияБанка;
	
КонецФункции

// Получает наименование файла по переданным параметрам.
//
// Параметры:
// 	Ссылка - ДокументСсылка - документ, по которому формируется имя файла.
// 	ОтделениеБанка - Строка - номер отделения, в котором открыты счета физических лиц, 
//                            на которые должны быть зачислены суммы, указанные в Реестре.
//  НомерДокумента - Число - порядковый номер Реестра.
//  ПризнакТипаСписка - признак типа списка 
//    "z" - зачисление заработной платы, 
//    "o" - открытие лицевых счетов, 
//    "y" - результат зачисления заработной платы, 
//    "n" - результат открытия лицевых счетов
//    "u" - закрытие лицевых счетов.
//
// Возвращаемое значение:
//  Строка - сформированное название файла.
//
Функция ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(Ссылка, ОтделениеБанка, НомерДокумента, ПризнакТипаСписка) Экспорт
	
	ИмяФайла = СтрШаблон(
		"%1%2%3.xml",
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ОтделениеБанка, 4),
		Прав(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерДокумента, 3), 3),
		ПризнакТипаСписка);
	
	Возврат ИмяФайла;
	
КонецФункции

// Возвращает структуру документа, используемую для формирования файла обмена, печатного документа.
//
Функция ДанныеЗаполненияВедомости() 
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Документ", Документы.инкВедомостьНаВыплатуЗарплаты.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерДокумента", "");
	ДанныеЗаполнения.Вставить("НомерДокументаНаПечать", "");
	ДанныеЗаполнения.Вставить("ДатаДокумента", Дата("00010101"));
	ДанныеЗаполнения.Вставить("НомерРеестра", "");
	ДанныеЗаполнения.Вставить("ВидДоходаИсполнительногоПроизводства", "1");
	ДанныеЗаполнения.Вставить("ПериодРегистрации", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ПолноеНаименованиеОрганизации", "");
	ДанныеЗаполнения.Вставить("ИННОрганизации", "");
	ДанныеЗаполнения.Вставить("КодПоОКПО", "");
	ДанныеЗаполнения.Вставить("Организация", Справочники.инкОрганизации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Подразделение", Справочники.инкПодразделения.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ЗарплатныйПроект", Справочники.инкЗарплатныеПроекты.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерДоговора", "");
	ДанныеЗаполнения.Вставить("ДатаДоговора", Дата("00010101"));
	ДанныеЗаполнения.Вставить("НомерРасчетногоСчетаОрганизации", "");
	ДанныеЗаполнения.Вставить("ОтделениеБанка", "");
	ДанныеЗаполнения.Вставить("ИспользоватьЭлектронныйДокументооборотСБанком", Ложь);
	ДанныеЗаполнения.Вставить("БИКБанка", "");
	ДанныеЗаполнения.Вставить("ФорматФайла", Перечисления.ФорматыФайловОбменаПоЗарплатномуПроекту.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("КодировкаФайла", "UTF8");
	ДанныеЗаполнения.Вставить("ВидЗачисления", "01"); 
	ДанныеЗаполнения.Вставить("КоличествоЗаписей", 0);
	ДанныеЗаполнения.Вставить("СуммаИтого", 0);
	ДанныеЗаполнения.Вставить("СуммаПоДокументу", 0);
	ДанныеЗаполнения.Вставить("ИдПервичногоДокумента", "");
	ДанныеЗаполнения.Вставить("НомерПлатежногоПоручения", "");
	ДанныеЗаполнения.Вставить("ДатаПлатежногоПоручения", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ДатаФормирования", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ИмяФайла", "");
	ДанныеЗаполнения.Вставить("ДанныеРеестра", "");
	ДанныеЗаполнения.Вставить("Руководитель", "");
	ДанныеЗаполнения.Вставить("РуководительДолжность", "");
	ДанныеЗаполнения.Вставить("ГлавныйБухгалтер", "");
	ДанныеЗаполнения.Вставить("ГлавныйБухгалтерДолжность", "");
	ДанныеЗаполнения.Вставить("Бухгалтер", "");
	ДанныеЗаполнения.Вставить("БухгалтерДолжность", "");
	
	ДанныеЗаполнения.Вставить("Сотрудники", Новый Массив);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру строки документа, используемую для формирования файла обмена, печатного документа.
//
Функция ДанныеЗаполненияСтрокиВедомости() Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ФизическоеЛицо", "");
	ДанныеЗаполнения.Вставить("НомерСтроки", 0);
	ДанныеЗаполнения.Вставить("Фамилия", "");
	ДанныеЗаполнения.Вставить("Имя", "");
	ДанныеЗаполнения.Вставить("Отчество", "");
	ДанныеЗаполнения.Вставить("НомерЛицевогоСчета", "");
	ДанныеЗаполнения.Вставить("СуммаКВыплате", 0);
	ДанныеЗаполнения.Вставить("ВзысканнаяСумма", 0);
	ДанныеЗаполнения.Вставить("ОтделениеБанка", "");
	ДанныеЗаполнения.Вставить("ФилиалОтделенияБанка", "");
	ДанныеЗаполнения.Вставить("КодВалюты", "");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Получает соответствие между полями файла и полями выгружаемой коллекции.
//
// Параметры:
//		ВидОперации - Вид операции обмена с банками, для которого получается соответствие полей.
//		ФорматФайла - Версия формата файла для обмена с банками, указанная в зарплатном проекте.
//
// Возвращаемое значение:
//		СоответствиеПолей - Соответствие полей файла.
//			Ключ элемента соответствия идентифицирует название поля в файле.
//			Значение элемента соответствия идентифицирует название поля в коллекции.
//
Функция СоответствиеПолейФайла()
	
	СоответствиеПолей = Новый Соответствие;
	
	СоответствиеПолей.Вставить("ВидЗачисления",            "ВидЗачисления");
	СоответствиеПолей.Вставить("КодВидаДохода", 		   "ВидДоходаИсполнительногоПроизводства");
	СоответствиеПолей.Вставить("ПлатежноеПоручение",       "НомерПлатежногоПоручения");
	СоответствиеПолей.Вставить("ДатаПлатежногоПоручения",  "ДатаПлатежногоПоручения");
	
	СоответствиеПолей.Вставить("ДатаФормирования",         "ДатаФормирования");
	СоответствиеПолей.Вставить("НомерДоговора",            "НомерДоговора");
	СоответствиеПолей.Вставить("ДатаДоговора",             "ДатаДоговора");
	СоответствиеПолей.Вставить("НаименованиеОрганизации",  "ПолноеНаименованиеОрганизации");
	СоответствиеПолей.Вставить("ИНН",                      "ИННОрганизации");
	СоответствиеПолей.Вставить("РасчетныйСчетОрганизации", "НомерРасчетногоСчетаОрганизации");
	СоответствиеПолей.Вставить("БИК",                      "БИКБанка");
	СоответствиеПолей.Вставить("ИдПервичногоДокумента",    "ИдПервичногоДокумента");
	СоответствиеПолей.Вставить("НомерРеестра",             "НомерРеестра");
	СоответствиеПолей.Вставить("ДатаРеестра",              "ДатаДокумента");
	
	СоответствиеЗачислениеЗарплаты = Новый Соответствие;
	СоответствиеЗачислениеЗарплаты.Вставить("Нпп", "НомерСтроки");
	СоответствиеЗачислениеЗарплаты.Вставить("Фамилия",              "Фамилия");
	СоответствиеЗачислениеЗарплаты.Вставить("Имя",                  "Имя");
	СоответствиеЗачислениеЗарплаты.Вставить("Отчество",             "Отчество");
	СоответствиеЗачислениеЗарплаты.Вставить("ОтделениеБанка",       "ОтделениеБанка");
	СоответствиеЗачислениеЗарплаты.Вставить("ФилиалОтделенияБанка", "ФилиалОтделенияБанка");
	СоответствиеЗачислениеЗарплаты.Вставить("ЛицевойСчет",          "НомерЛицевогоСчета");
	СоответствиеЗачислениеЗарплаты.Вставить("Сумма",                "СуммаКВыплате");
	СоответствиеЗачислениеЗарплаты.Вставить("КодВалюты",            "КодВалюты");
	СоответствиеЗачислениеЗарплаты.Вставить("ОбщаяСуммаУдержаний", "ВзысканнаяСумма");
	СоответствиеПолей.Вставить("ЗачислениеЗарплаты", СоответствиеЗачислениеЗарплаты);
	
	СоответствиеКонтрольныеСуммы = Новый Соответствие;
	СоответствиеКонтрольныеСуммы.Вставить("КоличествоЗаписей", "КоличествоЗаписей");
	СоответствиеКонтрольныеСуммы.Вставить("СуммаИтого",        "СуммаИтого");
	СоответствиеПолей.Вставить("КонтрольныеСуммы", СоответствиеКонтрольныеСуммы);
		
	Возврат СоответствиеПолей;
	
КонецФункции

// Преобразует значение коллекции, в соответствии с полем преобразования.
//
// Параметры:
//		ЗначениеДляПреобразования - значение для преобразования.
//		СоответствиеПреобразованияЗначений - соответствие для преобразования значений.
//
Функция ПреобразованноеЗначениеПоСоответствию(Знач ЗначениеДляПреобразования, СоответствиеПреобразованияЗначений)
	
	ЗначениеДляПоиска = ?(ТипЗнч(ЗначениеДляПреобразования) = Тип("Строка"), ВРег(ЗначениеДляПреобразования), ЗначениеДляПреобразования);
	
	НайденноеЗначение = СоответствиеПреобразованияЗначений.Получить(ЗначениеДляПоиска);
	Если Не НайденноеЗначение = Неопределено Тогда
		ПреобразованноеЗначение = НайденноеЗначение;
	Иначе
		ПреобразованноеЗначение = ЗначениеДляПреобразования;
	КонецЕсли;
	
	Возврат ПреобразованноеЗначение;
	
КонецФункции                                          

// Проверяет есть ли заполненные свойства в объекте XDTO.
// Параметры:
//		ОбъектXDTO - проверяемый объект XDTO
//				может иметь тип:
//								ОбъектXDTO
//								СвойствоXDTO, у которого тип ТипОбъектаXDTO.
//		КоллекцияСвойств - коллекция свойств проверяемого объекта XDTO.
//
// Возвращаемое значение:
//		Если есть хоть одно заполненное свойство возвращает ИСТИНА, иначе ЛОЖЬ.
//
Функция ОбъектXDTOЗаполнен(ОбъектXDTO, КоллекцияСвойств)
	
	ОбъектЗаполнен = Ложь;
	Если Не ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Возврат ОбъектЗаполнен;
	КонецЕсли;
	
	Для Каждого СвойствоОбъектаXDTO Из КоллекцияСвойств Цикл
		
		Если ТипЗнч(ОбъектXDTO[СвойствоОбъектаXDTO.Имя]) = Тип("ОбъектXDTO") Тогда
			ОбъектЗаполнен = ОбъектЗаполнен ИЛИ ОбъектXDTOЗаполнен(ОбъектXDTO[СвойствоОбъектаXDTO.Имя], ОбъектXDTO[СвойствоОбъектаXDTO.Имя].Свойства());
		Иначе
			ОбъектЗаполнен = ОбъектЗаполнен ИЛИ ЗначениеЗаполнено(ОбъектXDTO[СвойствоОбъектаXDTO.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектЗаполнен;
	
КонецФункции

// Заполняет поля ОбъектаXDTO по соответствию полей.
//
// Параметры:
//		ОбъектXDTO - заполняемый ОбъектXDTO.
//		ТекущиеДанные - Коллекция с набором текущих значений.
//		ДанныеСтрокДокумента - коллекция с набором значений строк документа.
//		СоответствиеПолей - соответствие между полями формата и полями выгружаемой коллекции.
//		ОбязательныеПоля - массив обязательных для заполнения полей формата.
//		СоответствиеПреобразованияЗначений - соответствие полей для преобразования.
//		Ошибки - Структура ошибок, которые будут показаны пользователю.
//				Добавляются с помощью метода "ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю".
//
Процедура ЗаполнитьПоляФормата(ОбъектXDTO, ТекущиеДанные, ДанныеСтрокДокумента, СоответствиеПолей, ОбязательныеПоля, СоответствиеПреобразованияЗначений, Ошибки)
	
	Для Каждого СвойствоОбъектаXDTO Из ОбъектXDTO.Свойства() Цикл
		
		Если ТипЗнч(ОбъектXDTO[СвойствоОбъектаXDTO.Имя]) = Тип("СписокXDTO") И ТипЗнч(СвойствоОбъектаXDTO.Тип) = Тип("ТипОбъектаXDTO") Тогда
			
			СписокXDTO = ОбъектXDTO.ПолучитьСписок(СвойствоОбъектаXDTO.Имя);
			
			Для Каждого СтрокаДокумента Из ДанныеСтрокДокумента Цикл
				ОбъектXDTOизСвойстваXDTO = ФабрикаXDTO.Создать(СвойствоОбъектаXDTO.Тип);
				ЗаполнитьПоляФормата(ОбъектXDTOизСвойстваXDTO, СтрокаДокумента, ДанныеСтрокДокумента, СоответствиеПолей, ОбязательныеПоля, СоответствиеПреобразованияЗначений, Ошибки);
				СписокXDTO.Добавить(ОбъектXDTOизСвойстваXDTO);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеСоответствияПолей = СоответствиеПолей.Получить(СвойствоОбъектаXDTO.Имя);
		Если ЗначениеСоответствияПолей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОбязательностиЗаполнения = ОбязательныеПоля.Получить(СвойствоОбъектаXDTO.Имя);
		Если ТипЗнч(ЗначениеОбязательностиЗаполнения) = Тип("Соответствие") Тогда
			ЗначениеОбязательноДляЗаполнения = ЗначениеОбязательностиЗаполнения.Получить("ЗначениеОбязательноДляЗаполнения") <> Неопределено;
		Иначе
			ЗначениеОбязательноДляЗаполнения = ЗначениеОбязательностиЗаполнения <> Неопределено;
		КонецЕсли;
		ЗначениеКорректно = Истина;
		
		Если ТипЗнч(ЗначениеСоответствияПолей) = Тип("Соответствие") Тогда
			
			Если Не СвойствоОбъектаXDTO = Неопределено Тогда
				ЗначениеПоля = ФабрикаXDTO.Создать(СвойствоОбъектаXDTO.Тип);
				ЗначениеОбязательностиЗаполнения = ?(ЗначениеОбязательностиЗаполнения = Неопределено, Новый Соответствие, ЗначениеОбязательностиЗаполнения);
				ЗаполнитьПоляФормата(ЗначениеПоля, ТекущиеДанные, ДанныеСтрокДокумента, ЗначениеСоответствияПолей, ЗначениеОбязательностиЗаполнения, СоответствиеПреобразованияЗначений, Ошибки);
				ЗначениеКорректно = ОбъектXDTOЗаполнен(ЗначениеПоля, ЗначениеПоля.Свойства());
			Иначе
				ЗначениеКорректно = Ложь;
			КонецЕсли;
			
		Иначе
			ЗначениеПоля = ТекущиеДанные[ЗначениеСоответствияПолей];
		КонецЕсли;
		
		ЗначениеПоля = ПреобразованноеЗначениеПоСоответствию(ЗначениеПоля, СоответствиеПреобразованияЗначений);
		Если (Не ЗначениеКорректно И Не ЗначениеОбязательноДляЗаполнения)
			ИЛИ ((ЗначениеОбязательностиЗаполнения = Неопределено ИЛИ ЗначениеОбязательностиЗаполнения = Ложь)
				И Не ЗначениеЗаполнено(ЗначениеПоля)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвойствоОбъектаXDTO.Тип.Имя = "string" ИЛИ СвойствоОбъектаXDTO.Тип.БазовыйТип.Имя = "string" Тогда
			
			ЗначениеПоля = Строка(ЗначениеПоля);
			Для Каждого Фасет Из СвойствоОбъектаXDTO.Тип.Фасеты Цикл
				
				Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
					
					ЗначениеПоля = Лев(ЗначениеПоля, Число(Фасет.Значение));
					
				ИначеЕсли Фасет.Вид = ВидФасетаXDTO.МинДлина Тогда
					
					Если Число(Фасет.Значение) > СтрДлина(ЗначениеПоля) Тогда
						Для Шаг = СтрДлина(ЗначениеПоля) + 1 По Число(Фасет.Значение) Цикл
							ЗначениеПоля = " " + ЗначениеПоля;
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли Фасет.Вид = ВидФасетаXDTO.Длина И СтрДлина(ЗначениеПоля) <> Число(Фасет.Значение) Тогда
					
					ЗначениеКорректно = Ложь;
					
					Если СвойствоОбъектаXDTO.Имя = "НомерСчета" Тогда
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
							"Объект.Сотрудники[%1]." + ЗначениеСоответствияПолей,
							СтрШаблон(
								НСтр("ru = 'У сотрудника %1 неверный номер лицевого счета, он должен содержать 20 цифр - %2.'"), 
								ТекущиеДанные.Сотрудник, ЗначениеПоля),
							СвойствоОбъектаXDTO.Имя,
							ТекущиеДанные.НомерСтроки,
							НСтр("ru = 'В строке %1 неверный номер лицевого счета, он должен содержать 20 цифр.'"));
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СвойствоОбъектаXDTO.Тип.Имя = "date" ИЛИ СвойствоОбъектаXDTO.Тип.БазовыйТип.Имя = "date" Тогда
			
			ЗначениеПоля = Дата(ЗначениеПоля);
			
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Или ТипЗнч(ЗначениеПоля) = Тип("Дата") Или ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
				ЗначениеКорректно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеКорректно ИЛИ ЗначениеОбязательноДляЗаполнения Тогда
			
			Если СвойствоОбъектаXDTO.Тип.Имя = "Счет" И Не ЗначениеКорректно Тогда
				Продолжить;
			КонецЕсли;
			
			// Элементы с maxOccurs="unbounded" (рабочий телефон, например) - это список элементов данных XDTO
			Если ТипЗнч(ОбъектXDTO[СвойствоОбъектаXDTO.Имя]) = Тип("СписокXDTO") Тогда
				ОбъектXDTO[СвойствоОбъектаXDTO.Имя].Добавить(ЗначениеПоля);
			Иначе	
				ОбъектXDTO[СвойствоОбъектаXDTO.Имя] = ЗначениеПоля;
			КонецЕсли	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает корневые свойства XDTO-пакета формируемого файла.
//
// Параметры:
//		ВидОперации - Вид операции обмена с банками, для которого получаются корневые свойства XDTO-пакета.
//
//	Возвращаемое значение:
//		КорневыеСвойства - Соответствие - корневые свойства XDTO-пакета, выгружаемые для этого вида документов.
//			Ключ элемента соответствия идентифицирует название корневого свойства.
//			В значении элемента указывается массив свойств, которые будут выгружены.
//
Функция КорневыеСвойства() 
	
	КорневыеСвойства = Новый Массив;
	КорневыеСвойства.Добавить("СчетаПК");
		
	Возврат КорневыеСвойства;
	
КонецФункции

// Получает соответствие обязательных для заполнения полей файла.
//
// Параметры:
//		ВидОперации - Вид операции обмена с банками, для которого получаются обязательные для заполнения в файле поля.
//
// Возвращаемое значение:
//		ОбязательныеПоля - Соответствие полей файла.
//			Ключ элемента соответствия идентифицирует название поля, обязательного для заполнения.
//			В значении указывается Истина,если поле обязательно для заполнения, иначе Ложь.
//			По умолчанию, если поле не включено в соответствие, используется значение Ложь.
//
// Для группы используется соответствие обязательных полей, где также можно указать обязательность самой группы
// добавив элемент "ЗначениеОбязательноДляЗаполнения".
//
Функция ОбязательныеПоляФайла() 
	
	ОбязательныеПоля = Новый Соответствие;
	
	ОбязательныеПоля.Вставить("ДатаФормирования", Истина);
	ОбязательныеПоля.Вставить("НомерДоговора", Истина);
	ОбязательныеПоля.Вставить("НаименованиеОрганизации", Истина);
	
	СоответствиеЗачислениеЗарплаты = Новый Соответствие;
	СоответствиеЗачислениеЗарплаты.Вставить("Фамилия", Истина);
	СоответствиеЗачислениеЗарплаты.Вставить("Имя", Истина);
	СоответствиеЗачислениеЗарплаты.Вставить("ЛицевойСчет", Истина);
	СоответствиеЗачислениеЗарплаты.Вставить("Сумма", Истина);
	ОбязательныеПоля.Вставить("ЗачислениеЗарплаты", СоответствиеЗачислениеЗарплаты);
	
	СоответствиеКонтрольныеСуммы = Новый Соответствие;
	СоответствиеКонтрольныеСуммы.Вставить("КоличествоЗаписей", Истина);
	СоответствиеКонтрольныеСуммы.Вставить("СуммаИтого", Истина);
	ОбязательныеПоля.Вставить("КонтрольныеСуммы", СоответствиеКонтрольныеСуммы);
		
	Возврат ОбязательныеПоля;
	
КонецФункции  

// Получает соответствие значений для преобразования.
//
// Параметры:
//		ВидОперации - Вид операции обмена с банками, для которого получается соответствие преобразования значений полей.
//
// Возвращаемое значение:
//		СоответствиеПреобразованияЗначений - соответствие значений для преобразования.
//			Ключ элемента соответствия идентифицирует преобразуемое значение.
//			Значение элемента соответствия идентифицирует преобразованное значение.
//
Функция СоответствиеПреобразованияЗначений() 
	
	СоответствиеПреобразованияЗначений = Новый Соответствие;
	
	СоответствиеПреобразованияЗначений.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ДоходыБезОграниченияВзысканий,  "");
	СоответствиеПреобразованияЗначений.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения,         "1");
	СоответствиеПреобразованияЗначений.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые,        "2");
	СоответствиеПреобразованияЗначений.Вставить(Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые,          "3");

	Возврат СоответствиеПреобразованияЗначений;
	
КонецФункции

Процедура ДополнитьМассивИменСвойствСумм(МассивИменСвойствСумм, ОбъектXDTO, ПолныйПутьСвойства)
	
	Для Каждого СвойствоОбъекта Из ОбъектXDTO.Свойства() Цикл
		Если СвойствоОбъекта.Тип.Имя = "Сумма" И СвойствоОбъекта.Тип.БазовыйТип.Имя = "decimal" Тогда
			МассивИменСвойствСумм.Добавить(ПолныйПутьСвойства + "\" + СвойствоОбъекта.Имя);
		КонецЕсли;
		СвойствоОбъектаXDTO = ФабрикаXDTO.Создать(СвойствоОбъекта.Тип);
		Если СвойствоОбъектаXDTO <> Неопределено Тогда
			ДополнитьМассивИменСвойствСумм(МассивИменСвойствСумм, СвойствоОбъектаXDTO, ПолныйПутьСвойства + "\" + СвойствоОбъекта.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
