
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура - Загрузить новости с сайта
//
Процедура ЗагрузитьНовостиССайта() Экспорт

	Если НЕ Константы.инкЗагрузкаНовостейССайта.Получить() Тогда
		Возврат;
	КонецЕсли;  
	
	РезультатДоступностиСервера = инкИнтернетСервисы.ПроверитьДоступностьСервера(Ложь);
	
	Если НЕ РезультатДоступностиСервера Тогда
		Возврат;
	КонецЕсли;

	РезультатОтправки = ПолучитьМассивНовостейССервера();
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
    // Обработка ответа:
	Попытка
		
		НовостиТаблица = ОбработатьОтветИзJSON(РезультатОтправки.Содержимое); 
		
		Если НовостиТаблица = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаписатьНовостиВРегистр(НовостиТаблица); 
		
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры      

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Записать новости в регистр
//
// Параметры:
//  НовостиТаблица	 - Таблица значений	 - Таблица с новостями;
//
Процедура ЗаписатьНовостиВРегистр(НовостиТаблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНовости.НомерНовости КАК НомерНовости
		|ИЗ
		|	РегистрСведений.инкНовости КАК инкНовости
		|ГДЕ
		|	инкНовости.НомерНовости В (&НомераМассив)";
	
	НомераМассив = НовостиТаблица.ВыгрузитьКолонку("НомерНовости");
	Запрос.Параметры.Вставить("НомераМассив",НомераМассив);
	ЗагруженныеНовостиТаблица = Запрос.Выполнить().Выгрузить();
	
	НовостиНабор = РегистрыСведений.инкНовости.СоздатьНаборЗаписей();
	Для каждого НовостиТаблицаСтрока Из НовостиТаблица Цикл
		
		ПоискНовости = Новый Структура("НомерНовости",НовостиТаблицаСтрока.НомерНовости);
		ЗагруженныеНовостиМассив = ЗагруженныеНовостиТаблица.НайтиСтроки(ПоискНовости);
		Если ЗагруженныеНовостиМассив.Количество() = 0 Тогда
			
			НовостиНаборСтрока = НовостиНабор.Добавить();
			ЗаполнитьЗначенияСвойств(НовостиНаборСтрока,НовостиТаблицаСтрока);
			
		КонецЕсли;
		
	КонецЦикла;        
	
	Если НовостиНабор.Количество() > 0 Тогда
		НовостиНабор.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Обработать ответ из JSON
//
// Параметры:
//  ТелоЗапроса	 - Строка	 - Тело запроса в формате JSON;
// 
// Возвращаемое значение:
//   - Таблица значений;
//
Функция ОбработатьОтветИзJSON(ТелоЗапроса)
	
	НовостиТаблица = Новый ТаблицаЗначений;
	НовостиТаблица.Колонки.Добавить("НомерНовости");
	НовостиТаблица.Колонки.Добавить("ВебСсылка");
	
	ТекущийУровень = 0;   
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоЗапроса);

	ПолучениеОбновленийПрограммы.ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоОбъекта Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока ПолучениеОбновленийПрограммы.ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Прервать;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда

			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ЗначениеЗаполнено(ИмяСвойства) Тогда
				
				Если ИмяСвойства = "MassURL" Тогда
					
					НомерНовости = "";
					ПолучениеОбновленийПрограммы.ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
					Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
						Пока ПолучениеОбновленийПрограммы.ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
							Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда
								Прервать;
							ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
								
								ВебСсылка = ЧтениеОтвета.ТекущееЗначение;
								Если СтрНайти(НРег(ВебСсылка),НРег("http")) > 0 Тогда
									
									ДобавитьСтрокуПутиКФайлам(НомерНовости,ВебСсылка,НовостиТаблица);
									
								Иначе
									НомерНовости = ЧтениеОтвета.ТекущееЗначение;	
								КонецЕсли;
								
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовостиТаблица;
	
КонецФункции    

// Процедура - Добавить строку пути к файлам
//
// Параметры:
//  НомерНовости	 - Строка	 - Номер новости;
//  ВебСсылка		 - Строка	 - Веб ссылка на новость в интернете;
//  НовостиТаблица	 - Таблица значений	 - Таблица с новостями;
//
Процедура ДобавитьСтрокуПутиКФайлам(НомерНовости,ВебСсылка,НовостиТаблица)

	НовостиТаблицаСтрока = НовостиТаблица.Добавить();
	НовостиТаблицаСтрока.НомерНовости = НомерНовости; 
	НовостиТаблицаСтрока.ВебСсылка = ВебСсылка;

КонецПроцедуры   

// Функция - Получить массив новостей с сервера
// 
// Возвращаемое значение:
//   - Структура данных из веб сервиса сервера СРМ;
//
Функция ПолучитьМассивНовостейССервера()

	URLОперации = инкИнтернетСервисы.ПолучитьКорневойURL() + "hs/News";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "GET");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , инкИнтернетСервисы.ПолучитьНастройкуПроксиСервера());
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);

	Возврат РезультатОтправки;	

КонецФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти
