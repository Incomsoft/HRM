
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Получить параметры запуска
// 
// Возвращаемое значение:
//  Структура - Структура параметров
//
Функция ПолучитьПараметрыЗапуска() Экспорт

	ПараметрыЗапускаСтруктура = Новый Структура;
	
	Если СтрНайти(ВРег(ПараметрЗапуска),ВРег("ВыгрузкаИзЗИКВБП")) > 0 Тогда
		
		МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
		
		Если МассивПараметров.Количество() = 5  Тогда
			ПараметрыЗапускаСтруктура.Вставить("ВидПараметра",МассивПараметров[0]);
			ПараметрыЗапускаСтруктура.Вставить("ВидВыгрузки",МассивПараметров[1]);
			ПараметрыЗапускаСтруктура.Вставить("ПутьККаталогуВыгрузки",МассивПараметров[2]);
			ПараметрыЗапускаСтруктура.Вставить("Дата1",СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивПараметров[3]));
			ПараметрыЗапускаСтруктура.Вставить("Дата2",СтроковыеФункцииКлиентСервер.СтрокаВДату(МассивПараметров[4]));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыЗапускаСтруктура;	
	
КонецФункции

// Процедура - Установить стандартные настройки интерфейса программы:
//
Процедура УстановитьСтандартныеНастройкиИнтерфейсаПрограммы() Экспорт 
	
	инкОбщийСервер.УстановитьСтандартныеНастройкиИнтерфейсаПрограммыНаСервере();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

// Процедура - Установить отборы на форме
//
// Параметры:
//  Список	 - Список	 - Список на форме
//
Процедура УстановитьОтборыНаФорме(Список) Экспорт
	
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	
	ДобавитьОтборПоОрганизации = Истина;            
	ПолеКомпоновкиОрганизация = Новый ПолеКомпоновкиДанных("Организация");
	
	Для каждого ЭлементОтбора Из ПользовательскийОтбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиОрганизация Тогда
			ДобавитьОтборПоОрганизации = Ложь; 		
		КонецЕсли;
		
	КонецЦикла;                              
	
	Если ДобавитьОтборПоОрганизации Тогда
		ЭлементОтбораПользовательский =  ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПользовательский.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
		ЭлементОтбораПользовательский.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораПользовательский.ЛевоеЗначение = ПолеКомпоновкиОрганизация;
		ЭлементОтбораПользовательский.ПравоеЗначение = Неопределено;
		ЭлементОтбораПользовательский.Использование = Ложь;                            
		ЭлементОтбораПользовательский.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
// ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормы
// ВнешнийОтчет.ИмяВнешнегоОтчета.Форма.ИмяФормы
// Документ.ИмяОбъекта.Форма.ИмяФормы
//
// Параметры:
//  ЭтаФорма  - Форма 	- Форма объекта;
//  ИмяФормы  - Строка	- Имя формы объекта;
//
// Возвращаемое значение:
// 	Строка     - полный путь к форме
//
Функция ПолучитьПолноеИмяФормы(ЭтаФорма,ИмяФормы) Экспорт

	ИмяФормыСтрока = Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы,".Форма.")+6)+ИмяФормы;
	Возврат ИмяФормыСтрока; 
	
	//СимволТочка = ".";
	//ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	//Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	//Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;

КонецФункции    

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти
