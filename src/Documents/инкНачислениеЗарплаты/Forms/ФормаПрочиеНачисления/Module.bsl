
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Параметры.АдресПараметровВХранилище) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ПараметрыРасчета = ПолучитьИзВременногоХранилища(Параметры.АдресПараметровВХранилище);
	
	Сотрудник = ПараметрыРасчета.ДанныеСотрудника.Сотрудник;
	ОбъектРасчетаЗарплаты = ПараметрыРасчета.ОбъектРасчетаЗарплаты;
	АдресПараметровВХранилище = Параметры.АдресПараметровВХранилище;
	
	тзПрочиеНачисления.Очистить();
	стрПоиск = Новый Структура("Сотрудник",Сотрудник);
	массПрочиеНачисления = ОбъектРасчетаЗарплаты.ПрочиеНачисления.НайтиСтроки(стрПоиск); 
	Для каждого стрПрочиеНачисления из массПрочиеНачисления Цикл
		
		стртзПрочиеНачисления = тзПрочиеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(стртзПрочиеНачисления,стрПрочиеНачисления);	
		стртзПрочиеНачисления.ПериодНачисления = инкУчетВремениСервер.ПолучитьПериодНачислений(стрПрочиеНачисления,Ложь);  
		
		стртзПрочиеНачисления.ДниЧасы = стрПрочиеНачисления.Дни;
		Если стртзПрочиеНачисления.ДниЧасы = 0 Тогда
			стртзПрочиеНачисления.ДниЧасы = стрПрочиеНачисления.Часы;
		КонецЕсли;
		стртзПрочиеНачисления.ДниЧасыФакт = стрПрочиеНачисления.ДниФакт;
		Если стртзПрочиеНачисления.ДниЧасыФакт = 0 Тогда
			стртзПрочиеНачисления.ДниЧасыФакт = стрПрочиеНачисления.ЧасыФакт;
		КонецЕсли;
		
	КонецЦикла; 
	
	мДниЧасы = ПараметрыРасчета.ДанныеСотрудника.ДниЧасы;
	ЭтотОбъект.Заголовок = "Прочие начисления: "+Сотрудник.ФИОСокращенное

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Модифицированность = Ложь;
		Закрыть(ПоместитьИзмененныеДанныеВоВременноеХранилище());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РасчитатьИтоговыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура тзПрочиеНачисленияПриИзменении(Элемент)
	
	ТекущийЭлементИмя = Элемент.ТекущийЭлемент.Имя;
	
	Если ТекущийЭлементИмя = "тзПрочиеНачисленияДни" Тогда
		
		ТекущиеДанные = Элементы.тзПрочиеНачисления.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если мДниЧасы <> 0 Тогда                                                                 
				ТекущиеДанные.ДниЧасы = мДниЧасы;
				ТекущиеДанные.СуммаНачисления = ТекущиеДанные.СуммаНачисления * ТекущиеДанные.ДниЧасыФакт / ТекущиеДанные.ДниЧасы;	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийЭлементИмя = "тзПрочиеНачисленияСумма" ИЛИ 
		 ТекущийЭлементИмя = "тзПрочиеНачисленияПроцентОтБазы" ИЛИ
		 ТекущийЭлементИмя = "тзПрочиеНачисленияНачисление" ИЛИ
		 ТекущийЭлементИмя = "тзПрочиеНачисленияДни"
	Тогда

		ПересчитатьНаКлиенте();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасчитатьИтоговыеСуммы()
	
	РазмерНачисленияИтог = 0;
	Для каждого Строка из тзПрочиеНачисления Цикл
		
		РазмерНачисленияИтог = РазмерНачисленияИтог + Строка.СуммаНачисления;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Перенос в основную форму:

&НаСервере
Функция ПоместитьИзмененныеДанныеВоВременноеХранилище()
	
	ВозвращаемыеСведения = Новый Структура;
	ВозвращаемыеСведения.Вставить("Сотрудник", Сотрудник);
	ВозвращаемыеСведения.Вставить("тзПрочиеНачисления", тзПрочиеНачисления.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ВозвращаемыеСведения, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура тзПрочиеНачисленияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.тзПрочиеНачисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ПроцентОтБазы = 0;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тзПрочиеНачисленияПроцентОтБазыПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.тзПрочиеНачисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.СуммаНачисления = 0;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область о // Перерасчет данных:

&НаКлиенте
Процедура ПересчитатьНаКлиенте()

	Модифицированность = Истина;
	ПерерасчетВОбъекте(Параметры.АдресПараметровВХранилище);
	РасчитатьИтоговыеСуммы();

КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	ПересчитатьНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ПерерасчетВОбъекте(АдресПараметровВХранилище)
	
	// Предварительный расчет данных по сотруднику:
	ПараметрыРасчета = ПолучитьИзВременногоХранилища(Параметры.АдресПараметровВХранилище);
	
	Сотрудник = ПараметрыРасчета.ДанныеСотрудника.Сотрудник;
	ОбъектРасчета = ПараметрыРасчета.ОбъектРасчетаЗарплаты;
	
	инкРасчетЗаработнойПлатыСервер.ДобавитьПрочиеНачисленияВОбъект(ОбъектРасчета, Сотрудник, тзПрочиеНачисления);
	ОбъектРасчета.ПересчетСотрудниковВОбъекте(Сотрудник,Истина,Ложь);
	
	// Загрузка расчитанных данных в форму:
	СотрудникПоиск = Новый Структура("Сотрудник",Сотрудник);
	ОбъектПрочиеНачисленияМассив = ОбъектРасчета.ПрочиеНачисления.НайтиСтроки(СотрудникПоиск);
	Для каждого ОбъектПрочееНачисление Из ОбъектПрочиеНачисленияМассив Цикл
		
		ПрочееНачислениеПоиск = Новый Структура;
		ПрочееНачислениеПоиск.Вставить("Начисление",ОбъектПрочееНачисление.Начисление);
		ПрочееНачислениеПоиск.Вставить("ПроцентОтБазы",ОбъектПрочееНачисление.ПроцентОтБазы);
		
		ПрочееНачислениеМассив = тзПрочиеНачисления.НайтиСтроки(ПрочееНачислениеПоиск);
		Если ПрочееНачислениеМассив.Количество() > 0 Тогда
			Для каждого ПрочееНачислениеСтрока Из ПрочееНачислениеМассив Цикл
				ЗаполнитьЗначенияСвойств(ПрочееНачислениеСтрока, ОбъектПрочееНачисление);
			КонецЦикла;
		Иначе                          
			ПрочееНачислениеСтрока = тзПрочиеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ПрочееНачислениеСтрока,ОбъектПрочееНачисление);
		КонецЕсли;	

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти



