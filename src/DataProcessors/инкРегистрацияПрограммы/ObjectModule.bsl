
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура - Выполнить регистрацию программы
//
Процедура ВыполнитьРегистрациюПрограммы() Экспорт

	ИсходныеДанные = ПолучитьИсходныеДанные();
	
	Отказ = Ложь;
	ПроверитьИсходныеДанные(ИсходныеДанные,Отказ);
	
	Если Отказ Тогда  
		инкОбщийКлиентСервер.СообщитьПользователю("Регистрация программы прервана.");
		Возврат;
	КонецЕсли;
	
	РезультатДоступностиСервера = инкИнтернетСервисы.ПроверитьДоступностьСервера();
	
	Если НЕ РезультатДоступностиСервера Тогда
		инкОбщийКлиентСервер.СообщитьПользователю("Сервер регистрации не доступен. Регистрация программы прервана.");
	КонецЕсли;

	инкОбщийКлиентСервер.СообщитьПользователю("УИД программы: "+ИсходныеДанные.УИДПрограммы);
	инкОбщийКлиентСервер.СообщитьПользователю("Запрос данных у сервера.");
	РезультатОтправки = ПолучитьДанныеДляРегистрации(ИсходныеДанные);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при регистрации программы.
				|%1'"),РезультатОтправки.СообщениеОбОшибке
			);
			
		инкОбщийКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке);
	
		Возврат;
		
	КонецЕсли;
	
    // Обработка ответа:
	Попытка
		
		ОтветСтруктура = ОбработатьОтветИзJSON(РезультатОтправки.Содержимое); 
		
		Если ОтветСтруктура = Неопределено Тогда
			инкОбщийКлиентСервер.СообщитьПользователю("Не удалось выполнить чтение данных. Регистрация программы прервана.");
			Возврат;
		КонецЕсли;
		
		Если ОтветСтруктура.Отказ = "Да" Тогда
			инкОбщийКлиентСервер.СообщитьПользователю("Не удалось зарегистрировать программу. Описание ошибки: "+ОтветСтруктура.СообщениеОбОшибке);
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОтветСтруктура.УИДРегистрации) Тогда
			инкОбщийКлиентСервер.СообщитьПользователю("Не удалось зарегистрировать программу. Описание ошибки: Не задан УИД регистрации.");
			Возврат;
		КонецЕсли; 
		
		Константы.инкУИДРегистрации.Установить(ОтветСтруктура.УИДРегистрации);
		инкОбщийКлиентСервер.СообщитьПользователю("Регистрация успешно выполнена.");
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить регистрацию программы.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса.
				|%1
				|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Лев(РезультатОтправки.Содержимое, 1024));

		инкОбщийКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке);
			
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Регистрация программы:

Функция ПолучитьДанныеДляРегистрации(ИсходныеДанные)
	
	URLОперации = инкИнтернетСервисы.ПолучитьКорневойURL() + "hs/RegProg";
	
	инкОбщийКлиентСервер.СообщитьПользователю("Обращение к ресурсу: "+URLОперации);
	
	ДополнительныеПараметрыЗапроса = ДополнительныеПараметрыЗапросаКСервисуОбновлений();
	ПараметрыЗапросаJSON = InfoRequestJSON(ИсходныеДанные, ДополнительныеПараметрыЗапроса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ИсходныеДанные.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);

	Возврат РезультатОтправки;	
	
КонецФункции  

Функция InfoRequestJSON(ИсходныеДанные, ДопПараметрыЗапроса)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("programName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(ИсходныеДанные.ИмяПрограммы));
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("versionNumber");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ВерсияКонфигурации);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("platformVersion");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИнтернетПоддержкаПользователей.ТекущаяВерсияПлатформы1СПредприятие());
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("OrgName");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ОрганизацияНаименование);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("OrgINN");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ОрганизацияИНН);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("OrgOtv");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ОрганизацияОтвественноеЛицо);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("OrgFactAdr");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ОрганизацияФактическийАдрес);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("OrgJurAdr");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ОрганизацияЮридическийАдрес);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("OrgTel");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.ОрганизацияТелефон);
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("UIDProg");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИсходныеДанные.УИДПрограммы);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции    

Функция ДополнительныеПараметрыЗапросаКСервисуОбновлений(ПараметрыКлиента = Неопределено)
	
	Результат = ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса();
	Если ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение() Тогда
		// Сообщить о поддержке платформы 64 только в случае, если конфигурация может
		// определить, что текущее приложение - 64-разрядное.
		Результат.Вставить("platform64Supported", "true");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОтветИзJSON(СодержимоеТекст)
	
	ОтветСтруктура = Новый Структура;
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(СодержимоеТекст);

	ТекущийУровень = 0;
	ПолучениеОбновленийПрограммы.ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень);
	
	Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоОбъекта Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока ПолучениеОбновленийПрограммы.ЧтениеJSONПрочитать(ЧтениеОтвета, ТекущийУровень) Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			
			Возврат ОтветСтруктура;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			ИмяСвойстваБазы = "";
			Если ИмяСвойства = "Rejection" Тогда
				ИмяСвойстваБазы = "Отказ";	
			ИначеЕсли ИмяСвойства = "MessageError" Тогда
				ИмяСвойстваБазы = "СообщениеОбОшибке";	
			ИначеЕсли ИмяСвойства = "UIDReg" Тогда
				ИмяСвойстваБазы = "УИДРегистрации";	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяСвойстваБазы) Тогда
				ОтветСтруктура.Вставить(ИмяСвойстваБазы,ПолучениеОбновленийПрограммы.ЗначениеСвойстваJSON(ЧтениеОтвета, ТекущийУровень, ""));
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтветСтруктура;	
	
КонецФункции

#КонецОбласти 

#Область о // Исходные данные:

Функция ПолучитьИсходныеДанные()

	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("ОрганизацияНаименование", ЭтотОбъект.Организация.Наименование); 
	ИсходныеДанные.Вставить("ОрганизацияИНН", ЭтотОбъект.Организация.ИНН); 
	ИсходныеДанные.Вставить("ОрганизацияОтвественноеЛицо", ЭтотОбъект.Организация.Руководитель.ФИО); 
	ИсходныеДанные.Вставить("ОрганизацияФактическийАдрес", Справочники.инкОрганизации.ПолучитьФактическийАдресОрганизации(ЭтотОбъект.Организация)); 
	ИсходныеДанные.Вставить("ОрганизацияЮридическийАдрес", Справочники.инкОрганизации.ПолучитьЮридическийАдресОрганизации(ЭтотОбъект.Организация)); 
	ИсходныеДанные.Вставить("ОрганизацияТелефон", Справочники.инкОрганизации.ПолучитьКонтактныйТелефонОрганизации(ЭтотОбъект.Организация)); 
	
	ИсходныеДанные.Вставить("УИДПрограммы", инкОбщийСервер.ПолучитьУИДПрограммы()); 
	ИсходныеДанные.Вставить("ИмяПрограммы", ИнтернетПоддержкаПользователей.ИмяПрограммы()); 
	ИсходныеДанные.Вставить("ВерсияКонфигурации", ИнтернетПоддержкаПользователей.ВерсияКонфигурации());  
	ИсходныеДанные.Вставить("НастройкиПроксиСервера", инкИнтернетСервисы.ПолучитьНастройкуПроксиСервера());  
	
	Возврат ИсходныеДанные;

КонецФункции     

Процедура ПроверитьИсходныеДанные(ИсходныеДанные,Отказ)
	
	Если НЕ ЗначениеЗаполнено(ИсходныеДанные.ОрганизацияИНН) Тогда
		Отказ = Истина;
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Необходимо заполнить ИНН организации.");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИсходныеДанные.ОрганизацияОтвественноеЛицо) Тогда
		Отказ = Истина;
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Необходимо заполнить руководителя организации.");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИсходныеДанные.ОрганизацияФактическийАдрес) Тогда
		Отказ = Истина;
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Необходимо заполнить фактический адрес организации.");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИсходныеДанные.ОрганизацияЮридическийАдрес) Тогда
		Отказ = Истина;
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Необходимо заполнить юридический адрес организации.");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИсходныеДанные.ОрганизацияТелефон) Тогда
		Отказ = Истина;
		инкОбщийКлиентСервер.СообщитьПользователю("Внимание! Необходимо заполнить телефон организации.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
