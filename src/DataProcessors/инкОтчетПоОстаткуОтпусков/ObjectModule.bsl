#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем Организация Экспорт;		// Ссылка - Ссылка на справочник "Организации";
Перем Подразделение Экспорт;	// Ссылка - Ссылка на справочник "Подразделение";
Перем Сотрудники Экспорт; 		// Массив - Массив из справочников "Сотрудники";
Перем Дата1 Экспорт;			// Дата	- Дата1 (начало периода);
Перем Дата2 Экспорт;			// Дата - Дата2 (конец периода);

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область о // Инициализация:

// Процедура - Инициализация
//
Процедура Инициализация() Экспорт

	Организация = Неопределено;
	Подразделение = Неопределено;
	Сотрудники = Неопределено;        
	Дата1 = Неопределено;
	Дата2 = Неопределено;

КонецПроцедуры

#КонецОбласти  

#Область о // Сформировать табличные документы:

// Функция - Сформировать табличные документы
// 
// Возвращаемое значение:
//   - Структура - Табличные документы;
//
Функция СформироватьТабличныеДокументы() Экспорт 
	
	ИсходныеДанные = ПолучитьИсходныеДанные();
	
	ТабличныеДокументы = Новый Структура;
	ТабличныеДокументы.Вставить("ОтчетПоОстаткуОтпусков");
	
	ТабличныеДокументы.ОтчетПоОстаткуОтпусков = ПолучитьОтчетПоОстаткуОтпусков(ИсходныеДанные);
	
	Возврат ТабличныеДокументы;
	
КонецФункции    

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область о // Исходные данные:

Функция ПолучитьИсходныеДанные()
	
	ИсходныеДанные = Новый Структура;

	ИсходныеДанные.Вставить("Дата1",Дата1);
	ИсходныеДанные.Вставить("Дата2",Дата2);

	ИсходныеДанные.Вставить("Сотрудники",Сотрудники);
	ИсходныеДанные.Вставить("СотрудникиТаблица",инкКадровыйУчетСервер.ПолучитьКадровыеДанныеСотрудников(ИсходныеДанные,Ложь));
	ИсходныеДанные.Вставить("ОстаткиОтпусковТаблица",ПолучитьОстаткиОтпусковТаблица(ИсходныеДанные));
	ИсходныеДанные.Вставить("ПериодыОтпусковСотрудниковТаблица",ПолучитьПериодыОтпусковСотрудников(ИсходныеДанные));
	ИсходныеДанные.Вставить("ОсновныеОтпускаТаблица",ПолучитьОсновныеОтпускаТаблица(ИсходныеДанные));
	ИсходныеДанные.Вставить("ДополнительныеОтпускаТаблица",ПолучитьДополнительныеОтпускаТаблица(ИсходныеДанные));
	ИсходныеДанные.Вставить("УвольненияТаблица",ПолучитьУвольненияТаблица(ИсходныеДанные));
	ИсходныеДанные.Вставить("ДанныеПоОтпускам",ПолучитьДанныеПоОтпускам(ИсходныеДанные));
	ИсходныеДанные.Вставить("КомпенсацияОтпускаТаблица",ПолучитьКомпенсацияОтпускаТаблица(ИсходныеДанные));
	
	Возврат ИсходныеДанные;
	
КонецФункции      

Функция ПолучитьКомпенсацияОтпускаТаблица(ИсходныеДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПриказНаВыплатуКомпенсации.Ссылка КАК Документ,
		|	инкПриказНаВыплатуКомпенсации.Сотрудник КАК Сотрудник,
		|	инкПриказНаВыплатуКомпенсации.ПериодС КАК ПериодС,
		|	инкПриказНаВыплатуКомпенсации.ПериодПО КАК ПериодПО,
		|	инкПриказНаВыплатуКомпенсации.КоличествоДнейОтпуска КАК КоличествоДнейОтпуска
		|ИЗ
		|	Документ.инкПриказНаВыплатуКомпенсации КАК инкПриказНаВыплатуКомпенсации
		|ГДЕ
		|	инкПриказНаВыплатуКомпенсации.Проведен
		|	И (инкПриказНаВыплатуКомпенсации.ПериодС >= &Дата1
		|				И инкПриказНаВыплатуКомпенсации.ПериодС <= &Дата2
		|			ИЛИ инкПриказНаВыплатуКомпенсации.ПериодПО >= &Дата1
		|				И инкПриказНаВыплатуКомпенсации.ПериодПО <= &Дата2)";
	
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция ПолучитьОстаткиОтпусковТаблица(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкСотрудникиОстаткиОтпусков.Ссылка КАК Сотрудник,
		|	инкСотрудникиОстаткиОтпусков.ВидОтпуска КАК ВидОтпуска,
		|	СУММА(инкСотрудникиОстаткиОтпусков.Дни) КАК Дни
		|ИЗ
		|	Справочник.инкСотрудники.НеиспользованныйОтпуск КАК инкСотрудникиОстаткиОтпусков
		|ГДЕ
		|	инкСотрудникиОстаткиОтпусков.Ссылка В(&СотрудникиМассив)
		|
		|СГРУППИРОВАТЬ ПО
		|	инкСотрудникиОстаткиОтпусков.Ссылка,
		|	инкСотрудникиОстаткиОтпусков.ВидОтпуска";
	
	Запрос.УстановитьПараметр("СотрудникиМассив", ИсходныеДанные.Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьДанныеПоОтпускам(ИсходныеДанные)

	ДанныеПоОтпускам = Новый Структура;
	
	ДанныеПоОтпускам.Вставить("ОсновнойОтпускДни",Организация.ОсновнойОтпускДни);
	ДанныеПоОтпускам.Вставить("ДополнительныйОтпускДни",Организация.ДополнительныйОтпускДни);
	ДанныеПоОтпускам.Вставить("ВсегоОтпускДни",ДанныеПоОтпускам.ОсновнойОтпускДни
	                                          +ДанныеПоОтпускам.ДополнительныйОтпускДни);
	
	Возврат ДанныеПоОтпускам;
	
КонецФункции

Функция ПолучитьПериодыОтпусковСотрудников(ИсходныеДанные)
	
	ПериодыОтпусковСотрудников = Новый ТаблицаЗначений;
	ПериодыОтпусковСотрудников.Колонки.Добавить("Сотрудник");
	ПериодыОтпусковСотрудников.Колонки.Добавить("Дата1");
	ПериодыОтпусковСотрудников.Колонки.Добавить("Дата2");
	ПериодыОтпусковСотрудников.Колонки.Добавить("КоличествоДнейВПериоде");
	
	Для каждого СотрудникиСтрока Из ИсходныеДанные.СотрудникиТаблица Цикл
		
		НачалоПериодаОтпусков = СотрудникиСтрока.ДатаПриемаНаРаботу;
		КонецПериодаОтпусков = НачалоДня(ДобавитьМесяц(НачалоПериодаОтпусков,12)-1);
		Пока Год(КонецПериодаОтпусков) <= Год(ИсходныеДанные.Дата2) Цикл
			КонецПериодаОтпусков = НачалоДня(ДобавитьМесяц(КонецПериодаОтпусков,12));
		КонецЦикла;  
		
		Если ЗначениеЗаполнено(СотрудникиСтрока.ДатаУвольнения) Тогда
			КонецПериодаОтпусков = СотрудникиСтрока.ДатаУвольнения;	
		КонецЕсли;                    
		
		ОтпускДата1 = НачалоДня(НачалоПериодаОтпусков);
		ОтпускДата2 = НачалоДня(ДобавитьМесяц(ОтпускДата1,12)-1);
		
		Пока ОтпускДата1 < КонецПериодаОтпусков Цикл
			
			Если ПопадаетВПериод(ОтпускДата1,ОтпускДата2,Дата1,Дата2) Тогда
				
				ПериодСтрока = ПериодыОтпусковСотрудников.Добавить();
				ПериодСтрока.Сотрудник	= СотрудникиСтрока.Сотрудник;
				ПериодСтрока.Дата1		= ОтпускДата1; 
				Если ОтпускДата2 > КонецПериодаОтпусков Тогда
					ОтпускДата2 = КонецПериодаОтпусков;
				КонецЕсли;
				ПериодСтрока.Дата2		= ОтпускДата2; 
				
				ПериодСтрока.КоличествоДнейВПериоде = (НачалоДня(ПериодСтрока.Дата2) - НачалоДня(ПериодСтрока.Дата1)) / (60 * 60 * 24);;

			КонецЕсли;
			
			ОтпускДата1 = КонецДня(ОтпускДата2) + 1;
			ОтпускДата2 = НачалоДня(ДобавитьМесяц(ОтпускДата1,12)-1);

		КонецЦикла;
		
	КонецЦикла;  
	
	ПериодыОтпусковСотрудников.Сортировать("Сотрудник,Дата1");
	
	Возврат ПериодыОтпусковСотрудников;	
	
КонецФункции  

Функция ПопадаетВПериод(П1Дата1,П1Дата2,П2Дата1,П2Дата2)
	
	ПопадаетВПериодБулево = Ложь; 
	
	Если ((П1Дата1 <= П2Дата1) И (П1Дата2 >= П2Дата1)) ИЛИ
		 ((П1Дата1 <= П2Дата2) И (П1Дата2 >= П2Дата2)) ИЛИ
		 ((П1Дата1 >= П2Дата1) И (П1Дата2 <= П2Дата2)) 
	Тогда
		ПопадаетВПериодБулево = Истина; 
	КонецЕсли;
	
	Возврат ПопадаетВПериодБулево;
	
КонецФункции

Функция ПолучитьУвольненияТаблица(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкУвольнение.Дата КАК Дата,
		|	инкУвольнение.Номер КАК Номер,
		|	инкУвольнение.ДатаПриказа КАК ДатаПриказа,
		|	инкУвольнение.Сотрудник КАК Сотрудник
		|ИЗ
		|	Документ.инкУвольнение КАК инкУвольнение
		|ГДЕ
		|	инкУвольнение.Проведен
		|	И инкУвольнение.Дата МЕЖДУ &Дата1 И &Дата2
		|	И инкУвольнение.Сотрудник В(&Сотрудники)";

	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьОсновныеОтпускаТаблица(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПриказНаОтпуск.Ссылка КАК Ссылка,
		|	инкПриказНаОтпуск.Сотрудник КАК Сотрудник,
		|	инкПриказНаОтпуск.Дата КАК ПриказНаОтпускДата,
		|	инкПриказНаОтпуск.Номер КАК ПриказНаОтпускНомер,
		|	инкПриказНаОтпуск.ПериодС КАК Дата1,
		|	инкПриказНаОтпуск.ПериодПО КАК Дата2,
		|	инкПриказНаОтпуск.КоличествоДнейОтпуска КАК Продолжительность
		|ИЗ
		|	Документ.инкПриказНаОтпуск КАК инкПриказНаОтпуск
		|ГДЕ
		|	инкПриказНаОтпуск.Проведен
		|	И инкПриказНаОтпуск.Дата МЕЖДУ &Дата1 И &Дата2
		|	И инкПриказНаОтпуск.Сотрудник В(&Сотрудники)
		|	И инкПриказНаОтпуск.КоличествоДнейОтпуска <> 0
		|	И НЕ инкПриказНаОтпуск.ВидОтпуска В (&ИсключенияВидовОтпусков)";

	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Если ЗначениеЗаполнено(ИсходныеДанные.Дата1) Тогда
		Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
		Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкПриказНаОтпуск.Дата МЕЖДУ &Дата1 И &Дата2","Истина");
	КонецЕсли;
	
	ИсключенияВидовОтпусков = Новый Массив;
	ИсключенияВидовОтпусков.Добавить(Перечисления.инкВидыОтпуска.БезСохраненияЗарплаты);
	Запрос.УстановитьПараметр("ИсключенияВидовОтпусков", ИсключенияВидовОтпусков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьДополнительныеОтпускаТаблица(ИсходныеДанные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкПриказНаОтпуск.Ссылка КАК Ссылка,
		|	инкПриказНаОтпуск.Сотрудник КАК Сотрудник,
		|	инкПриказНаОтпуск.Дата КАК ПриказНаОтпускДата,
		|	инкПриказНаОтпуск.Номер КАК ПриказНаОтпускНомер,
		|	инкПриказНаОтпуск.ПериодСДопОтпуск КАК Дата1,
		|	инкПриказНаОтпуск.ПериодПОДопОтпуск КАК Дата2,
		|	инкПриказНаОтпуск.КоличествоДнейДополнительногоОтпуска КАК Продолжительность
		|ИЗ
		|	Документ.инкПриказНаОтпуск КАК инкПриказНаОтпуск
		|ГДЕ
		|	инкПриказНаОтпуск.Проведен
		|	И инкПриказНаОтпуск.Дата МЕЖДУ &Дата1 И &Дата2
		|	И инкПриказНаОтпуск.Сотрудник В(&Сотрудники)
		|	И инкПриказНаОтпуск.КоличествоДнейДополнительногоОтпуска <> 0
		|	И НЕ инкПриказНаОтпуск.ВидДополнительногоОтпуска В (&ИсключенияВидовОтпусков)";

	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Если ЗначениеЗаполнено(ИсходныеДанные.Дата1) Тогда
		Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
		Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкПриказНаОтпуск.Дата МЕЖДУ &Дата1 И &Дата2","Истина");
	КонецЕсли;
	
	ИсключенияВидовОтпусков = Новый Массив;
	ИсключенияВидовОтпусков.Добавить(Перечисления.инкВидыОтпуска.БезСохраненияЗарплаты);
	Запрос.УстановитьПараметр("ИсключенияВидовОтпусков", ИсключенияВидовОтпусков);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

#КонецОбласти                

#Область о // Отчет по остатку отпусков: 

Функция ПолучитьОтчетПоОстаткуОтпусков(ИсходныеДанные)

	ОтчетПоОстаткуОтпусков = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетОсновнаяФорма"); 

	ОбластьОтчет = Макет.ПолучитьОбласть("ТаблицаЗаголовок");
	ОтчетПоОстаткуОтпусков.Вывести(ОбластьОтчет); 
	
	НомерСтроки = 0;
	Для каждого СотрудникЭлемент Из ИсходныеДанные.СотрудникиТаблица Цикл
		
		СотрудникПоиск = Новый Структура("Сотрудник",СотрудникЭлемент.Сотрудник);
		ПериодыМассив = ИсходныеДанные.ПериодыОтпусковСотрудниковТаблица.НайтиСтроки(СотрудникПоиск); 
		
		// Остатки:
		ОстаткиОтпусковСтруктура = ПолучитьОстаткиОтпусков(СотрудникПоиск,ИсходныеДанные);
		Если ОстаткиОтпусковСтруктура.ОсновнойОтпуск <> 0 ИЛИ 
			 ОстаткиОтпусковСтруктура.ДополнительныйОтпуск <> 0
		Тогда
			
			НомерСтроки = НомерСтроки + 1; 
			ОбластьОтчет = Макет.ПолучитьОбласть("ТаблицаСтрокаОсновная");   
			ЗаполнитьЗначенияСвойств(ОбластьОтчет.Параметры,СотрудникЭлемент);
			
			ОбластьОтчет.Параметры.Номер = НомерСтроки;
			ОбластьОтчет.Параметры.РабочийГод = Формат(СотрудникЭлемент.ДатаПриемаНаРаботу,"ДФ=dd.MM.yyyy");
			ОбластьОтчет.Параметры.Продолжительность 	= ОстаткиОтпусковСтруктура.ОсновнойОтпуск;
			ОбластьОтчет.Параметры.ПродолжительностьДоп = ОстаткиОтпусковСтруктура.ДополнительныйОтпуск;
			
			ОбластьОтчет.Параметры.ПоложеноЗаГод = 0;	
			ОбластьОтчет.Параметры.Израсходовано = 0;
			
			ОбластьОтчет.Параметры.Осталось	= ОстаткиОтпусковСтруктура.ОсновнойОтпуск
			                                + ОстаткиОтпусковСтруктура.ДополнительныйОтпуск; 
			ОбластьОтчет.Параметры.ПараметрРасшифровкиСотрудник	= СотрудникЭлемент.Сотрудник;									

			ОтчетПоОстаткуОтпусков.Вывести(ОбластьОтчет);
			
		КонецЕсли;
		
		// Основные периоды:
		Для каждого ПериодЭлемент Из ПериодыМассив Цикл

			ТаблицыОтпусковПоПериоду = ПолучитьТаблицыПоПериодуОтпусков(СотрудникПоиск,ПериодЭлемент,ИсходныеДанные);								  
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьОтчет = Макет.ПолучитьОбласть("ТаблицаСтрокаОсновная");
	        ЗаполнитьЗначенияСвойств(ОбластьОтчет.Параметры,СотрудникЭлемент);
			ОбластьОтчет.Параметры.Номер = НомерСтроки;
			ОбластьОтчет.Параметры.РабочийГод = Формат(ПериодЭлемент.Дата1,"ДФ=dd.MM.yy")
			                                  + " - "
											  + Формат(ПериодЭлемент.Дата2,"ДФ=dd.MM.yy"); 
											  

			ОбластьОтчет.Параметры.ПродолжительностьКомп = ПолучитьКомпенсациюЗаОтпускПоСотруднику(СотрудникПоиск,ПериодЭлемент,ИсходныеДанные);	
			ОбластьОтчет.Параметры.ПоложеноЗаГод	= ПолучитьВсегоОтпускДниПоСотруднику(СотрудникЭлемент,ИсходныеДанные);	
			ОбластьОтчет.Параметры.Израсходовано	= ТаблицыОтпусковПоПериоду.ОсновнойОтпускТаблица.Итог("Израсходовано")
			                                        + ТаблицыОтпусковПоПериоду.ДополнительныйОтпускТаблица.Итог("Израсходовано")
													+ ОбластьОтчет.Параметры.ПродолжительностьКомп;
			ОбластьОтчет.Параметры.Осталось			= ОбластьОтчет.Параметры.ПоложеноЗаГод
			                                        - ОбластьОтчет.Параметры.Израсходовано;	
													
			Если ПериодЭлемент.КоличествоДнейВПериоде < 364 Тогда
				ОбластьОтчет.Параметры.ПоложеноЗаГод	= 0;	
				ОбластьОтчет.Параметры.Осталось			= 0;	
			КонецЕсли;										
													
			ОбластьОтчет.Параметры.ПараметрРасшифровкиСотрудник	= СотрудникЭлемент.Сотрудник;									
													
			ОтчетПоОстаткуОтпусков.Вывести(ОбластьОтчет);										
			
			// Основной отпуск строки:
			Для каждого ОтпускЭлемент Из ТаблицыОтпусковПоПериоду.ОсновнойОтпускТаблица Цикл
				
				ОбластьОтчет = Макет.ПолучитьОбласть("ТаблицаСтрокаАналитика");
				ЗаполнитьЗначенияСвойств(ОбластьОтчет.Параметры,ОтпускЭлемент); 
				
				ОбластьОтчет.Параметры.ПараметрРасшифровкиОтпуска = ОтпускЭлемент.Ссылка; 
				
				ОтчетПоОстаткуОтпусков.Вывести(ОбластьОтчет);
				
			КонецЦикла;
			
			// Дополнительный отпуск строки:
			Для каждого ОтпускЭлемент Из ТаблицыОтпусковПоПериоду.ДополнительныйОтпускТаблица Цикл
				
				ОбластьОтчет = Макет.ПолучитьОбласть("ТаблицаСтрокаАналитика");
				ЗаполнитьЗначенияСвойств(ОбластьОтчет.Параметры,ОтпускЭлемент); 
				
				ОбластьОтчет.Параметры.ДатаНачала	    	= "";
				ОбластьОтчет.Параметры.Продолжительность	= "";
				ОбластьОтчет.Параметры.ДатаОкончания 	    = "";
				
				ОбластьОтчет.Параметры.ДатаНачалаДоп	    = ОтпускЭлемент.ДатаНачала;
				ОбластьОтчет.Параметры.ПродолжительностьДоп	= ОтпускЭлемент.Продолжительность;
				ОбластьОтчет.Параметры.ДатаОкончанияДоп     = ОтпускЭлемент.ДатаОкончания;
				
				ОбластьОтчет.Параметры.ПараметрРасшифровкиОтпуска = ОтпускЭлемент.Ссылка; 
				
				ОтчетПоОстаткуОтпусков.Вывести(ОбластьОтчет);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	ОбластьОтчет = Макет.ПолучитьОбласть("ТаблицаИтоговаяСтрока");
	ОтчетПоОстаткуОтпусков.Вывести(ОбластьОтчет); 
	
	ОтчетПоОстаткуОтпусков.ФиксацияСлева = 2;
	ОтчетПоОстаткуОтпусков.ФиксацияСверху = 2;

	Возврат ОтчетПоОстаткуОтпусков;	
	
КонецФункции 

Функция ПолучитьВсегоОтпускДниПоСотруднику(СотрудникЭлемент,ИсходныеДанные)
	
	ВсегоДнейОтпуска = ИсходныеДанные.ДанныеПоОтпускам.ВсегоОтпускДни;
	Если СотрудникЭлемент.ВсегоОтпускДни <> 0 Тогда
		ВсегоДнейОтпуска = СотрудникЭлемент.ВсегоОтпускДни;	
	КонецЕсли;
	
	Возврат ВсегоДнейОтпуска;
	
КонецФункции

Функция ПолучитьКомпенсациюЗаОтпускПоСотруднику(СотрудникПоиск,ПериодЭлемент,ИсходныеДанные)

	КоличествоКомпенсация = 0;    
	
	КомпенсацияОтпускаМассив = ИсходныеДанные.КомпенсацияОтпускаТаблица.НайтиСтроки(СотрудникПоиск);
	Для каждого КомпенсацияОтпускаЭлемент Из КомпенсацияОтпускаМассив Цикл
		
		Если ПопадаетВПериод(КомпенсацияОтпускаЭлемент.ПериодС,
			                 КомпенсацияОтпускаЭлемент.ПериодПо,
							 ПериодЭлемент.Дата1,
							 ПериодЭлемент.Дата2) 
		Тогда
			КоличествоКомпенсация = КоличествоКомпенсация + КомпенсацияОтпускаЭлемент.КоличествоДнейОтпуска;    
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоКомпенсация;
	
КонецФункции

Функция ПолучитьОстаткиОтпусков(СотрудникПоиск,ИсходныеДанные) 		
	
	ОстаткиОтпусковСтуктура = Новый Структура;
	ОстаткиОтпусковСтуктура.Вставить("ОсновнойОтпуск",0);
	ОстаткиОтпусковСтуктура.Вставить("ДополнительныйОтпуск",0);
	
	ОстаткиОтпусковМассив = ИсходныеДанные.ОстаткиОтпусковТаблица.НайтиСтроки(СотрудникПоиск);
	Для каждого ОстатокСтрока Из ОстаткиОтпусковМассив Цикл
		
		Если ОстатокСтрока.ВидОтпуска = Перечисления.инкВидыОтпуска.ЕжегодныйОсновной Тогда
			ОстаткиОтпусковСтуктура.ОсновнойОтпуск = ОстаткиОтпусковСтуктура.ОсновнойОтпуск + ОстатокСтрока.Дни;
		ИначеЕсли ОстатокСтрока.ВидОтпуска = Перечисления.инкВидыОтпуска.ЕжегодныйДополнительный Тогда	
			ОстаткиОтпусковСтуктура.ДополнительныйОтпуск = ОстаткиОтпусковСтуктура.ДополнительныйОтпуск + ОстатокСтрока.Дни;
		КонецЕсли;
		
	КонецЦикла;       
		
	Возврат ОстаткиОтпусковСтуктура;
		
КонецФункции

Функция ПолучитьТаблицыПоПериодуОтпусков(СотрудникПоиск,ПериодЭлемент,ИсходныеДанные)
	
	ДанныеСтруктура = Новый Структура;
	
	ДанныеСтруктура.Вставить("ОсновнойОтпускТаблица");
	ДанныеСтруктура.Вставить("ДополнительныйОтпускТаблица");
	
	// Основной отпуск:
	ОсновныеОтпускаМассив = ИсходныеДанные.ОсновныеОтпускаТаблица.НайтиСтроки(СотрудникПоиск);
	ОстатокОтпуска = ИсходныеДанные.ДанныеПоОтпускам.ОсновнойОтпускДни; 
	ДанныеСтруктура.ОсновнойОтпускТаблица = ПолучитьТаблицуПоОтпуску(ОсновныеОтпускаМассив,ОстатокОтпуска,ПериодЭлемент);
	
	// Дополнительный отпуск:
	ДопОтпускаМассив = ИсходныеДанные.ДополнительныеОтпускаТаблица.НайтиСтроки(СотрудникПоиск);
	ОстатокОтпуска = ИсходныеДанные.ДанныеПоОтпускам.ДополнительныйОтпускДни; 
	ДанныеСтруктура.ДополнительныйОтпускТаблица = ПолучитьТаблицуПоОтпуску(ДопОтпускаМассив,ОстатокОтпуска,ПериодЭлемент);
	
	Возврат ДанныеСтруктура;
	
КонецФункции   

Функция ПолучитьТаблицуПоОтпуску(ОтпускаМассив,ОстатокОтпуска,ПериодЭлемент)
	
	ОтпускТаблица = ПолучитьСтруктуруТаблицыОтпуска(); 
	
	Для каждого ОтпускЭлемент Из ОтпускаМассив Цикл
		
		Если (ОтпускЭлемент.Дата1 >= ПериодЭлемент.Дата1) И 
			 (ОтпускЭлемент.Дата1 <= ПериодЭлемент.Дата2)
		Тогда
		
		    ОсновнойОтпускСтрока = ОтпускТаблица.Добавить();
			
			ОсновнойОтпускСтрока.Ссылка				= ОтпускЭлемент.Ссылка;
		    ОсновнойОтпускСтрока.ДатаНачала 		= ОтпускЭлемент.Дата1;
		    ОсновнойОтпускСтрока.Продолжительность	= ОтпускЭлемент.Продолжительность; 
		    ОсновнойОтпускСтрока.ДатаОкончания 		= ОтпускЭлемент.Дата2;
			
			ОсновнойОтпускСтрока.ПоложеноЗаГод		= ОстатокОтпуска;
		    ОсновнойОтпускСтрока.Израсходовано 		= ОтпускЭлемент.Продолжительность; 
			
			ОстатокОтпуска = ОстатокОтпуска - ОтпускЭлемент.Продолжительность;
			ОсновнойОтпускСтрока.Осталось 			= ОстатокОтпуска;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ОтпускТаблица;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыОтпуска()

	СтруктураТаблицы = Новый ТаблицаЗначений;
	СтруктураТаблицы.Колонки.Добавить("Ссылка");
	СтруктураТаблицы.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов("Дата"));
	СтруктураТаблицы.Колонки.Добавить("Продолжительность",Новый ОписаниеТипов("Число"));
	СтруктураТаблицы.Колонки.Добавить("ДатаОкончания",Новый ОписаниеТипов("Дата"));
	СтруктураТаблицы.Колонки.Добавить("ПоложеноЗаГод",Новый ОписаниеТипов("Число"));
	СтруктураТаблицы.Колонки.Добавить("Израсходовано",Новый ОписаниеТипов("Число"));
	СтруктураТаблицы.Колонки.Добавить("Осталось",Новый ОписаниеТипов("Число"));
	
	Возврат СтруктураТаблицы;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

