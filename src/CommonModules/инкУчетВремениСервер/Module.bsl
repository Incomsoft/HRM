
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
	
// Процедура - Заполняет производственные календари и норму времени по-умолчанию за определенный год:
//
// Параметры:
//  Год	 - Число	 - Год
//
Процедура ЗаполнитьДанныеПоНормеВремениПоУмолчанию(Год) Экспорт
	
	// Производственный календарь:
	ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	ДанныеПКПоУмолчанию = Справочники.ПроизводственныеКалендари.РезультатЗаполненияПроизводственногоКалендаряПоУмолчанию(ПроизводственныйКалендарь.Код,Год);
	Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, Год, ДанныеПКПоУмолчанию);
	
	// Норма времени:
	инкУчетВремениСервер.ЗагрузитьНормуВремениИзГодовогоФондаРабочегоВремениНаСервере(Год);
	
КонецПроцедуры

// Функция - Получить кадровые изменения по периоду на каджый день
//
// Параметры:
//  ИсходныеДанные	 - Структура	 - Данные для запроса
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Кадровые изменения по периоду на каджый день
//
Функция ПолучитьКадровыеИзмененияПоПериодуНаКаджыйДень(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.Дата КАК ДатаМесяц
		|ПОМЕСТИТЬ втДатаМесяц
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.Дата МЕЖДУ &Дата1 И &Дата2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КадроваяИстория.Период) КАК Период,
		|	втДатаМесяц.ДатаМесяц КАК ДатаМесяц,
		|	КадроваяИстория.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ втКадроваяИсторияМакс
		|ИЗ
		|	втДатаМесяц КАК втДатаМесяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.инкКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО втДатаМесяц.ДатаМесяц >= КадроваяИстория.Период
		|ГДЕ
		|	КадроваяИстория.Сотрудник В(&Сотрудники)
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИстория.Сотрудник,
		|	втДатаМесяц.ДатаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втКадроваяИсторияМакс.ДатаМесяц КАК Дата,
		|	втКадроваяИсторияМакс.Период КАК Период,
		|	втКадроваяИсторияМакс.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(инкКадроваяИсторияСотрудников.ИндивидуальныйКоэффициент, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ инкКадроваяИсторияСотрудников.ИндивидуальныйКоэффициент
		|	КОНЕЦ КАК ИндивидуальныйКоэффициент,
		|	ЕСТЬNULL(инкКадроваяИсторияСотрудников.РайонныйКоэффициент, 0) КАК РайонныйКоэффициент,
		|	ЕСТЬNULL(инкКадроваяИсторияСотрудников.СевернаяНадбавка, 0) КАК СевернаяНадбавка,
		|	ЕСТЬNULL(инкКадроваяИсторияСотрудников.Оклад, 0) КАК Оклад
		|ИЗ
		|	втКадроваяИсторияМакс КАК втКадроваяИсторияМакс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.инкКадроваяИсторияСотрудников КАК инкКадроваяИсторияСотрудников
		|		ПО втКадроваяИсторияМакс.Сотрудник = инкКадроваяИсторияСотрудников.Сотрудник
		|			И втКадроваяИсторияМакс.Период = инкКадроваяИсторияСотрудников.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Дата1") И инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Дата2") 
	Тогда
		Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);	
		Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегламентированныйПроизводственныйКалендарь.Дата МЕЖДУ &Дата1 И &Дата2","");
	КонецЕсли;
	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Сотрудники") Тогда
		Запрос.УстановитьПараметр("Сотрудники", ИсходныеДанные.Сотрудники);	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"КадроваяИстория.Сотрудник В(&Сотрудники)","Истина");
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

// Функция - Получить период начислений
//
// Параметры:
//  ИсходныеДанные	 - Структура - Данные для получения периода
//  РезультатСтрока	 - Булево	 - Признак возврата периода в строку
// 
// Возвращаемое значение:
//  СтандартныйПериод - Период начислений
//
Функция ПолучитьПериодНачислений(ИсходныеДанные,РезультатСтрока = Истина) Экспорт
	
	ПериодНачислений = Неопределено;
	
	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"ПериодДата1") И 
		 инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"ПериодДата2")
	Тогда
	
		Если ЗначениеЗаполнено(ИсходныеДанные.ПериодДата1) И 
			 ЗначениеЗаполнено(ИсходныеДанные.ПериодДата2) 
		Тогда
			ПериодНачислений = Новый СтандартныйПериод;
			ПериодНачислений.ДатаНачала = ИсходныеДанные.ПериодДата1;
			ПериодНачислений.ДатаОкончания = ИсходныеДанные.ПериодДата2; 
		КонецЕсли;
		
	ИначеЕсли инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"МесяцНачисления") Тогда	
		ПериодНачислений = Новый СтандартныйПериод;
		ПериодНачислений.ДатаНачала = НачалоМесяца(ИсходныеДанные.МесяцНачисления);
		ПериодНачислений.ДатаОкончания = КонецМесяца(ИсходныеДанные.МесяцНачисления); 
	КонецЕсли;
	
	Если РезультатСтрока Тогда
		
		ПериодНачислений = Формат(ПериодНачислений.ДатаНачала,"ДФ=dd.MM.yy") 
		                 + "-"
						 + Формат(ПериодНачислений.ДатаОкончания,"ДФ=dd.MM.yy");
		
	КонецЕсли;
	
	Возврат ПериодНачислений;
	
КонецФункции

// Функция - Получить разницу в днях
//
// Параметры:
//  ДатаНачала		 - Дата	 - Дата начала периода
//  ДатаОкончания	 - Дата	 - Дата окончания периода
//	ПраздничныеДни	 - Булево - Признак праздничных дней
// 
// Возвращаемое значение:
//  Число - Число дней
//
Функция ПолучитьРазницуВДнях(ДатаНачала,ДатаОкончания,ПраздничныеДни = Истина) Экспорт
	
	РазницаВДнях = 0;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		РазницаВДнях = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60 * 60 * 24) + 1;	
	КонецЕсли;	                                     
	
	Если НЕ ПраздничныеДни Тогда
		
		КалендарьПериод = Новый СтандартныйПериод;
		КалендарьПериод.ДатаНачала = ДатаНачала;
		КалендарьПериод.ДатаОкончания = ДатаОкончания;
		
		ПроизводственныйКалендарьТаблица = инкПроизводственныйКалендарьСервер.ПолучитьДанныеПроизводственногоКалендаря(КалендарьПериод,Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
		РазницаВДнях = РазницаВДнях - ПроизводственныйКалендарьТаблица.Количество() + 1; 
		
	КонецЕсли;
	
	Возврат РазницаВДнях;
	
КонецФункции

// Функция - Получить данные дня
//
// Параметры:
//  ТекущийДень		 - Дата	 		- День данные по которому необходимо получить
//  СотрудникДанные	 - Структура	- Данные о сотруднике
//  ИсходныеДанные	 - Структура	- Данные для получения информации о дне
// 
// Возвращаемое значение:
//  Структура - Данные дня
//
Функция ПолучитьДанныеДня(ТекущийДень,СотрудникДанные,ИсходныеДанные) Экспорт
	
	ДанныеДня = Новый Структура;
	ДанныеДня.Вставить("Дни","");
	ДанныеДня.Вставить("Часы",0);
	
	// Поиск по реестру документов:
	ПоискСтруктура = Новый Структура;                                                             
	ПоискСтруктура.Вставить("Сотрудник",СотрудникДанные.Сотрудник);
	
	КадровыеДанныеМассив = ИсходныеДанные.КадровыеДанныеТаблица.НайтиСтроки(ПоискСтруктура);
	ДатаПриемаНаРаботу = Неопределено;
	ДатаУвольнения = Неопределено;
	Для каждого КадровыеДанные Из КадровыеДанныеМассив Цикл
		ДатаПриемаНаРаботу = КадровыеДанные.ДатаПриемаНаРаботу;
		ДатаУвольнения = КадровыеДанные.ДатаУвольнения;
	КонецЦикла;
	
	ПоискВидаДняБулево = Истина;
	Если ЗначениеЗаполнено(ДатаПриемаНаРаботу) Тогда 
		Если ТекущийДень < ДатаПриемаНаРаботу  Тогда
			ПоискВидаДняБулево = Ложь;	
		КонецЕсли;			
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(ДатаУвольнения) Тогда 
		Если ТекущийДень > ДатаУвольнения Тогда
			ПоискВидаДняБулево = Ложь;	
		КонецЕсли;			
	КонецЕсли;       
	
	Если НЕ ПоискВидаДняБулево Тогда
		Возврат ДанныеДня;	
	КонецЕсли;
	
	РеестрыДокументовМассив = ИсходныеДанные.РеестрКадровыхДокументов.НайтиСтроки(ПоискСтруктура);
	Для каждого ДокументСтрока Из РеестрыДокументовМассив Цикл
		
		ВидЗначения = "";
		ДатаНачалаСтрока = "";
		ДатаОкончанияСтрока = "";
		Если ТипЗнч(ДокументСтрока.Регистратор) = Тип("ДокументСсылка.инкБольничныйЛист") ИЛИ
			 ТипЗнч(ДокументСтрока.Регистратор) = Тип("ДокументСсылка.инкБольничныйЛистРасчет")
		Тогда
			
			ДатаНачалаСтрока = "БольничныйДатаНачала";
			ДатаОкончанияСтрока = "БольничныйДатаОкончания";
			ВидЗначения = "Б";          
			
		ИначеЕсли ТипЗнч(ДокументСтрока.Регистратор) = Тип("ДокументСсылка.инкПриказНаОтпуск") Тогда	

			ДатаНачалаСтрока = "ПериодС";
			ДатаОкончанияСтрока = "ПериодПО";
			ВидЗначения = "О";
			
		ИначеЕсли ТипЗнч(ДокументСтрока.Регистратор) = Тип("ДокументСсылка.инкПриказВКомандировку") Тогда	

			ДатаНачалаСтрока = "ПериодС";
			ДатаОкончанияСтрока = "ПериодПО";
			ВидЗначения = "К";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидЗначения) Тогда
			
			ДатаНачала = ДокументСтрока.Регистратор[ДатаНачалаСтрока];
			ДатаОкончания = ДокументСтрока.Регистратор[ДатаОкончанияСтрока];
			
			Если (ТекущийДень >= ДатаНачала) И (ТекущийДень <= ДатаОкончания) Тогда
               	ДанныеДня.Дни = ВидЗначения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеДня.Дни) И ВидЗначения = "О" Тогда
				
				ДатаНачала = ДокументСтрока.Регистратор["ПериодСДопОтпуск"];
				ДатаОкончания = ДокументСтрока.Регистратор["ПериодПОДопОтпуск"];
				
				Если (ТекущийДень >= ДатаНачала) И (ТекущийДень <= ДатаОкончания) Тогда
	               	ДанныеДня.Дни = ВидЗначения;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	// Поиск данных по производственному календарю:
  	Если НЕ ЗначениеЗаполнено(ДанныеДня.Дни) Тогда
		
		ПоискСтруктура = Новый Структура("Дата",ТекущийДень);
	  	массПК = ИсходныеДанные.ПроизводственныйКалендарьТаблица.НайтиСтроки(ПоискСтруктура);
		Если массПК.Количество() > 0 Тогда
				
			Если массПК[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий ИЛИ
				 массПК[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный
			Тогда
				ДанныеДня.Дни = "Я";
				ДанныеДня.Часы = 8;
			ИначеЕсли (ДеньНедели(ТекущийДень) = 6) И 
				      (СотрудникДанные.ВидРабочейНедели = Перечисления.инкВидРабочейНедели.Шестидневка) 
			Тогда
				ДанныеДня.Дни = "Я";
				ДанныеДня.Часы = 8;
			КонецЕсли;   
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ПоискСтруктура = Новый Структура;                                                             
	ПоискСтруктура.Вставить("Сотрудник",СотрудникДанные.Сотрудник);
	ПоискСтруктура.Вставить("Дата",ТекущийДень);

	КадровыеИзмененияМассив = ИсходныеДанные.КадровыеИзмененияТаблица.НайтиСтроки(ПоискСтруктура);
	Для каждого КадровоеИзменение Из КадровыеИзмененияМассив Цикл
		ДанныеДня.Часы = ДанныеДня.Часы * КадровоеИзменение.ИндивидуальныйКоэффициент; 
	КонецЦикла;
	
	Возврат ДанныеДня;
	
КонецФункции

// Процедура - Загрузка нормы времени из годового фонда рабочего времени на сервере
//
// Параметры:
//
//		Год - число, год по которому загружаются данные из ФРВ.  
//		ПроверитьНаличиеДанных - Булево, если данные надо проверить, то при их наличии загрузка отменяется
//
Процедура ЗагрузитьНормуВремениИзГодовогоФондаРабочегоВремениНаСервере(Год,ПроверитьНаличиеДанных = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.инкНормаВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Установить(Год);
	НаборЗаписей.Прочитать();
	
	Если ПроверитьНаличиеДанных И НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	ДанныеПроизводственногоКалендаря  = инкПроизводственныйКалендарьСервер.ПолучитьДанныеПроизводственногоКалендаря(Год);

	ТекущийМесяц = Дата(Формат(Год,"ЧГ=")+"0101000000");
	ПоискМесяца = Новый Структура("Месяц");
	Для МесяцЧисло = 1 По 12 Цикл
		
		ПоискМесяца.Месяц = МесяцЧисло;	
		ПКМассив = ДанныеПроизводственногоКалендаря.НайтиСтроки(ПоискМесяца);		
		РабочихДнейВМесяце = 0;
		ПредпраздничныхДнейВМесяце = 0;
		Для каждого ПКДеньМесяца Из ПКМассив Цикл
			
			Если ПКДеньМесяца.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
				РабочихДнейВМесяце = РабочихДнейВМесяце + 1;
			ИначеЕсли ПКДеньМесяца.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				ПредпраздничныхДнейВМесяце = ПредпраздничныхДнейВМесяце + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если РабочихДнейВМесяце > 0 Тогда
			
			ЗаписьНабораТекущегоМесяца = Неопределено;
			
			Для каждого Запись Из НаборЗаписей Цикл
					
				Если Запись.Месяц = ТекущийМесяц Тогда

					ЗаписьНабораТекущегоМесяца = Запись;	
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;      			                
			
			Если ЗаписьНабораТекущегоМесяца = Неопределено Тогда
				
				ЗаписьНабораТекущегоМесяца = НаборЗаписей.Добавить();	
				                         
			КонецЕсли;
			
			ЗаписьНабораТекущегоМесяца.Период						= НачалоГода(ТекущийМесяц);			
			ЗаписьНабораТекущегоМесяца.Год							= Год;
			ЗаписьНабораТекущегоМесяца.Месяц 						= ТекущийМесяц;
			ЗаписьНабораТекущегоМесяца.РабочихДнейВМесяце  			= РабочихДнейВМесяце + ПредпраздничныхДнейВМесяце;
			ЗаписьНабораТекущегоМесяца.НормаЧасовМужчиныПятидневка 	= (РабочихДнейВМесяце * 8) + (ПредпраздничныхДнейВМесяце * 7);
			ЗаписьНабораТекущегоМесяца.НормаЧасовЖенщиныПятидневка 	= (РабочихДнейВМесяце * 8) + (ПредпраздничныхДнейВМесяце * 7);
			ЗаписьНабораТекущегоМесяца.Шестидневка                 	= РабочихДнейВМесяце + ПредпраздничныхДнейВМесяце + 1; 
			ЗаписьНабораТекущегоМесяца.НормаЧасовМужчиныШестидневка = ((РабочихДнейВМесяце + 1) * 8) + (ПредпраздничныхДнейВМесяце * 7);
			ЗаписьНабораТекущегоМесяца.НормаЧасовЖенщиныШестидневка = ((РабочихДнейВМесяце + 1) * 8) + (ПредпраздничныхДнейВМесяце * 7);;
			
			ЗаписьНабораТекущегоМесяца.КалендраныхДней				= День(КонецМесяца(ТекущийМесяц));
			
		КонецЕсли;
		
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц,1);	
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	ОбщегоНазначения.СообщитьПользователю("Данные за "+Год+" год загружены в данные нормы времени.");
	
КонецПроцедуры

// Функция - Получить норма времени таблица
//
// Параметры:
//  ИсходныеДанные	 - структура	 - Содержит период по которому идет отбор.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений нормы времени.
//
Функция ПолучитьНормаВремениТаблица(ИсходныеДанные) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНормаВремени.Год КАК Год,
		|	инкНормаВремени.Месяц КАК Месяц,
		|	инкНормаВремени.РабочихДнейВМесяце КАК РабочихДнейВМесяце,
		|	инкНормаВремени.НормаЧасовМужчиныПятидневка КАК НормаЧасовМужчиныПятидневка,
		|	инкНормаВремени.НормаЧасовЖенщиныПятидневка КАК НормаЧасовЖенщиныПятидневка,
		|	инкНормаВремени.Шестидневка КАК Шестидневка,
		|	инкНормаВремени.НормаЧасовМужчиныШестидневка КАК НормаЧасовМужчиныШестидневка,
		|	инкНормаВремени.НормаЧасовЖенщиныШестидневка КАК НормаЧасовЖенщиныШестидневка,
		|	инкНормаВремени.КалендраныхДней КАК КалендраныхДней
		|ИЗ
		|	РегистрСведений.инкНормаВремени КАК инкНормаВремени
		|ГДЕ
		|	инкНормаВремени.Период МЕЖДУ &Дата1 И &Дата2";
	
	Запрос.УстановитьПараметр("Дата1", НачалоГода(ИсходныеДанные.Дата1));
	Запрос.УстановитьПараметр("Дата2", НачалоГода(ИсходныеДанные.Дата2));
	
	тз = Запрос.Выполнить().Выгрузить();
	
	Возврат тз;	
	
КонецФункции

// Функция - Получить норму времени из ведомости
//
// Параметры:
//  ИсходныеДанные	 - структура - Содержит период запроса и ссылку на сотрудника.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Норма времени из ведомости
//
Функция ПолучитьНормуВремениИзВедомости(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостиОбороты.Период КАК Месяц,
		|	инкВедомостиОбороты.Сотрудник КАК Сотрудник,
		|	инкВедомостиОбороты.ДниОборот КАК Дни,
		|	инкВедомостиОбороты.ДниФактОборот КАК ДниФакт,
		|	инкВедомостиОбороты.ЧасыОборот КАК Часы,
		|	инкВедомостиОбороты.ЧасыФактОборот КАК ЧасыФакт,
		|	инкВедомостиОбороты.НормаДниОборот КАК НормаДни,
		|	инкВедомостиОбороты.НормаДниФактОборот КАК НормаДниФакт,
		|	инкВедомостиОбороты.НормаЧасыОборот КАК НормаЧасы,
		|	инкВедомостиОбороты.НормаЧасыФактОборот КАК НормаЧасыФакт
		|ИЗ
		|	РегистрНакопления.инкВедомости.Обороты(&Дата1, &Дата2, МЕСЯЦ, Сотрудник = &Сотрудник) КАК инкВедомостиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	                                                          
	Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Дата1);
	Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Дата2);
	
	Если НЕ инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Сотрудник") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Сотрудник = &Сотрудник","Истина");	
	Иначе
		Запрос.УстановитьПараметр("Сотрудник", ИсходныеДанные.Сотрудник); 	
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти
