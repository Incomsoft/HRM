
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура - Добавить прочие начисления в объект
//
// Параметры:
//  ОбъектРасчета			 - Документ объект	- "Документ расчета зарплаты" 
//  Сотрудник				 - Ссылка	 		- Справочник "Сотрудники"
//  ПрочиеНачисленияТаблица	 - ТаблицаЗначений	- Таблица прочих начислений
//  ДокументСсылка			 - Ссылка			- Ссылка на документ
//  ДанныеСотрудника		 - Структура	 	- Данные сотрудника
//
Процедура ДобавитьПрочиеНачисленияВОбъект(ОбъектРасчета, Сотрудник, ПрочиеНачисленияТаблица = Неопределено, ДокументСсылка = Неопределено, ДанныеСотрудника = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрочиеНачисленияТаблица = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Удаление строк начислений:
	стрПоиск = Новый Структура;
	стрПоиск.Вставить("Сотрудник",Сотрудник);
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		стрПоиск.Вставить("ДокументСсылка",ДокументСсылка);		
	КонецЕсли;
	массСтрокиПрочихНачислений = ОбъектРасчета.ПрочиеНачисления.НайтиСтроки(стрПоиск);
	Для Каждого ЭлементМассив Из массСтрокиПрочихНачислений Цикл
		ОбъектРасчета.ПрочиеНачисления.Удалить(ЭлементМассив); 
	КонецЦикла;
	
	Для каждого стртзПрочиеНачисления из ПрочиеНачисленияТаблица Цикл

		Если (стртзПрочиеНачисления.СуммаНачисления = 0) Тогда
			Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
				Если стртзПрочиеНачисления.ПроцентОтБазы = 0 Тогда
					Продолжить;	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(стртзПрочиеНачисления.Начисление) Тогда
			Продолжить;
		КонецЕсли; 
		
		стрПрочиеНачисления = ОбъектРасчета.ПрочиеНачисления.Добавить(); 
		ЗаполнитьЗначенияСвойств(стрПрочиеНачисления,стртзПрочиеНачисления);
		стрПрочиеНачисления.Сотрудник = Сотрудник;
		стрПрочиеНачисления.ВПроцентах = стртзПрочиеНачисления.Начисление.ВПроцентах;   
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
        	стрПрочиеНачисления.ДокументСсылка = ДокументСсылка;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСотрудника) Тогда
			стрПрочиеНачисления.Подразделение = ДанныеСотрудника.Подразделение;
		КонецЕсли;   
		
		Если ДокументСсылка = Неопределено Тогда
			
			Если ОбъектРасчета.ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
				стрПрочиеНачисления.Дни		= стртзПрочиеНачисления.ДниЧасы;	
				стрПрочиеНачисления.ДниФакт = стртзПрочиеНачисления.ДниЧасыФакт;
			Иначе
				стрПрочиеНачисления.Часы		= стртзПрочиеНачисления.ДниЧасы;	
				стрПрочиеНачисления.ЧасыФакт	= стртзПрочиеНачисления.ДниЧасыФакт;
			КонецЕсли;  
			
			Если ЗначениеЗаполнено(стртзПрочиеНачисления.ПериодНачисления) Тогда
				стрПрочиеНачисления.ПериодДата1 = стртзПрочиеНачисления.ПериодНачисления.ДатаНачала;
				стрПрочиеНачисления.ПериодДата2 = стртзПрочиеНачисления.ПериодНачисления.ДатаОкончания;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры                 

// Функция - Разность дат производственных календарей по видам дней
//
// Параметры:
//  ПроизводственныйКалендарь	 - Ссылка	- Справочник "Производственные календари";
//  НачалоПериода				 - Дата	 	- Начало периода;
//  ОкончаниеПериода			 - Дата	    - Окончание периода;
// 
// Возвращаемое значение:
//   - Число;
//
Функция РазностьДатПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДнейПроизводственногоКалендаря.Ссылка КАК ВидДня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней
		|ИЗ
		|	Перечисление.ВидыДнейПроизводственногоКалендаря КАК ВидыДнейПроизводственногоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВидыДнейПроизводственногоКалендаря.Ссылка = ДанныеПроизводственногоКалендаря.ВидДня
		|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДнейПроизводственногоКалендаря.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДня";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);

	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДнейПоВидам = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		КоличествоДнейПоВидам.Вставить(Выборка.ВидДня, Выборка.КоличествоДней);
	КонецЦикла;
		
	Возврат КоличествоДнейПоВидам;
	
КонецФункции

// Функция - Рабочих дней часов в периоде
//
// Параметры:
//  ПроизводственныйКалендарь	 - Ссылка	- Справочник "Производственные календари";
//  НачалоПериода				 - Дата	 	- Начало периода;
//  ОкончаниеПериода			 - Дата	    - Окончание периода;
// 
// Возвращаемое значение:
//   - Число;
//
Функция РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	РабочихДнейЧасов = Новый Структура("Дней,Часов", 0, 0);
	
	ДанныеКалендаря = РазностьДатПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода);
	
	РабочиеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ПредпраздничныеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	РабочихДнейЧасов.Дней = РабочиеДни + ПредпраздничныеДни;
	РабочихДнейЧасов.Часов = РабочиеДни * 8 + ПредпраздничныеДни * 7;
	
	Возврат РабочихДнейЧасов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти
