
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.ЗагрузкаИзВнешнегоИсточника = Ложь;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	ПерезаписьПрочихНачислений(Отказ, РежимЗаписи, РежимПроведения);	
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ПроверитьНаличиеДвиженийБущущихПериодов(Отказ, Истина);	
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ИсточникФинансирования) Тогда
		ЭтотОбъект.ИсточникФинансирования = Справочники.инкИсточникиФинансирования.ОсновнойБаланс;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроверкаВозможностиПроведенияДокумента(Отказ, РежимПроведения);
	ПересчетСотрудниковВОбъекте();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;      
	
	ЗаписьДвижений_инкВедомости(Отказ, РежимПроведения);
	ЗаписьДвижений_инкНачисления(Отказ, РежимПроведения);
	ЗаписьДвижений_инкУдержания(Отказ, РежимПроведения);
	ЗаписьДвижений_инкНалогУдержанный(Отказ, РежимПроведения);
	ЗаписьДвижений_инкВычетыНДФЛ(Отказ, РежимПроведения); 
	
КонецПроцедуры

#Область о // Запись движений документа:
	
Процедура ЗаписьДвижений_инкВедомости(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	инкВедомости = ЭтотОбъект.Движения.инкВедомости;
	инкВедомости.Записывать = Истина;
	
	// Основные начисления:
	Для каждого ВедомостьСтрока из ЭтотОбъект.Ведомость Цикл
		
		Если (ВедомостьСтрока.ВсегоНачислено = 0) И (ВедомостьСтрока.ВсегоУдержано = 0) Тогда
			Продолжить;	
		КонецЕсли;
		
		Движение = инкВедомости.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВедомостьСтрока);
		Движение.ИсточникФинансирования = ЭтотОбъект.ИсточникФинансирования;
		Движение.Период = НачалоМесяца(ЭтотОбъект.МесяцНачисления);
		Движение.Организация = ЭтотОбъект.Организация;         
		Движение.Подразделение = ВедомостьСтрока.Подразделение;
		
		Движение.РайонныйКоэффициент = ВедомостьСтрока.РайонныйКоэффициент;
		Движение.СевернаяНадбавка    = ВедомостьСтрока.СевернаяНадбавка;
		
		// НДФЛ:
		ПоискСотрудника = Новый Структура("Сотрудник",ВедомостьСтрока.Сотрудник);
		НДФЛМассив = ЭтотОбъект.НДФЛ.НайтиСтроки(ПоискСотрудника);
		Для каждого НДФЛСтрока из НДФЛМассив Цикл
			Движение.ОблагаемыйДоход = НДФЛСтрока.ОблагаемыйДоходЗаМесяц;
			Движение.НалоговаяБаза = НДФЛСтрока.НалоговаяБазаЗаМесяц;
			Движение.ВычетСтандартный = НДФЛСтрока.СтандартныеВычетыНаРаботникаЗаМесяц;
			Движение.ВычетНаДетей = НДФЛСтрока.СтандартныеВычетыНаДетейЗаМесяц;
			Движение.ВычетИмущественный = НДФЛСтрока.ИмущественныйВычетЗаМесяц;
			Движение.ВычетСоциальный = НДФЛСтрока.СоциальныеВычетыЗаМесяц; 
		КонецЦикла;
		
		ОбнулитьЧасыДниОтВидаРасчета(ЭтотОбъект.ВидРасчетаДниЧасы,Движение);
		
	КонецЦикла;
	
КонецПроцедуры  

Процедура ОбнулитьЧасыДниОтВидаРасчета(ВидРасчетаДниЧасы,Движение)

	Если ВидРасчетаДниЧасы = Перечисления.инкВидРасчетаДниЧасы.ВДнях Тогда
		Движение.Часы 			= 0;
		Движение.ЧасыФакт		= 0;
		Движение.НормаЧасы		= 0;
		Движение.НормаЧасыФакт	= 0;
	Иначе
		Движение.Дни 		= 0;
		Движение.ДниФакт	= 0;
		Движение.НормаДни 		= 0;
		Движение.НормаДниФакт	= 0;
	КонецЕсли;
		
КонецПроцедуры   

Процедура ДобавитьДвижение_ОсновноеНачисление(ВедомостьСтрока,инкНачисления,Начисление,Сумма)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = инкНачисления.Добавить(); 
	
	ЗаполнитьЗначенияСвойств(Движение,ВедомостьСтрока);
	
	Движение.ИсточникФинансирования = ЭтотОбъект.ИсточникФинансирования;
	Движение.Начисление			= Начисление;
	Движение.Период 		   	= НачалоМесяца(ЭтотОбъект.МесяцНачисления);
	Движение.Сотрудник			= ВедомостьСтрока.Сотрудник;
	Движение.ДокументОснование 	= ЭтотОбъект.Ссылка;
	Движение.ДоходНДФЛ 			= Справочники.инкДоходНДФЛ.КодДоходаПоУмолчанию;
	Движение.Организация 		= ЭтотОбъект.Организация;
	Движение.Подразделение 		= ВедомостьСтрока.Подразделение;
	Движение.ВычетНДФЛ 			= Справочники.инкВычетыНДФЛ.ПустаяСсылка();
	Движение.Налог 				= Истина;
	Движение.СуммаНачисления	= Сумма;
	Движение.СуммаВычета		= 0;
	Движение.РайонныйКоэффициент = ВедомостьСтрока.РайонныйКоэффициентОклад;
	Движение.СевернаяНадбавка    = ВедомостьСтрока.СевернаяНадбавкаОклад;
	Движение.Отпуск				= Начисление.Отпуск;
	Движение.ВходитВФОТ			= Начисление.ВходитВФОТ;
	Движение.БольничныйЛист		= Начисление.БольничныйЛист; 
	Движение.МатериальнаяПомощь = Начисление.МатериальнаяПомощь;

	Движение.Дни		= ВедомостьСтрока.Дни;
	Движение.ДниФакт    = ВедомостьСтрока.ДниФакт;
	Движение.Часы		= ВедомостьСтрока.Часы;
	Движение.ЧасыФакт   = ВедомостьСтрока.ЧасыФакт;

	Если ЗначениеЗаполнено(ВедомостьСтрока.НормаДниФакт) ИЛИ
		 ЗначениеЗаполнено(ВедомостьСтрока.НормаЧасыФакт)
	Тогда            
		
		Движение.Дни		= ВедомостьСтрока.НормаДни;
		Движение.ДниФакт    = ВедомостьСтрока.НормаДниФакт;
		Движение.Часы		= ВедомостьСтрока.НормаЧасы;
		Движение.ЧасыФакт   = ВедомостьСтрока.НормаЧасыФакт;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьДвижение_ДополнительноеНачисление(инкНачисления,ПрочиеНачисленияСтрока)
	
	Если ПрочиеНачисленияСтрока.СуммаНачисления = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = инкНачисления.Добавить();  
	
	ЗаполнитьЗначенияСвойств(Движение,ПрочиеНачисленияСтрока);
	
	Движение.ИсточникФинансирования = ЭтотОбъект.ИсточникФинансирования;
	Движение.Начисление 		= ПрочиеНачисленияСтрока.Начисление;
	Движение.Период 		   	= НачалоМесяца(ЭтотОбъект.МесяцНачисления);
	Движение.Сотрудник			= ПрочиеНачисленияСтрока.Сотрудник;
	Движение.ДокументОснование 	= ЭтотОбъект.Ссылка;
	Движение.ДокументНачисления	= ПрочиеНачисленияСтрока.ДокументСсылка;
	//
	Движение.ДоходНДФЛ 			= ПрочиеНачисленияСтрока.Начисление.ДоходНДФЛ;
	Если Не ЗначениеЗаполнено(Движение.ДоходНДФЛ) Тогда
		Движение.ДоходНДФЛ = Справочники.инкДоходНДФЛ.КодДоходаПоУмолчанию;
	КонецЕсли;
	//
	Движение.Организация 		= ЭтотОбъект.Организация;
	Движение.Подразделение 		= ПрочиеНачисленияСтрока.Подразделение;
	Движение.ВычетНДФЛ 			= ПрочиеНачисленияСтрока.ВычетНДФЛ;
	Движение.Налог 				= ПрочиеНачисленияСтрока.Начисление.Налог;
	Движение.СуммаНачисления	= ПрочиеНачисленияСтрока.СуммаНачисления;
	Движение.СуммаВычета		= ПрочиеНачисленияСтрока.СуммаВычета;
	Движение.РайонныйКоэффициент = ПрочиеНачисленияСтрока.РайонныйКоэффициент;
	Движение.СевернаяНадбавка    = ПрочиеНачисленияСтрока.СевернаяНадбавка; 
	Движение.Отпуск				= ПрочиеНачисленияСтрока.Начисление.Отпуск;
	Движение.Ст9ФЗ212			= ПрочиеНачисленияСтрока.Начисление.Ст9ФЗ212;
	Движение.ВходитВФОТ			= ПрочиеНачисленияСтрока.Начисление.ВходитВФОТ;
	Движение.БольничныйЛист		= ПрочиеНачисленияСтрока.Начисление.БольничныйЛист;
	Движение.МатериальнаяПомощь = ПрочиеНачисленияСтрока.Начисление.МатериальнаяПомощь;
	
КонецПроцедуры  

Процедура ЗаписьДвижений_инкНачисления(Отказ, РежимПроведения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	инкНачисления = ЭтотОбъект.Движения.инкНачисления;
	инкНачисления.Записывать = Истина;
	
	// Основные начисления:
	Для каждого ВедомостьСтрока из ЭтотОбъект.Ведомость Цикл
		
		ДобавитьДвижение_ОсновноеНачисление(ВедомостьСтрока,
		                                    инкНачисления,
											ПланыВидовРасчета.инкНачисления.Оклад,
											ВедомостьСтрока.Оклад);		
											
	КонецЦикла;	
	
	// Прочие начисления:
	Для каждого ПрочиеНачисленияСтрока из ЭтотОбъект.ПрочиеНачисления Цикл
		ДобавитьДвижение_ДополнительноеНачисление(инкНачисления,ПрочиеНачисленияСтрока);		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ЗаписьДвижений_инкУдержания(Отказ, РежимПроведения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	инкУдержания = ЭтотОбъект.Движения.инкУдержания;
	инкУдержания.Записывать = Истина;
	
	Для каждого ПрочиеУдержанияСтрока из ЭтотОбъект.ПрочиеУдержания Цикл
		
		Движение = инкУдержания.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ПрочиеУдержанияСтрока);
		
		Если ПрочиеУдержанияСтрока.Удержание = ПланыВидовРасчета.инкУдержания.ИсполнительныйЛист Тогда
			Движение.ПроцентОтБазы = Перечисления.инкИсполнительныйЛистПроцент.ПолучитьПроцент(ПрочиеУдержанияСтрока.Сотрудник.ИсполнительныйЛистПроцент) * 100;
		КонецЕсли;
		
		Движение.Период 		   	= НачалоМесяца(ЭтотОбъект.МесяцНачисления);
		Движение.ИсточникФинансирования = ЭтотОбъект.ИсточникФинансирования;
		Движение.ДокументОснование 	= ЭтотОбъект.Ссылка;
		Движение.Организация 		= ЭтотОбъект.Организация;
		
	КонецЦикла;
	 
КонецПроцедуры

Процедура ЗаписьДвижений_инкНалогУдержанный(Отказ, РежимПроведения);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НалогУдержанный = ЭтотОбъект.Движения.инкНалогУдержанный;
	НалогУдержанный.Записывать = Истина;
	
	Для каждого НДФЛСтрока из ЭтотОбъект.НДФЛ Цикл
		
		Движение = НалогУдержанный.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,НДФЛСтрока);		
		Движение.Период 		   = НачалоМесяца(ЭтотОбъект.МесяцНачисления);
		Движение.ИсточникФинансирования = ЭтотОбъект.ИсточникФинансирования;
		Движение.ДокументОснование = ЭтотОбъект.Ссылка;
		Движение.Организация	   = ЭтотОбъект.Организация;
		Движение.Подразделение 	   = НДФЛСтрока.Подразделение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьДвижений_инкВычетыНДФЛ(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВычетыНДФЛРегистр = ЭтотОбъект.Движения.инкВычетыНДФЛ;
	ВычетыНДФЛРегистр.Записывать = Истина;
	
	Для каждого ВычетыНДФЛСтрока из ЭтотОбъект.ВычетыНДФЛ Цикл
		
		Движение = ВычетыНДФЛРегистр.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ВычетыНДФЛСтрока);
		Движение.Период = НачалоМесяца(ЭтотОбъект.МесяцНачисления);
		Движение.ИсточникФинансирования = ЭтотОбъект.ИсточникФинансирования;
		Движение.ДокументОснование = ЭтотОбъект.Ссылка;
		Движение.ГруппаВычетаНДФЛ = ВычетыНДФЛСтрока.ВычетНДФЛ.ГруппаВычетаНДФЛ;
		Движение.Организация = ЭтотОбъект.Организация;	
		Движение.Подразделение = ВычетыНДФЛСтрока.Подразделение;
		
	КонецЦикла;
	
КонецПроцедуры     

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаВозможностиПроведенияДокумента(Отказ, РежимПроведения)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;      
	
	ПроверитьНаличиеДвиженийБущущихПериодов(Отказ);
	
КонецПроцедуры 

Процедура ПроверитьНаличиеДвиженийБущущихПериодов(Отказ, ОтменаПроведения = Ложь)
	
	Если НЕ Константы.инкБлокировкаПроведенияДокументовНачисленияЗарплатыЗаднимЧислом.Получить() Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостиОбороты.Период КАК Период,
		|	инкВедомостиОбороты.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.инкВедомости.Обороты(
		|			&Дата1,
		|			,
		|			Регистратор,
		|			Организация = &Организация
		|				И Подразделение = &Подразделение) КАК инкВедомостиОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	инкВедомостиОбороты.Период,
		|	инкВедомостиОбороты.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дата1", КонецМесяца(МесяцНачисления) + 1);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение", ЭтотОбъект.Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПроведениеСтрока = "Провести документ";
		Если ОтменаПроведения Тогда
			ПроведениеСтрока = "Отменить проведение документа";	
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю("Внимание! "+ПроведениеСтрока+" в текущем периоде на "+Формат(ЭтотОбъект.МесяцНачисления,"ДФ=dd.MM.yyyy")+
		        " нельзя, так как есть проведенные документы в будущих периодах на: "+ВыборкаДетальныеЗаписи.Регистратор);
		Отказ = Истина;	 
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПерезаписьПрочихНачислений(Отказ, РежимЗаписи, РежимПроведения);	

	Для каждого ПрочееНачисление Из ЭтотОбъект.ПрочиеНачисления Цикл
		ПрочееНачисление.ВПроцентах = ПрочееНачисление.Начисление.ВПроцентах;
		
		Если Не ЗначениеЗаполнено(ПрочееНачисление.Подразделение) Тогда
			
			ПоискСотрудника = Новый Структура("Сотрудник",ПрочееНачисление.Сотрудник);
			ВедомостьМассив = ЭтотОбъект.Ведомость.НайтиСтроки(ПоискСотрудника);
			Если ВедомостьМассив.Количество() > 0 Тогда
				ПрочееНачисление.Подразделение = ВедомостьМассив[0].Подразделение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСотрудниковВВедомость(Сотрудники,ПерерасчетСотрудников = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудники) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СотрудникЭлемент из Сотрудники Цикл
		
		ВедомостьСтрока = ЭтотОбъект.Ведомость.Добавить();
		ВедомостьСтрока.Сотрудник = СотрудникЭлемент;
		//ВедомостьСтрока.ОкладРазмер = СотрудникЭлемент.Оклад;
		//ВедомостьСтрока.Подразделение = СотрудникЭлемент.Подразделение;
		
	КонецЦикла;
	
	ПересчетСотрудниковВОбъекте(Сотрудники,ПерерасчетСотрудников);
	
КонецПроцедуры

Процедура ПересчетСотрудниковВОбъекте(СписокСотрудников = Неопределено,ПерерасчетСотрудников = Истина, ВыводитьСообщения = Ложь, ДопПараметры = Неопределено) Экспорт
	
	МенеджерРасчета = Обработки.инкРасчетЗарабатнойПлаты.Создать();
	МенеджерРасчета.Инициализация(ЭтотОбъект);

	Если ТипЗнч(СписокСотрудников) = Тип("СправочникСсылка.инкСотрудники") Тогда
		МенеджерРасчета.ДанныеНачисленияЗарплаты.Сотрудники.Добавить(СписокСотрудников);
	ИначеЕсли ЗначениеЗаполнено(СписокСотрудников) Тогда 
		Для каждого стрСотрудник из СписокСотрудников Цикл
			МенеджерРасчета.ДанныеНачисленияЗарплаты.Сотрудники.Добавить(стрСотрудник);
		КонецЦикла;
	Иначе
		Для каждого стрСотрудник из ЭтотОбъект.Ведомость Цикл
			МенеджерРасчета.ДанныеНачисленияЗарплаты.Сотрудники.Добавить(стрСотрудник.Сотрудник);
		КонецЦикла;		
	КонецЕсли;
	//
	МенеджерРасчета.ДанныеНачисленияЗарплаты.булПерерасчет = ПерерасчетСотрудников;
	МенеджерРасчета.ДанныеНачисленияЗарплаты.ВыводитьСлужебныеСообщения = ВыводитьСообщения;   
	//
	
	Если ДопПараметры <> Неопределено Тогда
		
		Если инкОбщийКлиентСервер.ЕстьСвойство(ДопПараметры,"ОплатаАванса") Тогда
			МенеджерРасчета.ДанныеНачисленияЗарплаты.ОплатаАванса = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерРасчета.ВыполнитьРасчетЗаработнойПлаты(); 	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,МенеджерРасчета.ДанныеНачисленияЗарплаты.ОбъектНачисленияЗарплаты);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
