
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Функция - Получает перечень удержаний у сотрудников по документу начисления:
//
// Параметры:
//  ЗаполнениеСтруктура	 - Структура - Структура данных для запроса
//		- ДокументОснование	- Ссылка - Документ начисления зарплаты
//		- ЗарплатныйПроект 	- Ссылка - Справочник ссылка "Зарплатные проекты" 
//		- ВидыУдержаний 	- Массив - Массив удержаний 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные для выплаты зарплаты
//
Функция ПолучитьВедомостьПоУдержаниям(ЗаполнениеСтруктура) Экспорт

	ВедомостьТаблица = Новый ТаблицаЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНачислениеЗарплатыПрочиеУдержания.Ссылка КАК ДокументОснование,
		|	инкНачислениеЗарплатыПрочиеУдержания.Сотрудник КАК Сотрудник,
		|	СУММА(инкНачислениеЗарплатыПрочиеУдержания.СуммаУдержания) КАК КВыплате
		|ИЗ
		|	Документ.инкНачислениеЗарплаты.ПрочиеУдержания КАК инкНачислениеЗарплатыПрочиеУдержания
		|ГДЕ
		|	инкНачислениеЗарплатыПрочиеУдержания.Ссылка = &ДокументОснование
		|	И инкНачислениеЗарплатыПрочиеУдержания.Сотрудник.ЗарплатныйПроект = &ЗарплатныйПроект
		|	И инкНачислениеЗарплатыПрочиеУдержания.Удержание В(&ВидыУдержаний)
		|
		|СГРУППИРОВАТЬ ПО
		|	инкНачислениеЗарплатыПрочиеУдержания.Ссылка,
		|	инкНачислениеЗарплатыПрочиеУдержания.Сотрудник";
	
	Запрос.УстановитьПараметр("ДокументОснование", ЗаполнениеСтруктура.ДокументОснование);
	Запрос.УстановитьПараметр("ВидыУдержаний", ЗаполнениеСтруктура.ВидыУдержаний);

	Если инкОбщийКлиентСервер.ЕстьСвойство(ЗаполнениеСтруктура,"ЗарплатныйПроект") Тогда
		Запрос.УстановитьПараметр("ЗарплатныйПроект", ЗаполнениеСтруктура.ЗарплатныйПроект);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"инкНачислениеЗарплатыПрочиеУдержания.Сотрудник.ЗарплатныйПроект = &ЗарплатныйПроект","Истина");
	КонецЕсли;
	
	ВедомостьТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ВедомостьТаблица;	
	
КонецФункции     

// Функция - Получает разрез данных по ведомостям
//
// Параметры:
//  ИсходныеДанные	 - Структура - Содержит структуру данных для получения разреза данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - разрез данных по ведомостям
//
Функция ПолучитьДанныеПоВедомостям(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостиОбороты.Организация КАК Организация,
		|	инкВедомостиОбороты.Подразделение КАК Подразделение,
		|	инкВедомостиОбороты.Сотрудник КАК Сотрудник,
		|	инкВедомостиОбороты.ОблагаемыйДоходОборот КАК ОблагаемыйДоход,
		|	инкВедомостиОбороты.НалоговаяБазаОборот КАК НалоговаяБаза,
		|	инкВедомостиОбороты.ВычетСтандартныйОборот КАК ВычетСтандартный,
		|	инкВедомостиОбороты.ВычетНаДетейОборот КАК ВычетНаДетей,
		|	инкВедомостиОбороты.ВычетИмущественныйОборот КАК ВычетИмущественный,
		|	инкВедомостиОбороты.ВычетСоциальныйОборот КАК ВычетСоциальный,
		|	инкВедомостиОбороты.ВсегоНачисленоОборот КАК ВсегоНачислено,
		|	инкВедомостиОбороты.ВсегоУдержаноОборот КАК ВсегоУдержано,
		|	инкВедомостиОбороты.ДниОборот КАК Дни,
		|	инкВедомостиОбороты.ДниФактОборот КАК ДниФакт,
		|	инкВедомостиОбороты.ЧасыОборот КАК Часы,
		|	инкВедомостиОбороты.ЧасыФактОборот КАК ЧасыФакт,
		|	инкВедомостиОбороты.НормаДниОборот КАК НормаДни,
		|	инкВедомостиОбороты.НормаДниФактОборот КАК НормаДниФакт,
		|	инкВедомостиОбороты.НормаЧасыОборот КАК НормаЧасы,
		|	инкВедомостиОбороты.НормаЧасыФактОборот КАК НормаЧасыФакт,
		|	инкВедомостиОбороты.ОкладОборот КАК Оклад,
		|	инкВедомостиОбороты.РайонныйКоэффициентОборот КАК РайонныйКоэффициент,
		|	инкВедомостиОбороты.СевернаяНадбавкаОборот КАК СевернаяНадбавка,
		|	инкВедомостиОбороты.СальдоВходящееОборот КАК СальдоВходящее,
		|	инкВедомостиОбороты.СальдоИсходящееОборот КАК СальдоИсходящее,
		|	инкВедомостиОбороты.АлиментыОборот КАК Алименты,
		|	инкВедомостиОбороты.КВыплатеОборот КАК КВыплате,
		|	инкВедомостиОбороты.ПрочиеУдержанияОборот КАК ПрочиеУдержания,
		|	инкВедомостиОбороты.ОтпускИБольничныйЛистОборот КАК ОтпускИБольничныйЛист
		|ПОМЕСТИТЬ втВедомостьОбороты
		|ИЗ
		|	РегистрНакопления.инкВедомости.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			Организация = &Организация
		|				И Подразделение В (&Подразделения)
		|				И Сотрудник В (&Сотрудники)) КАК инкВедомостиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	инкНалогУдержанныйОбороты.Сотрудник КАК Сотрудник,
		|	инкНалогУдержанныйОбороты.Организация КАК Организация,
		|	инкНалогУдержанныйОбороты.Подразделение КАК Подразделение,
		|	инкНалогУдержанныйОбороты.СуммаНалогаОборот КАК НДФЛ
		|ПОМЕСТИТЬ втНДФЛ
		|ИЗ
		|	РегистрНакопления.инкНалогУдержанный.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			Организация = &Организация
		|				И Подразделение В (&Подразделения)
		|				И Сотрудник В (&Сотрудники)) КАК инкНалогУдержанныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВедомостьОбороты.Организация КАК Организация,
		|	втВедомостьОбороты.Подразделение КАК Подразделение,
		|	втВедомостьОбороты.Сотрудник КАК Сотрудник,
		|	втВедомостьОбороты.ОблагаемыйДоход КАК ОблагаемыйДоход,
		|	втВедомостьОбороты.НалоговаяБаза КАК НалоговаяБаза,
		|	втВедомостьОбороты.ВычетСтандартный КАК ВычетСтандартный,
		|	втВедомостьОбороты.ВычетНаДетей КАК ВычетНаДетей,
		|	втВедомостьОбороты.ВычетИмущественный КАК ВычетИмущественный,
		|	втВедомостьОбороты.ВычетСоциальный КАК ВычетСоциальный,
		|	втВедомостьОбороты.ВсегоНачислено КАК ВсегоНачислено,
		|	втВедомостьОбороты.ВсегоУдержано КАК ВсегоУдержано,
		|	втВедомостьОбороты.Дни КАК Дни,
		|	втВедомостьОбороты.ДниФакт КАК ДниФакт,
		|	втВедомостьОбороты.Часы КАК Часы,
		|	втВедомостьОбороты.ЧасыФакт КАК ЧасыФакт,
		|	втВедомостьОбороты.НормаДни КАК НормаДни,
		|	втВедомостьОбороты.НормаДниФакт КАК НормаДниФакт,
		|	втВедомостьОбороты.НормаЧасы КАК НормаЧасы,
		|	втВедомостьОбороты.НормаЧасыФакт КАК НормаЧасыФакт,
		|	втВедомостьОбороты.Оклад КАК Оклад,
		|	втВедомостьОбороты.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	втВедомостьОбороты.СевернаяНадбавка КАК СевернаяНадбавка,
		|	втВедомостьОбороты.СальдоВходящее КАК СальдоВходящее,
		|	втВедомостьОбороты.СальдоИсходящее КАК СальдоИсходящее,
		|	ЕСТЬNULL(втНДФЛ.НДФЛ, 0) КАК НДФЛ,
		|	втВедомостьОбороты.Алименты КАК Алименты,
		|	втВедомостьОбороты.КВыплате КАК КВыплате,
		|	втВедомостьОбороты.ПрочиеУдержания КАК ПрочиеУдержания,
		|	втВедомостьОбороты.ОтпускИБольничныйЛист КАК ОтпускИБольничныйЛист
		|ИЗ
		|	втВедомостьОбороты КАК втВедомостьОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНДФЛ КАК втНДФЛ
		|		ПО втВедомостьОбороты.Организация = втНДФЛ.Организация
		|			И втВедомостьОбороты.Подразделение = втНДФЛ.Подразделение
		|			И втВедомостьОбороты.Сотрудник = втНДФЛ.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Подразделение,
		|	Сотрудник";
	
	МодифицироватьПараметрыЗапросаПоНачислениюЗП(ИсходныеДанные,Запрос);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("Сотрудник");
	
	Возврат РезультатЗапроса;	
	
КонецФункции

// Функция - Получить данные по начислениям
//
// Параметры:
//  ИсходныеДанные				 -	Структура	- Содержит структуру данных для получения разреза данных
//  ВключатьОсновныеНачисления	 -	Булево 		- Признак включения основных начислений 
//  ВходитВФОТ					 - 	Булево		- Признак входа начисления в ФОТ
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные по начислениям в таблице
//
Функция ПолучитьДанныеПоНачислениям(ИсходныеДанные,ВключатьОсновныеНачисления = Ложь, ВходитВФОТ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНачисленияОбороты.Организация КАК Организация,
		|	инкНачисленияОбороты.Подразделение КАК Подразделение,
		|	инкНачисленияОбороты.Сотрудник КАК Сотрудник,
		|	инкНачисленияОбороты.Начисление КАК Начисление,
		|	инкНачисленияОбороты.Начисление.Код КАК НачислениеКод,
		|	инкНачисленияОбороты.Начисление.ВходитВФОТ КАК ВходитВФОТ,
		|	инкНачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисления,
		|	инкНачисленияОбороты.СуммаВычетаОборот КАК СуммаВычета,
		|	инкНачисленияОбороты.РайонныйКоэффициентОборот КАК РайонныйКоэффициент,
		|	инкНачисленияОбороты.СевернаяНадбавкаОборот КАК СевернаяНадбавка,
		|	инкНачисленияОбороты.КоличествоДетейОборот КАК КоличествоДетей,
		|	инкНачисленияОбороты.ДниОборот КАК Дни,
		|	инкНачисленияОбороты.ДниФактОборот КАК ДниФакт,
		|	инкНачисленияОбороты.ЧасыОборот КАК Часы,
		|	инкНачисленияОбороты.ЧасыФактОборот КАК ЧасыФакт
		|ИЗ
		|	РегистрНакопления.инкНачисления.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			Организация = &Организация
		|				И Подразделение В (&Подразделения)
		|				И Сотрудник В (&Сотрудники)
		|				И НЕ Начисление В (&ОсновныеНачисленияМассив)
		|				И ВходитВФОТ = &ВходитВФОТ) КАК инкНачисленияОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачислениеКод";
	
	
	МодифицироватьПараметрыЗапросаПоНачислениюЗП(ИсходныеДанные,Запрос);
	
	Если НЕ ВключатьОсновныеНачисления Тогда
		ОсновныеНачисленияМассив = Новый Массив;
		ОсновныеНачисленияМассив.Добавить(ПланыВидовРасчета.инкНачисления.Оклад);
		Запрос.УстановитьПараметр("ОсновныеНачисленияМассив", ОсновныеНачисленияМассив);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕ Начисление В (&ОсновныеНачисленияМассив)","Истина");
	КонецЕсли; 
	
	Если ВходитВФОТ = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВходитВФОТ = &ВходитВФОТ","Истина");	
	Иначе
		Запрос.УстановитьПараметр("ВходитВФОТ", ВходитВФОТ);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("Сотрудник");
	
	ДобавитьВТаблицуПорядокОтображения(РезультатЗапроса,"Начисление");

	Возврат РезультатЗапроса;	
	
КонецФункции

// Функция - Получить данные по удержаниям
//
// Параметры:
//  ИсходныеДанные	 - Структура - Содержит структуру данных для получения разреза данных 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные по удержаниям
//
Функция ПолучитьДанныеПоУдержаниям(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкУдержанияОбороты.Организация КАК Организация,
		|	инкУдержанияОбороты.Подразделение КАК Подразделение,
		|	инкУдержанияОбороты.Сотрудник КАК Сотрудник,
		|	инкУдержанияОбороты.Удержание КАК Удержание,
		|	инкУдержанияОбороты.Удержание.Код КАК УдержаниеКод,
		|	инкУдержанияОбороты.СуммаУдержанияОборот КАК СуммаУдержания
		|ИЗ
		|	РегистрНакопления.инкУдержания.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			Организация = &Организация
		|				И Подразделение В (&Подразделения)
		|				И Сотрудник В (&Сотрудники)) КАК инкУдержанияОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	УдержаниеКод";
	
	МодифицироватьПараметрыЗапросаПоНачислениюЗП(ИсходныеДанные,Запрос);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("Сотрудник");
	
	ДобавитьВТаблицуПорядокОтображения(РезультатЗапроса,"Удержание");
	
	Возврат РезультатЗапроса;	
	
КонецФункции     

// Процедура - Добавить в таблицу порядок отображения
//
// Параметры:
//  ДанныеТаблица		 - ТабицаЗначений	 - Таблица с данными начислений/удержаний
//  ПланыВидовРасчета	 - Строка			 - "Начисление" или "Удержание"
//
Процедура ДобавитьВТаблицуПорядокОтображения(ДанныеТаблица,ПланыВидовРасчета) Экспорт

	ДанныеТаблица.Колонки.Добавить("ПорядокОтображения");
	Для каждого СтрокаРезультата Из ДанныеТаблица Цикл
		СтрокаРезультата.ПорядокОтображения = Число(Прав(СтрокаРезультата[ПланыВидовРасчета].Код,3));
	КонецЦикла;
	
	//ДанныеТаблица.Сортировать("ПорядокОтображения,"+ПланыВидовРасчета+"Код");
	ДанныеТаблица.Сортировать("ПорядокОтображения");
	
КонецПроцедуры 

// Функция - Получить данные по НДФЛ
//
// Параметры:
//  ИсходныеДанные	- Структура - Содержит структуру данных для получения разреза данных 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - разрез данных по удержаниям
//
Функция ПолучитьДанныеПоНДФЛ(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкНалогУдержанныйОбороты.Организация КАК Организация,
		|	инкНалогУдержанныйОбороты.Подразделение КАК Подразделение,
		|	инкНалогУдержанныйОбороты.Сотрудник КАК Сотрудник,
		|	инкНалогУдержанныйОбороты.СуммаНалогаОборот КАК СуммаНалога
		|ИЗ
		|	РегистрНакопления.инкНалогУдержанный.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			Организация = &Организация
		|				И Подразделение В (&Подразделения)
		|				И Сотрудник В (&Сотрудники)) КАК инкНалогУдержанныйОбороты";
	
	МодифицироватьПараметрыЗапросаПоНачислениюЗП(ИсходныеДанные,Запрос);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("Сотрудник");

	Возврат РезультатЗапроса;	
	
КонецФункции     

// Функция - Получить структуру для ведомости начислений удержаний
//
// Параметры:
//  ИсходныеДанные	 - Структура	 - Структура для получения данных ведомости
// 
// Возвращаемое значение:
//  Структура - Структура для ведомсоти начислений и удержаний
//
Функция ПолучитьСтруктуруДляВедомостиНачисленийУдержаний(ИсходныеДанные) Экспорт
	
	ВремяНачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
    
	ДанныеДляОтчета = Новый Структура;
	ДанныеДляОтчета.Вставить("Организация");
	ДанныеДляОтчета.Вставить("Подразделения");
	ДанныеДляОтчета.Вставить("Период");
	ДанныеДляОтчета.Вставить("ИсточникФинансирования");
	
	ДанныеДляОтчета.Вставить("ТаблицаВедомость");
	ДанныеДляОтчета.Вставить("ТаблицаПрочихНачислений");
	ДанныеДляОтчета.Вставить("ТаблицаПрочихУдержаний");
	
	Если ТипЗнч(ИсходныеДанные) = Тип("ДокументОбъект.инкНачислениеЗарплаты") ИЛИ 
		 ТипЗнч(ИсходныеДанные) = Тип("ДокументСсылка.инкНачислениеЗарплаты") ИЛИ
		 ТипЗнч(ИсходныеДанные) = Тип("ДанныеФормыСтруктура")
	Тогда
		
		ДанныеДляОтчета.Организация					= ИсходныеДанные.Организация;
		ДанныеДляОтчета.Подразделения	            = ИсходныеДанные.Подразделение;
		ДанныеДляОтчета.Период	     			    = Новый СтандартныйПериод(НачалоМесяца(ИсходныеДанные.МесяцНачисления),КонецМесяца(ИсходныеДанные.МесяцНачисления)); 
		ДанныеДляОтчета.ИсточникФинансирования		= ИсходныеДанные.ИсточникФинансирования;
		
		ДанныеДляОтчета.ТаблицаВедомость			= ИсходныеДанные.Ведомость.Выгрузить();
		ДанныеДляОтчета.ТаблицаПрочихНачислений		= ИсходныеДанные.ПрочиеНачисления.Выгрузить();
		ДанныеДляОтчета.ТаблицаПрочихУдержаний		= ИсходныеДанные.ПрочиеУдержания.Выгрузить();
		
		ДобавитьВТаблицуПорядокОтображения(ДанныеДляОтчета.ТаблицаПрочихНачислений,"Начисление");
		ДобавитьВТаблицуПорядокОтображения(ДанныеДляОтчета.ТаблицаПрочихУдержаний,"Удержание");		
		
	Иначе
		
		ДанныеДляОтчета.Организация					= ИсходныеДанные.Организация;
		ДанныеДляОтчета.Подразделения	            = ИсходныеДанные.Подразделения;
		ДанныеДляОтчета.Период	       				= Новый СтандартныйПериод(ИсходныеДанные.Дата1,ИсходныеДанные.Дата2);
		ДанныеДляОтчета.ИсточникФинансирования		= "";
		
		ДанныеДляОтчета.ТаблицаВедомость			= инкВедомостиСервер.ПолучитьДанныеПоВедомостям(ДанныеДляОтчета);
		ДанныеДляОтчета.ТаблицаПрочихНачислений		= инкВедомостиСервер.ПолучитьДанныеПоНачислениям(ДанныеДляОтчета);
		ДанныеДляОтчета.ТаблицаПрочихУдержаний		= инкВедомостиСервер.ПолучитьДанныеПоУдержаниям(ДанныеДляОтчета);
		
	КонецЕсли; 
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("Обработка.инкВедомостьНачисленийУдержаний.ФормированиеОтчета",ВремяНачалоЗамера,ДанныеДляОтчета.ТаблицаВедомость.Количество());
	
	Возврат ДанныеДляОтчета;
	
КонецФункции                

// Функция - Получить сальдо входящее таблица
//
// Параметры:
//  ИсходныеДанные	 - Структура - Содержит структуру данных для получения разреза данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Сальдо входящее таблица
//
Функция ПолучитьСальдоВходящееТаблица(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	инкВедомостиОбороты.Сотрудник КАК Сотрудник,
		|	инкВедомостиОбороты.Организация КАК Организация,
		|	инкВедомостиОбороты.Подразделение КАК Подразделение,
		|	инкВедомостиОбороты.СальдоИсходящееОборот КАК СальдоВходящее
		|ИЗ
		|	РегистрНакопления.инкВедомости.Обороты(
		|			&Дата1,
		|			&Дата2,
		|			,
		|			Организация = &Организация
		|				И Подразделение В (&Подразделения)
		|				И Сотрудник В (&Сотрудники)) КАК инкВедомостиОбороты";

	МодифицироватьПараметрыЗапросаПоНачислениюЗП(ИсходныеДанные,Запрос);
	Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ДобавитьМесяц(ИсходныеДанные.Период.ДатаНачала,-1)));
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(ДобавитьМесяц(ИсходныеДанные.Период.ДатаОкончания,-1)));
	
	СальдоТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат СальдоТаблица;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Модифицировать параметры запроса по начислению ЗП
//
// Параметры:
//  ИсходныеДанные	 - Структура - Содержит параметры для запроса; 
//  Запрос			 - Запрос	 - Запрос для модификации;
//
Процедура МодифицироватьПараметрыЗапросаПоНачислениюЗП(ИсходныеДанные,Запрос)

	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Период") Тогда
		Если ТипЗнч(ИсходныеДанные.Период) = Тип("Дата") Тогда
			Запрос.УстановитьПараметр("Дата1", НачалоМесяца(ИсходныеДанные.Период));
			Запрос.УстановитьПараметр("Дата2", КонецМесяца(ИсходныеДанные.Период)); 
		Иначе
			Запрос.УстановитьПараметр("Дата1", ИсходныеДанные.Период.ДатаНачала);
			Запрос.УстановитьПараметр("Дата2", ИсходныеДанные.Период.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;

	УстановитьПараметр = Ложь;
  	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Организация") Тогда
		Если ЗначениеЗаполнено(ИсходныеДанные.Организация) Тогда
			УстановитьПараметр = Истина;		
		КонецЕсли;
	КонецЕсли;	
	Если УстановитьПараметр Тогда
		Запрос.УстановитьПараметр("Организация", ИсходныеДанные.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация","Истина");
	КонецЕсли;
	
	УстановитьПараметр = Ложь;
	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Подразделения") Тогда
		Если ЗначениеЗаполнено(ИсходныеДанные.Подразделения) Тогда
			УстановитьПараметр = Истина;	
		КонецЕсли;
	КонецЕсли;
	Если УстановитьПараметр Тогда
		Запрос.УстановитьПараметр("Подразделения", ИсходныеДанные.Подразделения);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Подразделение В (&Подразделения)","Истина");
	КонецЕсли;
	
	УстановитьПараметр = Ложь;
	Если инкОбщийКлиентСервер.ЕстьСвойство(ИсходныеДанные,"Сотрудники") Тогда
		Если ЗначениеЗаполнено(ИсходныеДанные.Сотрудники) Тогда
			УстановитьПараметр = Истина;	
		КонецЕсли;
	КонецЕсли;
	Если УстановитьПараметр Тогда
		Запрос.УстановитьПараметр("Сотрудники", ИсходныеДанные.Сотрудники);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Сотрудник В (&Сотрудники)","Истина");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Инициализация

#КонецОбласти
