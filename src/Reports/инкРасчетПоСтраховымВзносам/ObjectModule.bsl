			
#Область о // Сформировать табличные документы:

Функция СформироватьТабличныеДокументы(ПараметрыОтчета) Экспорт
	
	ИсходныеДанные = ПолучитьИсходныеДанные(ПараметрыОтчета);
	
	ТабличныеДокументы = Новый Структура;
	ТабличныеДокументы.Вставить("Титульный",ПолучитьТитульный(ИсходныеДанные));
	ТабличныеДокументы.Вставить("Раздел1",ПолучитьРаздел1(ИсходныеДанные));
	ТабличныеДокументы.Вставить("Раздел1Подр1",ПолучитьРаздел1Подр1(ИсходныеДанные));
	ТабличныеДокументы.Вставить("Раздел1Подр1_2",ПолучитьРаздел1Подр1_2(ИсходныеДанные));
	ТабличныеДокументы.Вставить("Раздел1Подр1_20",ПолучитьРаздел1Подр1_20(ИсходныеДанные));
	ТабличныеДокументы.Вставить("Раздел1Подр1_20_2",ПолучитьРаздел1Подр1_20_2(ИсходныеДанные));
	ТабличныеДокументы.Вставить("Раздел3",ПолучитьРаздел3(ИсходныеДанные));
	
	Возврат ТабличныеДокументы;
	
КонецФункции

#Область о // Титульный лист:

Функция ПолучитьТитульный(ИсходныеДанные)
	
	ТитульныйЛист = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Титульный");
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть");
	
	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН",ВыводСтрока,ОбластьОтчета);
	
	//ВыводСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИсходныеДанные.Организация.КПП, 9, " ", "Слева");
	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку("0", 3, " ", "Слева");
	инкОтчетыСервер.ВывестиДанныеВОбласти("НомерКорректировки",ВыводСтрока,ОбластьОтчета);    
	
	ВыводСтрока = ПолучитьПериодОтчета(ИсходныеДанные.Дата2);
	инкОтчетыСервер.ВывестиДанныеВОбласти("Период",ВыводСтрока,ОбластьОтчета);    
	
	ВыводСтрока = Окр(ИсходныеДанные.СреднесписочнаяЧисленность);
	инкОтчетыСервер.ВывестиДанныеВОбласти("СрСпЧисленность",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.ОГРН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ОГРНИП",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = Формат(ИсходныеДанные.Дата1,"ДФ=yyyy");
	инкОтчетыСервер.ВывестиДанныеВОбласти("ОтчетГод",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.Наименование;
	инкОтчетыСервер.ВывестиДанныеВОбласти("НаимОрг",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.ИФНСКод;
	инкОтчетыСервер.ВывестиДанныеВОбласти("НалоговыйОрган",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = "1";
	инкОтчетыСервер.ВывестиДанныеВОбласти("ПрПодп",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.Руководитель.Фамилия;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ОргПодписантФамилия",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.Руководитель.Имя;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ОргПодписантИмя",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.Руководитель.Отчество;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ОргПодписантОтчество",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = Формат(ТекущаяДата(),"ДФ=ddMMyyyy");
	инкОтчетыСервер.ВывестиДанныеВОбласти("ДатаПодписи",ВыводСтрока,ОбластьОтчета);

	ТитульныйЛист.Вывести(ОбластьОтчета);

	Возврат ТитульныйЛист;
	
КонецФункции     

Функция ПолучитьПериодОтчета(ПериодДата)

	ПериодОтчета = "00"; 
	
	Если Месяц(ПериодДата) = 3 Тогда
		ПериодОтчета = "21"; 
	ИначеЕсли Месяц(ПериодДата) = 6 Тогда
		ПериодОтчета = "31"; 
	ИначеЕсли Месяц(ПериодДата) = 9 Тогда
		ПериодОтчета = "33"; 
	ИначеЕсли Месяц(ПериодДата) = 12 Тогда
		ПериодОтчета = "34"; 
	КонецЕсли;
	
	Возврат ПериодОтчета;
	
КонецФункции

#КонецОбласти

#Область о // Раздел 1:

Функция ПолучитьРаздел1(ИсходныеДанные)
	
	Раздел1 = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Раздел1");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть");

	инкОтчетыСервер.ВывестиДанныеВОбласти("НомСтр","002",ОбластьОтчета);

	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП",ВыводСтрока,ОбластьОтчета);

	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010000101","1",ОбластьОтчета);
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010001001",ИсходныеДанные.Организация.ОКТМО,ОбластьОтчета);
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010002001","18210201000011000160",ОбластьОтчета);
	
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРИтого",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010003001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРИтого",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010003101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРИтого",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010003201",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРИтого",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000010003301",ВыводСтрока,ОбластьОтчета);
	
	Раздел1.Вывести(ОбластьОтчета);
	
	Возврат Раздел1;
	
КонецФункции     

Функция ПолучитьРаздел1Подр1(ИсходныеДанные)
	
	Раздел1Подр1 = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Раздел1Подр1");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть");

	инкОтчетыСервер.ВывестиДанныеВОбласти("НомСтр","003",ОбластьОтчета);

	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП",ВыводСтрока,ОбластьОтчета);
	
	// Код тарифа:
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110000101","01",ОбластьОтчета);
	
	// 010:
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001004",ВыводСтрока,ОбластьОтчета);
	
	// 020:
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002004",ВыводСтрока,ОбластьОтчета);

	// 021:
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002102",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002103",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002104",ВыводСтрока,ОбластьОтчета);

	// 030:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("030_420",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("030_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("030_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("030_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003004",ВыводСтрока,ОбластьОтчета);
	
	// 040:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004004",ВыводСтрока,ОбластьОтчета);

	//// 045:
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004501",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004502",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004503",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004504",ВыводСтрока,ОбластьОтчета);
	
	// 050:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005004",ВыводСтрока,ОбластьОтчета);
	//
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005102",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005103",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005104",ВыводСтрока,ОбластьОтчета);
	
	Раздел1Подр1.Вывести(ОбластьОтчета);
	
	Возврат Раздел1Подр1;
	
КонецФункции     

Функция ПолучитьРаздел1Подр1_2(ИсходныеДанные)
	
	Раздел1Подр1 = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Раздел1Подр1");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть1");

	инкОтчетыСервер.ВывестиДанныеВОбласти("НомСтр1","004",ОбластьОтчета);

	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН1",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП1",ВыводСтрока,ОбластьОтчета);
	
	// 060:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006004",ВыводСтрока,ОбластьОтчета);
	//
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006102",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006103",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006104",ВыводСтрока,ОбластьОтчета);

	Раздел1Подр1.Вывести(ОбластьОтчета);
	
	Возврат Раздел1Подр1;
	
КонецФункции     

Функция ПолучитьДанныеЗаПериод(ИмяПоказателя,ВзносыСводТаблица,МесяцДата = Неопределено);

	ЗначениеЗаПериод = 0;    
	
	Для каждого ВзносыСтрока Из ВзносыСводТаблица Цикл
		
		ДобавитьВПериод = (МесяцДата = Неопределено);
		Если НЕ ДобавитьВПериод Тогда
			Если ВзносыСтрока.Период = МесяцДата Тогда
				ДобавитьВПериод = Истина;		
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьВПериод Тогда
			
			Если ИмяПоказателя = "030_420" Тогда

				ЗначениеЗаПериод = ЗначениеЗаПериод
				                 + ВзносыСтрока["Доход"]
								 - ВзносыСтрока["ОблагаемаяБазаПревышение"]; 
								 
			ИначеЕсли ИмяПоказателя = "040_420" Тогда

				ЗначениеЗаПериод = ЗначениеЗаПериод
				                 + ВзносыСтрока["Ст9ФЗ212"]
								 + ВзносыСтрока["МатПомощь"]; 
								 
			Иначе
				
				ЗначениеЗаПериод = ЗначениеЗаПериод
				                 + ВзносыСтрока[ИмяПоказателя];    
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;    
	
	Возврат ЗначениеЗаПериод;
	
КонецФункции 

Функция ПолучитьЗначениеЗаПериодВСтрокуХМЛ(ИмяПоказателя,ВзносыСводТаблица,МесяцДата = Неопределено)
	
	ЗначениеЗаПериод = ПолучитьДанныеЗаПериод(ИмяПоказателя,ВзносыСводТаблица,МесяцДата);
	ЗначениеЗаПериодСтрока = Формат(ЗначениеЗаПериод,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
	
	Возврат ЗначениеЗаПериодСтрока;
	
КонецФункции 

Функция КоличествоВСтроку(КоличествоЧисло)
	
	ЗначениеЗаПериодСтрока = Формат(Окр(КоличествоЧисло),"ЧДЦ=0; ЧН=0; ЧГ=");
	ЗначениеЗаПериодСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеЗаПериодСтрока, 5, " ", "Слева");
	
	Возврат ЗначениеЗаПериодСтрока;
	
КонецФункции

Функция ЧислоВСтрокуХМЛ(СуммаЧисло)
	
	ЗначениеЗаПериодСтрока = Формат(СуммаЧисло,"ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=");
	
	Возврат ЗначениеЗаПериодСтрока;
	
КонецФункции

Функция КоличествоВСтрокуХМЛ(КоличествоЧисло)
	
	ЗначениеЗаПериодСтрока = Формат(Окр(КоличествоЧисло),"ЧДЦ=0; ЧН=0; ЧГ=");
	
	Возврат ЗначениеЗаПериодСтрока;
	
КонецФункции

Функция ПолучитьЗначениеЗаПериодВСтроку(ЗначениеЗаПериод)

	ЗначениеЗаПериодСтрока = Формат(ЗначениеЗаПериод,"ЧДЦ=2; ЧН=0.00; ЧГ=");
	ЗначениеЗаПериодСтрока = СтрЗаменить(ЗначениеЗаПериодСтрока,",",".");
	ЗначениеЗаПериодСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеЗаПериодСтрока, 12, " ", "Слева");
	
	Возврат ЗначениеЗаПериодСтрока;

КонецФункции

Функция ПолучитьРаздел1Подр1_20(ИсходныеДанные)
	
	Раздел1Подр1 = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Раздел1Подр1");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть");

	инкОтчетыСервер.ВывестиДанныеВОбласти("НомСтр","005",ОбластьОтчета);

	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП",ВыводСтрока,ОбластьОтчета);
	
	// Код тарифа:
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110000101","20",ОбластьОтчета);
	
	// 010:
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110001004",ВыводСтрока,ОбластьОтчета);
	
	// 020:
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002004",ВыводСтрока,ОбластьОтчета);

	// 021:
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002102",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002103",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = КоличествоВСтроку(ПолучитьДанныеЗаПериод("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110002104",ВыводСтрока,ОбластьОтчета);
	
	// 030:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110003004",ВыводСтрока,ОбластьОтчета);
	
	// 040:
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004001",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004002",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004003",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("040_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004004",ВыводСтрока,ОбластьОтчета);

	//// 045:
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004501",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004502",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004503",ВыводСтрока,ОбластьОтчета);
	//ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("045_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	//инкОтчетыСервер.ВывестиДанныеВОбласти("П000110004504",ВыводСтрока,ОбластьОтчета);
	
	// 050:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005004",ВыводСтрока,ОбластьОтчета);
	//
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005102",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005103",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110005104",ВыводСтрока,ОбластьОтчета);
	
	Раздел1Подр1.Вывести(ОбластьОтчета);
	
	Возврат Раздел1Подр1;
	
КонецФункции     

Функция ПолучитьРаздел1Подр1_20_2(ИсходныеДанные)
	
	Раздел1Подр1 = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Раздел1Подр1");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть1");

	инкОтчетыСервер.ВывестиДанныеВОбласти("НомСтр1","006",ОбластьОтчета);

	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН1",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП1",ВыводСтрока,ОбластьОтчета);
	
	// 060:
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006001",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006002",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006003",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006004",ВыводСтрока,ОбластьОтчета);
	//
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006101",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006102",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006103",ВыводСтрока,ОбластьОтчета);
	ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ПолучитьДанныеЗаПериод("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000110006104",ВыводСтрока,ОбластьОтчета);

	Раздел1Подр1.Вывести(ОбластьОтчета);
	
	Возврат Раздел1Подр1;
	
КонецФункции     

#КонецОбласти

#Область о // Раздел 3:

Функция ПолучитьРаздел3(ИсходныеДанные)
	
	Раздел3 = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПечатныйБланк2023Кв3_Раздел3");
	
	НомерСтраницы = 7;
	Для каждого СотрудникСтрока Из ИсходныеДанные.СотрудникиДанныеТаблица Цикл

		ВывестиДанныеНР(СотрудникСтрока,ИсходныеДанные,НомерСтраницы,Раздел3,Макет);
		ВывестиДанныеМС(СотрудникСтрока,ИсходныеДанные,НомерСтраницы,Раздел3,Макет);
		
	КонецЦикла;
	
	Возврат Раздел3;
	
КонецФункции  

Процедура ВывестиДанныеМС(СотрудникСтрока,ИсходныеДанные,НомерСтраницы,Раздел3,Макет)
	
	Если НЕ ЕстьДанныеПоПревышению(СотрудникСтрока,ИсходныеДанные) Тогда
		Возврат;
	КонецЕсли;

	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть");

	ВывестиЗаголовокРаздел3(ОбластьОтчета,СотрудникСтрока,ИсходныеДанные,НомерСтраницы);
	ВывестиДанныеОСотруднике(ОбластьОтчета,СотрудникСтрока);
	ВывестиДанныеВЗН("МС",ОбластьОтчета,СотрудникСтрока,ИсходныеДанные);

	Раздел3.Вывести(ОбластьОтчета);
	Раздел3.ВывестиГоризонтальныйРазделительСтраниц();
		
	НомерСтраницы = НомерСтраницы + 1;

КонецПроцедуры  

Функция ЕстьДанныеПоПревышению(СотрудникСтрока,ИсходныеДанные)

	ЕстьДанныеБулево = Ложь; 
	
	СотрудникПоиск = Новый Структура("Сотрудник",СотрудникСтрока.Сотрудник);
	ДанныеВЗНМассив = ИсходныеДанные.РезультатРасчета.ВзносыТаблица_Месяц.НайтиСтроки(СотрудникПоиск);
	Для каждого СтрокаДанныеВЗН Из ДанныеВЗНМассив Цикл
		
		Если СтрокаДанныеВЗН.ОблагаемаяБазаПревышение > 0 Тогда
			ЕстьДанныеБулево = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДанныеБулево;
	
КонецФункции

Процедура ВывестиДанныеНР(СотрудникСтрока,ИсходныеДанные,НомерСтраницы,Раздел3,Макет)
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОсновнаяЧасть");
	
	ВывестиЗаголовокРаздел3(ОбластьОтчета,СотрудникСтрока,ИсходныеДанные,НомерСтраницы);
	ВывестиДанныеОСотруднике(ОбластьОтчета,СотрудникСтрока);
	ВывестиДанныеВЗН("НР",ОбластьОтчета,СотрудникСтрока,ИсходныеДанные);

	Раздел3.Вывести(ОбластьОтчета);
	Раздел3.ВывестиГоризонтальныйРазделительСтраниц();
		
	НомерСтраницы = НомерСтраницы + 1;

КонецПроцедуры 

Процедура ВывестиДанныеВЗН(КодКатегории,ОбластьОтчета,СотрудникСтрока,ИсходныеДанные)
	
	ДанныеВЗНЗаПериод = ПолучитьДанныеВЗНЗаПериод(КодКатегории,СотрудникСтрока,ИсходныеДанные);
	
	Для НомерМесяца = 1 По 3 Цикл
		
		//	Категория:
		ВыводСтрока = КодКатегории;
		инкОтчетыСервер.ВывестиДанныеВОбласти("П00321М113001_"+НомерМесяца,ВыводСтрока,ОбластьОтчета);
		
		//	Сумма выплат:
		ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ДанныеВЗНЗаПериод[НомерМесяца-1].Доход);
		инкОтчетыСервер.ВывестиДанныеВОбласти("П00321М114001_"+НомерМесяца,ВыводСтрока,ОбластьОтчета);
		
		//	Облагаемая база:
		ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ДанныеВЗНЗаПериод[НомерМесяца-1].ОблагаемаяБаза);
		инкОтчетыСервер.ВывестиДанныеВОбласти("П00321М115001_"+НомерМесяца,ВыводСтрока,ОбластьОтчета);
		
		ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ДанныеВЗНЗаПериод[НомерМесяца-1].ДоговорыГПХ);
		инкОтчетыСервер.ВывестиДанныеВОбласти("П00321М116001_"+НомерМесяца,ВыводСтрока,ОбластьОтчета);

		ВыводСтрока = ПолучитьЗначениеЗаПериодВСтроку(ДанныеВЗНЗаПериод[НомерМесяца-1].СФР);

		инкОтчетыСервер.ВывестиДанныеВОбласти("П00321М117001_"+НомерМесяца,ВыводСтрока,ОбластьОтчета);

	КонецЦикла;      
	
КонецПроцедуры

Функция ПолучитьДанныеВЗНЗаПериод(КодКатегории,СотрудникСтрока,ИсходныеДанные)

	ДанныеВЗНЗаПериод = Новый Массив;
	ТекущийМесяц = ИсходныеДанные.Дата1; 
	
	Для НомерМесяца = 1 По 3 Цикл
		
		ПоискДанных = Новый Структура;
		ПоискДанных.Вставить("Период",ТекущийМесяц);
		ПоискДанных.Вставить("Сотрудник",СотрудникСтрока.Сотрудник);
		
		ДанныеВЗНСтруктура = Новый Структура;
		ДанныеВЗНСтруктура.Вставить("Доход",0);
		ДанныеВЗНСтруктура.Вставить("ОблагаемаяБаза",0);
		ДанныеВЗНСтруктура.Вставить("ДоговорыГПХ",0);
		ДанныеВЗНСтруктура.Вставить("СФР",0);   
		
		ДанныеВЗНМассив = ИсходныеДанные.РезультатРасчета.ВзносыТаблица_Месяц.НайтиСтроки(ПоискДанных);
		Если ДанныеВЗНМассив.Количество() > 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеВЗНСтруктура,ДанныеВЗНМассив[0]);
			
			Если КодКатегории = "НР" Тогда
				ДанныеВЗНСтруктура.Доход = ДанныеВЗНМассив[0].Доход - ДанныеВЗНМассив[0].ОблагаемаяБазаПревышение;
			ИначеЕсли КодКатегории = "МС" Тогда
				ДанныеВЗНСтруктура.Доход = ДанныеВЗНМассив[0].ОблагаемаяБазаПревышение;
				ДанныеВЗНСтруктура.ОблагаемаяБаза = ДанныеВЗНМассив[0].ОблагаемаяБазаПревышение;
				ДанныеВЗНСтруктура.СФР = ДанныеВЗНМассив[0].СФРПревышение;
			КонецЕсли;
	
		КонецЕсли;   
		
		ДанныеВЗНЗаПериод.Добавить(ДанныеВЗНСтруктура);
		
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц,1);
		
	КонецЦикла;
	
	Возврат ДанныеВЗНЗаПериод;
	
КонецФункции

Процедура ВывестиЗаголовокРаздел3(ОбластьОтчета,СотрудникСтрока,ИсходныеДанные,НомерСтраницы)

	ВыводСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 3, "0", "Слева");
	инкОтчетыСервер.ВывестиДанныеВОбласти("НомСтр",ВыводСтрока,ОбластьОтчета);
		
	ВыводСтрока = ИсходныеДанные.Организация.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("ИНН",ВыводСтрока,ОбластьОтчета);

	ВыводСтрока = ИсходныеДанные.Организация.КПП;
	инкОтчетыСервер.ВывестиДанныеВОбласти("КПП",ВыводСтрока,ОбластьОтчета);

КонецПроцедуры

Процедура ВывестиДанныеОСотруднике(ОбластьОтчета,СотрудникСтрока)

	ВыводСтрока = СотрудникСтрока.ИНН;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310002001",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = СотрудникСтрока.СНИЛС;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310003001",ВыводСтрока,ОбластьОтчета);

	ВыводСтрока = СотрудникСтрока.Фамилия;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310004001",ВыводСтрока,ОбластьОтчета);

	ВыводСтрока = СотрудникСтрока.Имя;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310005001",ВыводСтрока,ОбластьОтчета);

	ВыводСтрока = СотрудникСтрока.Отчество;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310006001",ВыводСтрока,ОбластьОтчета);

	ВыводСтрока = Формат(СотрудникСтрока.ДатаРождения,"ДФ=ddMMyyyy");
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310007001",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = Формат(СотрудникСтрока.ГражданствоКод,"ДФ=ddMMyyyy");
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310008001",ВыводСтрока,ОбластьОтчета);
	      
	ВыводСтрока = СотрудникСтрока.Пол;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310009001",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = СотрудникСтрока.ДокументКод;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310010001",ВыводСтрока,ОбластьОтчета);
	
	ВыводСтрока = СотрудникСтрока.ДокументСерия 
	            + " "
				+ СотрудникСтрока.ДокументНомер;
	инкОтчетыСервер.ВывестиДанныеВОбласти("П000310011001",ВыводСтрока,ОбластьОтчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти	

#Область о // Исходные данные:

Функция ПолучитьИсходныеДанные(ПараметрыОтчета)
	
	ИсходныеДанные = Новый Структура;                       
	ИсходныеДанные.Вставить("Организация",ПараметрыОтчета.Организация);
	ИсходныеДанные.Вставить("Дата1",НачалоМесяца(ПараметрыОтчета.Дата1));
	ИсходныеДанные.Вставить("Дата2",НачалоМесяца(ПараметрыОтчета.Дата2));
	ИсходныеДанные.Вставить("КБК","18210201000011000160");
	
	ДанныеВЗН = ПолучитьДанныеВЗН(ИсходныеДанные);
	ИсходныеДанные.Вставить("СводныеДанные",ДанныеВЗН.СводныеДанные);
	ИсходныеДанные.Вставить("РезультатРасчета",ДанныеВЗН.РезультатРасчета);
	ИсходныеДанные.Вставить("СотрудникиДанныеТаблица",ПолучитьСотрудникиДанныеТаблица(ИсходныеДанные));
	
	ИсходныеДанные.Вставить("ВзносыСводТаблица",ИсходныеДанные.СводныеДанные.Взносы.ВзносыСводТаблица_Месяц);
	ИсходныеДанные.Вставить("ЧисленностьСвод",ИсходныеДанные.СводныеДанные.Численность);
	ИсходныеДанные.Вставить("СреднесписочнаяЧисленность",ПолучитьСреднесписочнуюЧисленность(ИсходныеДанные));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПолучитьСотрудникиДанныеТаблица(ИсходныеДанные)
	
	СотрудникиМассив = ИсходныеДанные.РезультатРасчета.ВзносыТаблица_Месяц.ВыгрузитьКолонку("Сотрудник");
	СотрудникиТаблица = Справочники.инкСотрудники.ПолучитьСписокСотрудниковСКадровымиДанными(ИсходныеДанные.Дата2,СотрудникиМассив);
	
	УволенныеМассив = Новый Массив;
	Для каждого СотрудникСтрока Из СотрудникиТаблица Цикл
		
		Если ЗначениеЗаполнено(СотрудникСтрока.ДатаУвольнения) И 
			 СотрудникСтрока.ДатаУвольнения < ИсходныеДанные.Дата1 
		Тогда
			УволенныеМассив.Добавить(СотрудникСтрока);
		КонецЕсли;
		
	КонецЦикла;

	Для каждого УволенныйЭлемент Из УволенныеМассив Цикл
		СотрудникиТаблица.Удалить(УволенныйЭлемент);	
	КонецЦикла;

	Возврат СотрудникиТаблица;	
	
КонецФункции

Функция ПолучитьСреднесписочнуюЧисленность(ИсходныеДанные)
	
	СреднесписочнуюЧисленность = 0;    
	
	Для каждого ЧисленностьСтрока Из ИсходныеДанные.СводныеДанные.Численность.ЧисленностьСводТаблица_Год Цикл
		СреднесписочнуюЧисленность = СреднесписочнуюЧисленность 
		                           + ЧисленностьСтрока.СреднесписочнаяЧисленность;	
	КонецЦикла;
	
	Возврат СреднесписочнуюЧисленность;	
	
КонецФункции

Функция ПолучитьДанныеВЗН(ИсходныеДанные)
	
	ДанныеВЗН = Новый Структура;
	ДанныеВЗН.Вставить("СводныеДанные");
	ДанныеВЗН.Вставить("РезультатРасчета");
	
	МенеджерРасчета = Обработки.инкРасчетВзносов.Создать();
	//
	МенеджерРасчета.Инициализация();
	//
	МенеджерРасчета.ДанныеДляРасчетаВзносов.Организация = ИсходныеДанные.Организация;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.Дата1 = ИсходныеДанные.Дата1;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.Дата2 = ИсходныеДанные.Дата2;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.СформироватьТабличныеДокументы = Ложь;
	МенеджерРасчета.ДанныеДляРасчетаВзносов.ВидОтчета = "Свод";
	
	//
	МенеджерРасчета.ВыполнитьРасчетВзносов();
	//         
	
	ДанныеВЗН.СводныеДанные = МенеджерРасчета.СводныеДанные;
	ДанныеВЗН.РезультатРасчета = МенеджерРасчета.РезультатРасчета;

	Возврат ДанныеВЗН;
	
КонецФункции

#КонецОбласти
					
#Область о // Сформировать XML файл:

// Процедура - Сформировать файл
//
Функция СформироватьФайл(ПараметрыОтчета) Экспорт
	
	ИсходныеДанные = ПолучитьИсходныеДанные(ПараметрыОтчета);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ПараметрыОтчета,ИсходныеДанные);

	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки,ПараметрыВыгрузки);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки,
											 ИсходныеДанные);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	//       
	ФайлВыгрузкиСтруктура = Новый Структура;   
	ФайлВыгрузкиСтруктура.Вставить("ФайлАдрес",ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор));
	ФайлВыгрузкиСтруктура.Вставить("ФайлИмя",ПараметрыВыгрузки.ИдФайл+".xml");
	//
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ФайлВыгрузкиСтруктура;   
	
КонецФункции  

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки,
							ПараметрыВыгрузки,
							КодировкаФайлаВыгрузки, 
							ИсходныеДанные)
	
	ПотокXML = СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки, ИсходныеДанные);
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции   

Функция СоздатьНовыйПотокXML(Кодировка = "utf-8") Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку(Кодировка);
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева,
								 ПотокXML,
								 ПараметрыВыгрузки,
								 ИсходныеДанные)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки, ИсходныеДанные);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
			
		ИначеЕсли СтрокаДерева.Код = "РасчетСВ" Тогда
			
			ПотокXML.ЗаписатьНачалоЭлемента("РасчетСВ");
			
			ПотокXML.ЗаписатьНачалоЭлемента("ОбязПлатСВ");
			
			ПотокXML.ЗаписатьАтрибут("ТипПлат", ПараметрыВыгрузки.ТипПлат);
			ПотокXML.ЗаписатьАтрибут("ОКТМО",   ПараметрыВыгрузки.ОКТМО);
			
			ПотокXML.ЗаписатьНачалоЭлемента("УплПерОПС");
			
			ПотокXML.ЗаписатьАтрибут("КБК", ИсходныеДанные.КБК);
			ПотокXML.ЗаписатьАтрибут("СумСВУплПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРИтого",ИсходныеДанные.ВзносыСводТаблица));
			ПотокXML.ЗаписатьАтрибут("СумСВУпл1М",  ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРИтого",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1));
			ПотокXML.ЗаписатьАтрибут("СумСВУпл2М",  ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРИтого",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1)));
			ПотокXML.ЗаписатьАтрибут("СумСВУпл3М",  ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРИтого",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2)));
			
			ПотокXML.ЗаписатьКонецЭлемента(); // "УплПерОПС"
			
			ВывестиРасчетПоТарифу01(ПотокXML,ИсходныеДанные);
			ВывестиРасчетПоТарифу20(ПотокXML,ИсходныеДанные);  
			
			ПотокXML.ЗаписатьКонецЭлемента(); // "ОбязПлатСВ"
			
			Для каждого СотрудникСтрока Из ИсходныеДанные.СотрудникиДанныеТаблица Цикл

				ПотокXML.ЗаписатьНачалоЭлемента("ПерсСвСтрахЛиц");
				
				ПотокXML.ЗаписатьНачалоЭлемента("ДанФЛПолуч");
				ПотокXML.ЗаписатьАтрибут("ИННФЛ", СотрудникСтрока.ИНН); 
				ПотокXML.ЗаписатьАтрибут("СНИЛС", СотрудникСтрока.СНИЛС); 
				ПотокXML.ЗаписатьАтрибут("ДатаРожд", Формат(СотрудникСтрока.ДатаРождения,"ДФ=dd.MM.yyyy")); 
				ПотокXML.ЗаписатьАтрибут("Гражд",  СотрудникСтрока.ГражданствоКод); 
				ПотокXML.ЗаписатьАтрибут("Пол", Строка(СотрудникСтрока.Пол)); 
				ПотокXML.ЗаписатьАтрибут("КодВидДок",СотрудникСтрока.ДокументКод); 
				ПотокXML.ЗаписатьАтрибут("СерНомДок", СотрудникСтрока.ДокументСерия + " " + СотрудникСтрока.ДокументНомер); 
				
				ПотокXML.ЗаписатьНачалоЭлемента("ФИО");  
				ПотокXML.ЗаписатьАтрибут("Фамилия", 	СотрудникСтрока.Фамилия); 
				ПотокXML.ЗаписатьАтрибут("Имя", 		СотрудникСтрока.Имя); 
				ПотокXML.ЗаписатьАтрибут("Отчество", 	СотрудникСтрока.Отчество); 
                ПотокXML.ЗаписатьКонецЭлемента(); // "ФИО"

				ПотокXML.ЗаписатьКонецЭлемента(); // "ДанФЛПолуч"

				ПотокXML.ЗаписатьНачалоЭлемента("СвВыплСВОПС");
				ПотокXML.ЗаписатьНачалоЭлемента("СвВыпл");
				//
				ЗаписатьДанныеОПыплатах(СотрудникСтрока,ПотокXML,ИсходныеДанные);
				//
				ПотокXML.ЗаписатьКонецЭлемента(); // "СвВыпл"
				ПотокXML.ЗаписатьКонецЭлемента(); // "СвВыплСВОПС"
				
				ПотокXML.ЗаписатьКонецЭлемента(); // "ПерсСвСтрахЛиц"
				
			КонецЦикла;

			ПотокXML.ЗаписатьКонецЭлемента(); // "РасчетСВ"

			ДеревоРаздела = Неопределено;
			
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки, ИсходныеДанные);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры    

Процедура ВывестиРасчетПоТарифу01(ПотокXML,ИсходныеДанные)

	ПотокXML.ЗаписатьНачалоЭлемента("РасчСВ_ОПС_ОМС");

	ПотокXML.ЗаписатьАтрибут("ТарифПлат", "01"); 

	ПотокXML.ЗаписатьНачалоЭлемента("РасчСВ_ОПСОМС");

	ПотокXML.ЗаписатьНачалоЭлемента("КолСтрахЛицВс");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год))); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1))); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)))); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "КолСтрахЛицВс"

	ПотокXML.ЗаписатьНачалоЭлемента("КолЛицНачСВВс");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год))); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1))); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)))); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "КолЛицНачСВВс"

	ПотокXML.ЗаписатьНачалоЭлемента("НеПревБазОПС");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год))); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1))); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)))); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НеПревБазОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("ПревБазОПС");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", 	"0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "ПревБазОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("ВыплНачислФЛ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("030_420",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("030_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("030_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("030_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "ВыплНачислФЛ"

	ПотокXML.ЗаписатьНачалоЭлемента("НеОбложенСВ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("040_420",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("040_420",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("040_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("040_420",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НеОбложенСВ"

	ПотокXML.ЗаписатьНачалоЭлемента("РасхПринВыч");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", 	"0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "РасхПринВыч"

	ПотокXML.ЗаписатьНачалоЭлемента("БазНачислСВ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "БазНачислСВ"

	ПотокXML.ЗаписатьНачалоЭлемента("БазНеПревышОПС");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБаза",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "БазНеПревышОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("БазПревышОПС");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", 	"0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "БазПревышОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("НачислСВ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НачислСВ"

	ПотокXML.ЗаписатьНачалоЭлемента("НачислСВНеПрев");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФР",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НачислСВНеПрев"

	ПотокXML.ЗаписатьНачалоЭлемента("НачислСВПрев");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", 	"0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НачислСВПрев"

	ПотокXML.ЗаписатьКонецЭлемента(); // "РасчСВ_ОПСОМС"

	ПотокXML.ЗаписатьКонецЭлемента(); // "РасчСВ_ОПС_ОМС"  
	
КонецПроцедуры

Процедура ВывестиРасчетПоТарифу20(ПотокXML,ИсходныеДанные)
	
	ПотокXML.ЗаписатьНачалоЭлемента("РасчСВ_ОПС_ОМС");
	
	ПотокXML.ЗаписатьАтрибут("ТарифПлат", "20"); 

	ПотокXML.ЗаписатьНачалоЭлемента("РасчСВ_ОПСОМС");

	ПотокXML.ЗаписатьНачалоЭлемента("КолСтрахЛицВс");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год))); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1))); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)))); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "КолСтрахЛицВс"

	ПотокXML.ЗаписатьНачалоЭлемента("КолЛицНачСВВс");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год))); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1))); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)))); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "КолЛицНачСВВс"

	ПотокXML.ЗаписатьНачалоЭлемента("НеПревБазОПС");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Год))); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ИсходныеДанные.Дата1))); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,1)))); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", КоличествоВСтрокуХМЛ(ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ЗастрахованныеПФПревышениеБазыКоличество",ИсходныеДанные.ЧисленностьСвод.ЧисленностьСводТаблица_Месяц,ДобавитьМесяц(ИсходныеДанные.Дата1,2)))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НеПревБазОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("ПревБазОПС");  
	ПотокXML.ЗаписатьАтрибут("КолВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Кол1Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол2Посл3М", 	"0"); 
	ПотокXML.ЗаписатьАтрибут("Кол3Посл3М", 	"0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "ПревБазОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("ВыплНачислФЛ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "ВыплНачислФЛ"

	ПотокXML.ЗаписатьНачалоЭлемента("НеОбложенСВ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", "0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НеОбложенСВ"

	ПотокXML.ЗаписатьНачалоЭлемента("РасхПринВыч");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", "0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "РасхПринВыч"

	ПотокXML.ЗаписатьНачалоЭлемента("БазНачислСВ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "БазНачислСВ"

	ПотокXML.ЗаписатьНачалоЭлемента("БазНеПревышОПС");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("ОблагаемаяБазаПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "БазНеПревышОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("БазПревышОПС");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", "0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "БазПревышОПС"

	ПотокXML.ЗаписатьНачалоЭлемента("НачислСВ");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НачислСВ"

	ПотокXML.ЗаписатьНачалоЭлемента("НачислСВНеПрев");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица)); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ИсходныеДанные.Дата1)); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,1))); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", ПолучитьЗначениеЗаПериодВСтрокуХМЛ("СФРПревышение",ИсходныеДанные.ВзносыСводТаблица,ДобавитьМесяц(ИсходныеДанные.Дата1,2))); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НачислСВНеПрев"

	ПотокXML.ЗаписатьНачалоЭлемента("НачислСВПрев");  
	ПотокXML.ЗаписатьАтрибут("СумВсегоПер", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум1Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум2Посл3М", "0"); 
	ПотокXML.ЗаписатьАтрибут("Сум3Посл3М", "0"); 
	ПотокXML.ЗаписатьКонецЭлемента(); // "НачислСВПрев"

	ПотокXML.ЗаписатьКонецЭлемента(); // "РасчСВ_ОПСОМС"

	ПотокXML.ЗаписатьКонецЭлемента(); // "РасчСВ_ОПС_ОМС"
	
КонецПроцедуры

Процедура ЗаписатьДанныеОПыплатах(СотрудникСтрока,ПотокXML,ИсходныеДанные)
	
	КатегорииМассив = Новый Массив;
	КатегорииМассив.Добавить("НР");
	КатегорииМассив.Добавить("МС");        
	
	ЕстьДанныеПоПревышению = ЕстьДанныеПоПревышению(СотрудникСтрока,ИсходныеДанные);

	Для НомерМесяца = 1 По 3 Цикл
		
		Для каждого КатегорияЭлемент Из КатегорииМассив Цикл
			
			ДанныеВЗНЗаПериод = ПолучитьДанныеВЗНЗаПериод(КатегорияЭлемент,СотрудникСтрока,ИсходныеДанные);

			ПотокXML.ЗаписатьНачалоЭлемента("СвВыплМК");
			ПотокXML.ЗаписатьАтрибут("Месяц",Строка(НомерМесяца)); 
			ПотокXML.ЗаписатьАтрибут("КодКатЛиц",КатегорияЭлемент); 
			Если НЕ ЕстьДанныеПоПревышению И (КатегорияЭлемент = "МС") Тогда
				ПотокXML.ЗаписатьАтрибут("СумВыпл","0"); 
			Иначе
				ПотокXML.ЗаписатьАтрибут("СумВыпл",ЧислоВСтрокуХМЛ(ДанныеВЗНЗаПериод[НомерМесяца-1].Доход)); 
				ПотокXML.ЗаписатьАтрибут("ВыплОПС",ЧислоВСтрокуХМЛ(ДанныеВЗНЗаПериод[НомерМесяца-1].ОблагаемаяБаза)); 
				ПотокXML.ЗаписатьАтрибут("НачислСВ",ЧислоВСтрокуХМЛ(ДанныеВЗНЗаПериод[НомерМесяца-1].СФР)); 
			КонецЕсли;
			ПотокXML.ЗаписатьКонецЭлемента(); // "СвВыплМК"
			
		КонецЦикла;
		
	КонецЦикла;      
	
КонецПроцедуры


Процедура ЗаполнитьДанными(ДеревоВыгрузки,ПараметрыВыгрузки) Экспорт
	
	ОбработатьУсловныеЭлементы(ДеревоВыгрузки,ПараметрыВыгрузки);
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры  

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если Стр.Код = "ПерсСвФЛ" Тогда
			Продолжить;
		КонецЕсли;
		
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел, ПараметрыВыгрузки) И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   

Функция ИмеютсяАналогичныеСоседниеУзлыКлюч(Стр) Экспорт 
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ), Ложь).Количество() > 1);
	
КонецФункции

Процедура УдалитьУзел(Узел) Экспорт 
	
	РодительУзла = ?(Узел.Родитель = Неопределено, Узел.Владелец(), Узел.Родитель);
	РодительУзла.Строки.Удалить(Узел);
	
КонецПроцедуры

Функция УзелПуст(Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,Узел,НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

// Возвращает признак определения свойства.
//
Функция СвойствоОпределено(Объект, ИмяСвойства) Экспорт
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

// Если в дереве параметр и он не выполнен, то удаляется из дерева.
Процедура ОбработатьУсловныеЭлементы(Узел,ПараметрыВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		//Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ТекСтр,ПараметрыВыгрузки);
	КонецЦикла;
	
КонецПроцедуры    

Функция УсловиеВыполнено(ИсходныеДанные, Условие) Экспорт
	
	Попытка
		РезультатВычисленияВыражения = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
			СтрЗаменить(Условие, "&", "Параметры."), ИсходныеДанные);
		
		Если РезультатВычисленияВыражения <> Неопределено Тогда
			Если РезультатВычисленияВыражения = 1 ИЛИ РезультатВычисленияВыражения = 0
			 ИЛИ РезультатВычисленияВыражения = Истина ИЛИ РезультатВычисленияВыражения = Ложь Тогда
				Возврат НЕ (Булево(РезультатВычисленияВыражения) = Ложь);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ПараметрыОтчета,ИсходныеДанные) 
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту", "214");
	ПараметрыВыгрузки.Вставить("ВерсПрог", инкОбщийСервер.НазваниеИВерсияПрограммы());

	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
	ПараметрыВыгрузки.Вставить("Период",   ПолучитьПериодОтчета(ИсходныеДанные.Дата2));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(ПараметрыОтчета.Дата1,"ДФ=yyyy"));
	ПараметрыВыгрузки.Вставить("КодНО",    ПараметрыОтчета.Организация.ИФНСКод);
	ПараметрыВыгрузки.Вставить("НомКорр",  "0");
	
	ПараметрыВыгрузки.Вставить("Тлф", Справочники.инкОрганизации.ПолучитьКонтактныйТелефонОрганизации(ПараметрыОтчета.Организация));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(ИсходныеДанные.Организация.Наименование));
	ПараметрыВыгрузки.Вставить("ИННЮЛ",  СокрЛП(ИсходныеДанные.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(ИсходныеДанные.Организация.КПП));
	
	ПараметрыВыгрузки.Вставить("Фамилия",  ИсходныеДанные.Организация.Руководитель.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ИсходныеДанные.Организация.Руководитель.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ИсходныеДанные.Организация.Руководитель.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      "1");

	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ИсходныеДанные.Организация.Руководитель.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ИсходныеДанные.Организация.Руководитель.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ИсходныеДанные.Организация.Руководитель.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_RASCHSV"));

	ПараметрыВыгрузки.Вставить("СрЧисл", Окр(ИсходныеДанные.СреднесписочнаяЧисленность));
	ПараметрыВыгрузки.Вставить("ИННОрг", СокрЛП(ИсходныеДанные.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("ФормРеорг", "");
	ПараметрыВыгрузки.Вставить("ИННРеорг",  "");
	ПараметрыВыгрузки.Вставить("КППРеорг",  "");       
	ПараметрыВыгрузки.Вставить("ОГРНИП",  "");  
	ПараметрыВыгрузки.Вставить("НаимОргПред",  "");  
	ПараметрыВыгрузки.Вставить("НаимДокПред",  "");  

	ПараметрыВыгрузки.Вставить("ТипПлат",  "1");  
	ПараметрыВыгрузки.Вставить("ОКТМО",  ИсходныеДанные.Организация.ОКТМО);  
	ПараметрыВыгрузки.Вставить("ИндивидуальныйПредприниматель",(СтрДлина(ИсходныеДанные.Организация.ИНН) = 12));
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ",  	НЕ ПараметрыВыгрузки.ИндивидуальныйПредприниматель);  
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",  ПараметрыВыгрузки.ИндивидуальныйПредприниматель);  
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции 

Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННЮл) + СокрЛП(ПараметрыВыгрузки.КПП);
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ИзвлечьСтруктуруXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки506");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти
																					  
